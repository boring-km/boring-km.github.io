<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flutter 중급반 스터디 14기 7주차</title>
      <link href="/2023/08/07/flutter/study_14th/week7/"/>
      <url>/2023/08/07/flutter/study_14th/week7/</url>
      
        <content type="html"><![CDATA[<p>이번 주에 안드로이드 개발에만 빠져 있었네요.<br>Preview 기능이 Flutter에도 도입되었으면 개발이 훨씬 편해질 것 같습니다</p><h1 id="Not-Flutter"><a href="#Not-Flutter" class="headerlink" title="Not Flutter"></a>Not Flutter</h1><p><img src="/images/flutter/study_14th/week7/img.png" alt="img.png"></p><ul><li>GUI: PyQT로 제작</li><li>실행파일로 만들기 위해 py2app 사용함 → pyinstaller 라는 것도 있는데 뭔가 번들링하고 나서 실행이 안되어서 포기</li><li>selenium: <a href="https://selenium-python.readthedocs.io/index.html">https://selenium-python.readthedocs.io/index.html</a></li><li>Web에서 로그인을 하고 출근&#x2F;퇴근 버튼을 눌러야 하는 동작을 수행</li></ul><h3 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h3><ul><li>Safari에서는 개발자 모드에서 Remote Automation 활성화해야함.</li></ul><p><img src="/images/flutter/study_14th/week7/img_1.png" alt="img_1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_browser_driver</span>():</span><br><span class="line">    <span class="comment"># macOS면 Safari, Windows면 Chrome</span></span><br><span class="line">    <span class="keyword">if</span> platform.system() == <span class="string">&#x27;Darwin&#x27;</span>:</span><br><span class="line">        driver = webdriver.Safari(keep_alive=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        driver = webdriver.Chrome(keep_alive=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> driver</span><br></pre></td></tr></table></figure><ul><li><p>webdriver 사용 코드</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">start_work</span>(<span class="params">driver</span>):</span><br><span class="line">    now_hour = datetime.datetime.now().hour</span><br><span class="line">    <span class="keyword">if</span> now_hour &gt; <span class="number">11</span>:</span><br><span class="line">        notice_not_yet(now_hour)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    portal_login(driver)</span><br><span class="line">    driver.get(start_work_url)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    driver.close()</span><br><span class="line">    driver.quit()</span><br><span class="line">    app.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">finish_work</span>(<span class="params">driver</span>):</span><br><span class="line">    now_hour = datetime.datetime.now().hour</span><br><span class="line">    <span class="keyword">if</span> now_hour &lt; <span class="number">16</span>:</span><br><span class="line">        notice_not_yet(now_hour)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    confirm, hour, minute = portal_login(driver)</span><br><span class="line">    driver.get(finish_work_url)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    driver.execute_script(<span class="string">&quot;document.getElementById(&#x27;input2&#x27;).value = &#x27;&quot;</span> + hour + <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">    driver.execute_script(<span class="string">&quot;document.getElementById(&#x27;input3&#x27;).value = &#x27;&quot;</span> + minute + <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">    driver.execute_script(<span class="string">&quot;document.getElementsByName(&#x27;check2&#x27;)[1].checked = true&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> confirm:</span><br><span class="line">        driver.execute_script(<span class="string">&quot;$app.save()&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        driver.close()</span><br><span class="line">        driver.quit()</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    driver.close()</span><br><span class="line">    driver.quit()</span><br><span class="line">    app.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">portal_login</span>(<span class="params">driver</span>):</span><br><span class="line">    driver.get(loginUrl)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    user_id, password, hour, minute, confirm = get_credentials()</span><br><span class="line">    driver.find_element(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;j_username&#x27;</span>).send_keys(user_id)</span><br><span class="line">    driver.execute_script(<span class="string">&quot;document.getElementById(&#x27;j_username&#x27;).value = &#x27;&quot;</span> + user_id + <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">    driver.find_element(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;password&#x27;</span>).send_keys(password)</span><br><span class="line">    driver.execute_script(<span class="string">&quot;document.getElementById(&#x27;password&#x27;).value = &#x27;&quot;</span> + password + <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    driver.execute_script(<span class="string">&quot;document.getElementById(&#x27;btnSubmit&#x27;).click()&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> confirm, hour, minute</span><br></pre></td></tr></table></figure></li></ul><h1 id="링크풀-앱에서-Flutter-Widget으로-그릴-수-없었던-기능"><a href="#링크풀-앱에서-Flutter-Widget으로-그릴-수-없었던-기능" class="headerlink" title="링크풀 앱에서 Flutter Widget으로 그릴 수 없었던 기능"></a>링크풀 앱에서 Flutter Widget으로 그릴 수 없었던 기능</h1><p>다른 앱(인터넷 브라우저, 유튜브 등)에서 Flutter 앱 호출하기 전에 중간 UI 그리기</p><ul><li><a href="https://play.google.com/store/apps/details?id=com.mr.ac_project_app">링크풀 - 체계적인 링크 관리의 시작(PlayStore)</a></li><li><a href="https://apps.apple.com/us/app/%EB%A7%81%ED%81%AC%ED%92%80-%EC%B2%B4%EA%B3%84%EC%A0%81%EC%9D%B8-%EB%A7%81%ED%81%AC-%EA%B4%80%EB%A6%AC%EC%9D%98-%EC%8B%9C%EC%9E%91/id1644108674">링크풀 - 체계적인 링크 관리의 시작(AppStore)</a></li></ul><h3 id="iOS-UI"><a href="#iOS-UI" class="headerlink" title="iOS UI"></a>iOS UI</h3><p>iOS에서는 Share Extension 이라는 모듈을 추가해야 해당 기능 구현이 가능합니다.</p><p>Xcode에서만 개발이 가능해요</p><p><img src="/images/flutter/study_14th/week7/img_2.png" alt="img_2.png"></p><p><img src="/images/flutter/study_14th/week7/img_3.png" alt="img_3.png"></p><p><img src="/images/flutter/study_14th/week7/img_4.png" alt="img_4.png"></p><p><img src="/images/flutter/study_14th/week7/img_5.png" alt="img_5.png"></p><p><img src="/images/flutter/study_14th/week7/img_6.png" alt="img_6.png"></p><h3 id="Android-UI"><a href="#Android-UI" class="headerlink" title="Android UI"></a>Android UI</h3><ul><li>iOS 보다는 비교적 구현이 쉬운 편</li></ul><p><img src="/images/flutter/study_14th/week7/img_7.png" alt="img_7.png"></p><ul><li>Activity 추가하고 호출하면 됨 (아래는 layout)</li></ul><p><img src="/images/flutter/study_14th/week7/img_8.png" alt="img_8.png"></p><ul><li>불러와지기 위한 Activity에 intent-filter 추가</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:name</span>=<span class="string">&quot;com.mr.ac_project_app.view.share.ShareActivity&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:launchMode</span>=<span class="string">&quot;singleTop&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:theme</span>=<span class="string">&quot;@style/TransparentCompat&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">tools:ignore</span>=<span class="string">&quot;LockedOrientationActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.SEND&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.PROCESS_TEXT&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:mimeType</span>=<span class="string">&quot;text/plain&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="오프라인-데이터-연동"><a href="#오프라인-데이터-연동" class="headerlink" title="오프라인 데이터 연동"></a>오프라인 데이터 연동</h2><ul><li><p>Flutter 안에서 Firebase로 계정연동을 하고 있는 서비스라 앱 외부에서 해당 계정과 연동시키는 부분이 난관이었음 → 결론적으로 앱 외부에서는 API 통신을 안하면서 현재 로그인 된 계정의 폴더를 보여줄 수 있어야 함</p></li><li><p>앱 외부와 앱 내부 사이에 데이터를 연동하기 위한 내부 DB를 구현하기로 결정</p></li><li><p>Flutter에서 플랫폼 상관없이 각 네이티브에서 호출하는 DB를 제어하고 싶었음 (네이티브 코드 생략)</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShareDataProvider</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> _platform = MethodChannel(<span class="string">&#x27;share_data_provider&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="built_in">List</span>&lt;<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;&gt;&gt; getNewLinks() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> newLinks = <span class="keyword">await</span> _platform.invokeMethod(<span class="string">&#x27;getNewLinks&#x27;</span>)</span><br><span class="line">          <span class="keyword">as</span> LinkedHashMap&lt;<span class="built_in">Object?</span>, <span class="built_in">Object?</span>&gt;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> links = &lt;<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;&gt;[];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">final</span> url <span class="keyword">in</span> newLinks.keys) &#123;</span><br><span class="line">        <span class="keyword">final</span> item =</span><br><span class="line">            jsonDecode(newLinks[url].toString()) <span class="keyword">as</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;;</span><br><span class="line">        Log.i(item);</span><br><span class="line">        <span class="keyword">final</span> decoded = decodeBase64Text(item[<span class="string">&#x27;title&#x27;</span>] <span class="keyword">as</span> <span class="built_in">String?</span> ?? <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">final</span> shortTitle = getShortTitle(decoded);</span><br><span class="line">        links.add(&#123;</span><br><span class="line">          <span class="string">&#x27;url&#x27;</span>: url,</span><br><span class="line">          <span class="string">&#x27;title&#x27;</span>: shortTitle,</span><br><span class="line">          <span class="string">&#x27;describe&#x27;</span>: item[<span class="string">&#x27;comment&#x27;</span>],</span><br><span class="line">          <span class="string">&#x27;image&#x27;</span>: item[<span class="string">&#x27;image_link&#x27;</span>],</span><br><span class="line">          <span class="string">&#x27;folder_name&#x27;</span>: item[<span class="string">&#x27;folder_name&#x27;</span>],</span><br><span class="line">          <span class="string">&#x27;created_at&#x27;</span>: item[<span class="string">&#x27;created_at&#x27;</span>]</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> links;</span><br><span class="line">    &#125; <span class="keyword">on</span> PlatformException <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      Log.e(e.message);</span><br><span class="line">      <span class="keyword">rethrow</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="built_in">List</span>&lt;<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;&gt;&gt; getNewFolders() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> newFolders =</span><br><span class="line">          <span class="keyword">await</span> _platform.invokeMethod(<span class="string">&#x27;getNewFolders&#x27;</span>) <span class="keyword">as</span> <span class="built_in">List</span>&lt;<span class="built_in">Object?</span>&gt;? ?? [];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> result = &lt;<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;&gt;[];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">final</span> temp <span class="keyword">in</span> newFolders) &#123;</span><br><span class="line">        <span class="keyword">final</span> json = jsonDecode(temp!.toString()) <span class="keyword">as</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;;</span><br><span class="line">        <span class="keyword">final</span> folder = &#123;</span><br><span class="line">          <span class="string">&#x27;name&#x27;</span>: json[<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">          <span class="string">&#x27;visible&#x27;</span>: json[<span class="string">&#x27;visible&#x27;</span>],</span><br><span class="line">          <span class="string">&#x27;created_at&#x27;</span>: json[<span class="string">&#x27;created_at&#x27;</span>]</span><br><span class="line">        &#125;;</span><br><span class="line">        result.add(folder);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">on</span> PlatformException <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      Log.e(e.message);</span><br><span class="line">      <span class="keyword">rethrow</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 생략...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>다른 계정으로 로그인하면 DB를 비우고 폴더 리스트를 가져오기 위한 정보를 서버에서 일괄적으로 불러와야함.</p></li><li><p>iOS 네이티브 개발이 처음이었어서 DB 연동하고 Share Extension 에서 본앱으로 데이터 넘기는 과정이 구글링해도 잘 나오지 않아서 어려웠음 → <strong>DB 파일 경로를 공유해서 동일한 DB 인스턴스를 참조하는 것이 핵심</strong></p></li><li><p>기타</p><p>올해 초에 출시한 사이드 프로젝트이지만, 천천히 개선 중인 앱.</p><p>아직 bloc 패턴에 익숙하지 않아 제대로 구현 못한게 많아서 계속 코드 수정도 병행하는 중</p><p>원래 있던 PM이자 기획자이신 분이 식당 운영하느라 너무 바빠서 기획자 한분 더 섭외함</p></li></ul><h1 id="flutter-tflite-사용해보기"><a href="#flutter-tflite-사용해보기" class="headerlink" title="flutter_tflite 사용해보기"></a>flutter_tflite 사용해보기</h1><h2 id="숫자-인식시키기-실패"><a href="#숫자-인식시키기-실패" class="headerlink" title="숫자 인식시키기 실패"></a>숫자 인식시키기 실패</h2><ul><li>이거보고 따라하다가 실패: <a href="https://developer.android.com/codelabs/digit-classifier-tflite#0">https://developer.android.com/codelabs/digit-classifier-tflite#0</a></li><li>아래 코드에서도 수많은 변화를 주면서 테스트해봤지만 interpreter가 결과를 안줌</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:ffi&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:typed_data&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/rendering.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:tflite_flutter_examples/drawing_painter.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:ui&#x27;</span> <span class="keyword">as</span> ui;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:tflite_flutter/tflite_flutter.dart&#x27;</span> <span class="keyword">as</span> tfl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> MaterialApp(</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      home: MainScreen(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainScreen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MainScreen(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;MainScreen&gt; createState() =&gt; _MainScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MainScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MainScreen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _globalKey = GlobalKey();</span><br><span class="line">  <span class="built_in">List</span>&lt;Offset?&gt; _points = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> outputs = [Float64List(<span class="number">10</span>)];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> resultValue = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _onPanUpdate(DragUpdateDetails details) &#123;</span><br><span class="line">    RenderBox? renderBox =</span><br><span class="line">        _globalKey.currentContext?.findRenderObject() <span class="keyword">as</span> RenderBox?;</span><br><span class="line">    <span class="keyword">if</span> (renderBox == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    Offset localPosition = renderBox.globalToLocal(details.globalPosition);</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _points = <span class="built_in">List</span>.from(_points)..add(localPosition);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _extractImage() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> boundary =</span><br><span class="line">        _globalKey.currentContext?.findRenderObject() <span class="keyword">as</span> RenderRepaintBoundary?;</span><br><span class="line">    <span class="keyword">if</span> (boundary == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    ui.Image image = <span class="keyword">await</span> boundary.toImage();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> shape = interpreter.getInputTensor(<span class="number">0</span>).shape;</span><br><span class="line">    <span class="keyword">final</span> width = shape[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">final</span> height = shape[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// image encode</span></span><br><span class="line">    <span class="keyword">final</span> pngBytes = <span class="keyword">await</span> image.toByteData(format: ui.ImageByteFormat.png);</span><br><span class="line">    <span class="keyword">final</span> imageBytes = pngBytes?.buffer.asUint8List();</span><br><span class="line">    <span class="keyword">if</span> (imageBytes == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// resize image by width and height</span></span><br><span class="line">    <span class="keyword">final</span> resizedImage = <span class="keyword">await</span> resizeImage(imageBytes, width, height);</span><br><span class="line">    <span class="keyword">if</span> (resizedImage == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    classify(resizedImage);</span><br><span class="line">  &#125;</span><br><span class="line">  Future&lt;ByteBuffer?&gt; resizeImage(Uint8List imageData, <span class="built_in">int</span> width, <span class="built_in">int</span> height) <span class="keyword">async</span> &#123;</span><br><span class="line">    ui.Image image = <span class="keyword">await</span> decodeImageFromList(imageData);</span><br><span class="line">    ui.Image resizedImage = (<span class="keyword">await</span> (<span class="keyword">await</span> ui.instantiateImageCodec(</span><br><span class="line">      Uint8List.fromList(imageData),</span><br><span class="line">      targetWidth: width,</span><br><span class="line">      targetHeight: height,</span><br><span class="line">    )).getNextFrame()).image;</span><br><span class="line">    <span class="keyword">final</span> resizedByteData = <span class="keyword">await</span> resizedImage.toByteData(format: ui.ImageByteFormat.png);</span><br><span class="line">    <span class="keyword">return</span> resizedByteData?.buffer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> classify(ByteBuffer pngBytes) &#123;</span><br><span class="line">    interpreter.runInference(pngBytes.asUint8List());</span><br><span class="line">    <span class="keyword">final</span> output = interpreter.getOutputTensors();</span><br><span class="line">    <span class="keyword">final</span> result = outputs[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">final</span> maxValue = result.reduce((curr, next) =&gt; curr &gt; next ? curr : next);</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      resultValue = <span class="string">&#x27;<span class="subst">$maxValue</span>&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">late</span> tfl.Interpreter interpreter;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    WidgetsBinding.instance.addPostFrameCallback((_) <span class="keyword">async</span> &#123;</span><br><span class="line">      interpreter = <span class="keyword">await</span> tfl.Interpreter.fromAsset(<span class="string">&#x27;assets/mnist.tflite&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: [</span><br><span class="line">            RepaintBoundary(</span><br><span class="line">              key: _globalKey,</span><br><span class="line">              child: GestureDetector(</span><br><span class="line">                onPanUpdate: _onPanUpdate,</span><br><span class="line">                onPanEnd: (_) =&gt; _points.add(<span class="keyword">null</span>),</span><br><span class="line">                child: Container(</span><br><span class="line">                  width: <span class="number">300</span>,</span><br><span class="line">                  height: <span class="number">300</span>,</span><br><span class="line">                  decoration: BoxDecoration(</span><br><span class="line">                    border: Border.all(color: Colors.black),</span><br><span class="line">                  ),</span><br><span class="line">                  child: CustomPaint(</span><br><span class="line">                    painter: MyCustomPainter()..points = _points,</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">const</span> SizedBox(height: <span class="number">20</span>),</span><br><span class="line">            Text(resultValue),</span><br><span class="line">            <span class="keyword">const</span> SizedBox(height: <span class="number">20</span>),</span><br><span class="line">            ElevatedButton(</span><br><span class="line">              onPressed: _extractImage,</span><br><span class="line">              child: <span class="keyword">const</span> Text(<span class="string">&#x27;Extract Image&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="flutter-tflite-패키지에서-제공해준-예제들"><a href="#flutter-tflite-패키지에서-제공해준-예제들" class="headerlink" title="flutter_tflite 패키지에서 제공해준 예제들"></a>flutter_tflite 패키지에서 제공해준 예제들</h2><p><a href="https://pub.dev/packages/tflite_flutter">https://pub.dev/packages/tflite_flutter</a></p><ul><li>재밌게도 tensorflow 팀에서 처음 만든게 아니라 Amish Garg 라는 사람이 만든 패키지에 기반하고 있는게 공식 패키지가 된듯하다.</li></ul><p><img src="/images/flutter/study_14th/week7/img_9.png" alt="img_9.png"></p><ul><li>이사람 github에 가면 다양한 예제 링크로 연결된다.</li></ul><p><a href="https://github.com/am15h/tflite_flutter_plugin#examples">https://github.com/am15h/tflite_flutter_plugin#examples</a></p>]]></content>
      
      
      <categories>
          
          <category> flutter-study-14th </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 중급반 스터디 14기 6주차</title>
      <link href="/2023/07/31/flutter/study_14th/week6/"/>
      <url>/2023/07/31/flutter/study_14th/week6/</url>
      
        <content type="html"><![CDATA[<h1 id="OPGC-오픈소스-기여하기-성공"><a href="#OPGC-오픈소스-기여하기-성공" class="headerlink" title="OPGC 오픈소스 기여하기 성공"></a>OPGC 오픈소스 기여하기 성공</h1><ul><li>PR: <a href="https://github.com/DirtyBoyz/opgc_backend/pull/70">https://github.com/DirtyBoyz/opgc_backend/pull/70</a></li><li>어느날부터인가 일일 커밋 표시해주는 뱃지가 맛이 갔길래 코드를 찾아보니 github 잔디 그리는 html 코드에 변경이 생긴걸로 파악됨.</li><li>python으로 구현되어 있는 오픈소스를 발견해서 PR 날려서 약간의 수정 후 반영됨</li></ul><p><img src="/../../../images/flutter/study_14th/week6/img.png" alt="사소한 흔적을 남기는데에 성공!"></p><p>사소한 흔적을 남기는데에 성공!</p><h1 id="달력-좌우-스크롤-성공"><a href="#달력-좌우-스크롤-성공" class="headerlink" title="달력 좌우 스크롤 성공"></a>달력 좌우 스크롤 성공</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">CalendarGrid</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    modifier: <span class="type">Modifier</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    days: <span class="type">MutableList</span>&lt;<span class="type">CalendarDay</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    spread: <span class="type">MutableState</span>&lt;<span class="type">Boolean</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    selected: <span class="type">MutableState</span>&lt;<span class="type">CalendarDay</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    year: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    month: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    calendarMonth: <span class="type">MutableState</span>&lt;<span class="type">Int</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    onItemSelected: (<span class="type">CalendarDay</span>) -&gt; <span class="type">Unit</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    onPageChanged: (<span class="type">PageChangedState</span>) -&gt; <span class="type">Unit</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> initialPage = getMonthsPassedSince2023(year, month)</span><br><span class="line">    <span class="keyword">val</span> pageState = rememberPagerState(pageCount = &#123; <span class="number">924</span> &#125;, initialPage = initialPage)</span><br><span class="line">    <span class="keyword">val</span> currentPage = remember &#123; mutableIntStateOf(initialPage) &#125;</span><br><span class="line"></span><br><span class="line">    LaunchedEffect(pageState) &#123;</span><br><span class="line">        snapshotFlow &#123; pageState.currentPage &#125;.collect &#123; page -&gt;</span><br><span class="line">            <span class="keyword">if</span> (spread.value) &#123;</span><br><span class="line">                <span class="keyword">if</span> (currentPage.intValue &lt; page) &#123;</span><br><span class="line">                    onPageChanged(PageChangedState.NEXT)</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentPage.intValue &gt; page) &#123;</span><br><span class="line">                    onPageChanged(PageChangedState.PREV)</span><br><span class="line">                &#125;</span><br><span class="line">                Log.i(<span class="string">&quot;ComposeCalendar&quot;</span>, <span class="string">&quot;page: <span class="subst">$&#123;page&#125;</span>, currentPage: <span class="subst">$&#123;pageState.currentPage&#125;</span>&quot;</span>)</span><br><span class="line">                currentPage.intValue = page</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// year와 month가 변경될 때마다 실행되는 LaunchedEffect</span></span><br><span class="line">    LaunchedEffect(year, month) &#123;</span><br><span class="line">        <span class="keyword">val</span> newInitialPage = getMonthsPassedSince2023(year, month)</span><br><span class="line">        currentPage.intValue = newInitialPage</span><br><span class="line">        pageState.scrollToPage(newInitialPage)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HorizontalPager(state = pageState, pageSpacing = <span class="number">56.</span>dp, verticalAlignment = Alignment.Top, userScrollEnabled = spread.value) &#123; page -&gt;</span><br><span class="line">        LazyVerticalGrid(</span><br><span class="line">            columns = GridCells.Fixed(<span class="number">7</span>),</span><br><span class="line">            contentPadding = PaddingValues(<span class="number">0.</span>dp),</span><br><span class="line">            modifier = Modifier.heightIn(min = <span class="number">68.</span>dp, max = (<span class="number">68</span> * <span class="number">7</span>).dp)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">val</span> currentMonth = getMonthFromPage(page)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (days.isNotEmpty()) &#123;</span><br><span class="line">                Log.i(<span class="string">&quot;ComposeCalendar&quot;</span>, <span class="string">&quot;page: <span class="subst">$&#123;page&#125;</span>, currentPage: <span class="subst">$&#123;currentPage.intValue&#125;</span>, month: <span class="variable">$month</span>, currentMonth: <span class="variable">$currentMonth</span>, days[15].month: <span class="subst">$&#123;days[<span class="number">15</span>].month&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">val</span> dayList = <span class="keyword">if</span> (page &lt; currentPage.intValue || currentMonth &lt; days[<span class="number">15</span>].month) getWeekDays(days.first().getPreviousCalendar())</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (page == currentPage.intValue &amp;&amp; (currentMonth == month) &amp;&amp; days[<span class="number">15</span>].month == month) days</span><br><span class="line">                <span class="keyword">else</span> getWeekDays(days.last().getNextCalendar())</span><br><span class="line"></span><br><span class="line">                items(dayList) &#123; date -&gt;</span><br><span class="line">                    AnimatedVisibility(visible = spread.value) &#123;</span><br><span class="line">                        DayOfMonthIcon(date, selected, modifier = modifier) &#123;</span><br><span class="line">                            selected.value = it</span><br><span class="line">                            calendarMonth.value = month</span><br><span class="line">                            onItemSelected(it)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    AnimatedVisibility(visible = !spread.value) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (date.isSameWeek(selected.value)) &#123;</span><br><span class="line">                            DayOfMonthIcon(date, selected, modifier = modifier) &#123;</span><br><span class="line">                                selected.value = it</span><br><span class="line">                                calendarMonth.value = month</span><br><span class="line">                                onItemSelected(it)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="초등학생-과외-시키기-2회차"><a href="#초등학생-과외-시키기-2회차" class="headerlink" title="초등학생 과외 시키기 2회차"></a>초등학생 과외 시키기 2회차</h1><ul><li><p><a href="https://www.notion.so/d9a64b6738fb4ffb9393e16964673a81?pvs=21">첫번째 시간</a></p></li><li><p><a href="https://www.notion.so/dc54d195286e4b488351183d1ec0d8b6?pvs=21">두번째 시간</a></p></li><li><p>나도 만들어볼까</p><p><img src="/../../../images/flutter/study_14th/week6/img_1.png" alt="img_1.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter-study-14th </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 중급반 스터디 14기 5주차</title>
      <link href="/2023/07/24/flutter/study_14th/week5/"/>
      <url>/2023/07/24/flutter/study_14th/week5/</url>
      
        <content type="html"><![CDATA[<h1 id="닷지-게임-길어지는-선-Enemy-구현하다가-실패"><a href="#닷지-게임-길어지는-선-Enemy-구현하다가-실패" class="headerlink" title="닷지 게임 길어지는 선 Enemy 구현하다가 실패"></a>닷지 게임 길어지는 선 Enemy 구현하다가 실패</h1><p><img src="/images/flutter/study_14th/week5/img.png" alt="img.png"></p><ul><li>선이 닿으면 충돌을 감지해야하는데 Hitbox 설정을 제대로 못함</li><li>선이 좌측에서 우측 하단으로 움직일 때만 그려짐</li></ul><p>→  선 전체를 Hitbox로 정하기 보다는 이동하는 구체에만 히트박스를 달고, 뒤에 꼬리가 있는 느낌으로 수정해야 할 것 같음</p><h1 id="길이가-자기-맘대로인-PageView의-Indicator-만들기"><a href="#길이가-자기-맘대로인-PageView의-Indicator-만들기" class="headerlink" title="길이가 자기 맘대로인 PageView의 Indicator 만들기"></a>길이가 자기 맘대로인 PageView의 Indicator 만들기</h1><ul><li>사실 길이가 디바이스 화면보다 커지면 PageView를 사용할 수가 없다. ㅠㅠ</li><li>CustomScrollView와 SliverList로 각각 다른 페이지의 길이를 기억시키고 Indicator가 눌렸을 때 그 길이 만큼 이동하게 해준다.</li></ul><p><img src="/images/flutter/study_14th/week5/img_1.png" alt="img_1.png"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> widthsNotifier = ValueNotifier([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">WidgetsBinding.instance.addPostFrameCallback((timeStamp) <span class="keyword">async</span> &#123;</span><br><span class="line">      scrollController.addListener(() &#123;</span><br><span class="line">        <span class="keyword">final</span> currentWidth = scrollController.position.pixels;</span><br><span class="line">        <span class="keyword">var</span> totalWidth = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; widthsNotifier.value.length; i++) &#123;</span><br><span class="line">          totalWidth += widthsNotifier.value[i];</span><br><span class="line">          <span class="keyword">if</span> (currentWidth &lt; totalWidth) &#123;</span><br><span class="line">            pageNotifier.value = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="comment">// 끝까지 스크롤해야 모든 페이지의 가로 길이를 얻을 수 있음</span></span><br><span class="line"><span class="keyword">await</span> scrollController.animateTo(</span><br><span class="line">  scrollController.position.maxScrollExtent,</span><br><span class="line">  duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">400</span>),</span><br><span class="line">  curve: Curves.easeInOut,</span><br><span class="line">);</span><br><span class="line"><span class="keyword">await</span> scrollController.animateTo(</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">400</span>),</span><br><span class="line">  curve: Curves.easeInOut,</span><br><span class="line">);</span><br><span class="line"><span class="comment">// ... 화면 왔다갔다 하는 동작 로딩으로 감추기</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pages</span></span><br><span class="line">Expanded BodyPages() &#123;</span><br><span class="line">  <span class="keyword">return</span> Expanded(</span><br><span class="line">    child: CustomScrollView(</span><br><span class="line">      controller: scrollController,</span><br><span class="line">      scrollDirection: Axis.horizontal,</span><br><span class="line">      slivers: &lt;Widget&gt;[</span><br><span class="line">        SliverList(</span><br><span class="line">          delegate: SliverChildBuilderDelegate(</span><br><span class="line">            (context, index) &#123;</span><br><span class="line">              <span class="keyword">switch</span> (PageIndex.from(index)) &#123;</span><br><span class="line">                <span class="keyword">case</span> PageIndex.first:</span><br><span class="line">                  <span class="keyword">return</span> FirstPage(</span><br><span class="line">                    widthCallback: (width) &#123;</span><br><span class="line">                      widthsNotifier.value[<span class="number">0</span>] = width.toInt();</span><br><span class="line">                    &#125;,</span><br><span class="line">                  );</span><br><span class="line">                <span class="keyword">case</span> PageIndex.second:</span><br><span class="line">                  <span class="keyword">return</span> SecondPage(</span><br><span class="line">                    widthCallback: (width) &#123;</span><br><span class="line">                      widthsNotifier.value[<span class="number">1</span>] = width.toInt();</span><br><span class="line">                    &#125;,</span><br><span class="line">                  );</span><br><span class="line">                <span class="keyword">case</span> PageIndex.third:</span><br><span class="line">                  <span class="keyword">return</span> ThirdPage(</span><br><span class="line">                    widthCallback: (width) &#123;</span><br><span class="line">                      widthsNotifier.value[<span class="number">2</span>] = width.toInt();</span><br><span class="line">                    &#125;,</span><br><span class="line">                  );</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            childCount: <span class="number">3</span>,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>→ widthsNotifier</p><h3 id="First-Page-예시-GlobalKey를-포함한-Container가-그려지고-나서-해당-위젯의-가로-길이를-반환"><a href="#First-Page-예시-GlobalKey를-포함한-Container가-그려지고-나서-해당-위젯의-가로-길이를-반환" class="headerlink" title="First Page 예시: GlobalKey를 포함한 Container가 그려지고 나서 해당 위젯의 가로 길이를 반환"></a>First Page 예시: GlobalKey를 포함한 Container가 그려지고 나서 해당 위젯의 가로 길이를 반환</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> FirstPage(&#123;<span class="keyword">required</span> <span class="keyword">this</span>.widthCallback, <span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">void</span> <span class="built_in">Function</span>(<span class="built_in">double</span>) widthCallback;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;FirstPage&gt; createState() =&gt; _FirstPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_FirstPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">FirstPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> key = GlobalKey();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    sendWidgetWidth(key, widget.widthCallback);</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      key: key,</span><br><span class="line">      width: <span class="number">2000.</span>w,</span><br><span class="line">      color: Colors.lightGreen,</span><br><span class="line">      child: Stack(</span><br><span class="line">        children: [</span><br><span class="line">          Align(</span><br><span class="line">            alignment: Alignment.centerLeft,</span><br><span class="line">            child: Text(<span class="string">&#x27;left&#x27;</span>, style: TextStyle(fontSize: <span class="number">30.</span>sp),),</span><br><span class="line">          ),</span><br><span class="line">          Center(</span><br><span class="line">            child: Text(<span class="string">&#x27;center&#x27;</span>, style: TextStyle(fontSize: <span class="number">30.</span>sp),),</span><br><span class="line">          ),</span><br><span class="line">          Align(</span><br><span class="line">            alignment: Alignment.centerRight,</span><br><span class="line">            child: Text(<span class="string">&#x27;right&#x27;</span>, style: TextStyle(fontSize: <span class="number">30.</span>sp),),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 가로 길이 콜백 전달</span></span><br><span class="line"><span class="keyword">void</span> sendWidgetWidth(GlobalKey&lt;State&lt;StatefulWidget&gt;&gt; key, <span class="keyword">void</span> <span class="built_in">Function</span>(<span class="built_in">double</span> width) widthCallback) &#123;</span><br><span class="line">  WidgetsBinding.instance.addPostFrameCallback((timeStamp) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key.currentContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">final</span> r = key.currentContext!.findRenderObject() <span class="keyword">as</span> RenderBox?;</span><br><span class="line">      <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        widthCallback(r.size.width);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Indicator"><a href="#Indicator" class="headerlink" title="Indicator"></a>Indicator</h3><ul><li>선택한 index 이전까지의 가로길이를 합친만큼 이동하면 된다.</li><li>마지막 index의 1&#x2F;4 가로길이 만큼 더 이동해주면 중앙으로 갈 수 있다. (화면 중앙으로 와야하니깐)</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">SizedBox TopTabBar() &#123;</span><br><span class="line">  <span class="keyword">return</span> SizedBox(</span><br><span class="line">    height: <span class="number">100</span>,</span><br><span class="line">    child: ListView.builder(</span><br><span class="line">      shrinkWrap: <span class="keyword">true</span>,</span><br><span class="line">      scrollDirection: Axis.horizontal,</span><br><span class="line">      itemCount: <span class="number">3</span>,</span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">        <span class="keyword">return</span> ValueListenableBuilder(</span><br><span class="line">          valueListenable: pageNotifier,</span><br><span class="line">          builder: (context, page, child) &#123;</span><br><span class="line">            <span class="keyword">final</span> isSelected = page == index;</span><br><span class="line">            <span class="keyword">return</span> GestureDetector(</span><br><span class="line">              onTap: () &#123;</span><br><span class="line">                <span class="keyword">var</span> selectedPagePosition = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                  selectedPagePosition += widthsNotifier.value[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// move to each center</span></span><br><span class="line">                <span class="comment">// selectedPagePosition +=</span></span><br><span class="line">                <span class="comment">//     widthsNotifier.value[index] ~/ 4;</span></span><br><span class="line">                scrollController.animateTo(</span><br><span class="line">                  selectedPagePosition.toDouble(),</span><br><span class="line">                  duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">500</span>),</span><br><span class="line">                  curve: Curves.easeInOut,</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">              child: <span class="keyword">switch</span> (PageIndex.from(index)) &#123;</span><br><span class="line">                PageIndex.first =&gt; FirstTab(isSelected),</span><br><span class="line">                PageIndex.second =&gt; SecondTab(isSelected),</span><br><span class="line">                PageIndex.third =&gt; ThirdTab(isSelected),</span><br><span class="line">              &#125;,</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="커스텀-달력-좌우-넘기기"><a href="#커스텀-달력-좌우-넘기기" class="headerlink" title="커스텀 달력 좌우 넘기기"></a>커스텀 달력 좌우 넘기기</h1><p><img src="/images/flutter/study_14th/week5/img_2.png" alt="img_2.png"></p><p>→ 아직 다음달&#x2F;이전달로 이동할 때, 달력에서 현재 달의 데이터를 중복해서 그리고 있음 → 구조 개선 필요함</p><p><img src="/images/flutter/study_14th/week5/img_3.png" alt="img_3.png"></p><h1 id="Shorebird-Android-확인해보기"><a href="#Shorebird-Android-확인해보기" class="headerlink" title="Shorebird Android 확인해보기"></a>Shorebird Android 확인해보기</h1><ul><li>docs: <a href="https://docs.shorebird.dev/">https://docs.shorebird.dev/</a></li><li>flutter flavor: <a href="https://velog.io/@udong85/Flutter-flavor-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EA%B0%9C%EB%B0%9C-%EC%9A%B4%EC%98%81-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95">https:&#x2F;&#x2F;velog.io&#x2F;@udong85&#x2F;Flutter-flavor-를-이용한-개발-운영-환경-설정</a></li></ul><p><img src="/images/flutter/study_14th/week5/img_4.png" alt="img_4.png"></p><p>→ 1.0.2+2 버전에서 patch만 진행해보기</p>]]></content>
      
      
      <categories>
          
          <category> flutter-study-14th </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 중급반 스터디 14기 4주차</title>
      <link href="/2023/07/17/flutter/study_14th/week4/"/>
      <url>/2023/07/17/flutter/study_14th/week4/</url>
      
        <content type="html"><![CDATA[<h1 id="Test-Coverage-100-만들기"><a href="#Test-Coverage-100-만들기" class="headerlink" title="Test Coverage 100% 만들기"></a>Test Coverage 100% 만들기</h1><p><a href="https://pub.dev/packages/dynamic_image_crop">dynamic_image_crop | Flutter Package</a></p><p><a href="https://app.codecov.io/gh/boring-km/dynamic_image_crop">Codecov</a></p><h2 id="테스트-폴더"><a href="#테스트-폴더" class="headerlink" title="테스트 폴더"></a>테스트 폴더</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">test/</span><br><span class="line">├── assets/</span><br><span class="line">│   ├── sample_image.png</span><br><span class="line">│   └── sample_image_vertical.png</span><br><span class="line">├── controller/</span><br><span class="line">│   ├── crop_controller_test.dart</span><br><span class="line">│   └── image_change_notifier_test.dart</span><br><span class="line">├── crop_area_moving_test.dart</span><br><span class="line">├── drawing_view_crop_test.dart</span><br><span class="line">├── figure_shape_view_crop_test.dart</span><br><span class="line">├── none_crop_type_test.dart</span><br><span class="line">├── resize_crop_area_test.dart</span><br><span class="line">└── test_utils.dart</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>가로가 긴 PNG 이미지 하나와 세로가 긴 PNG 이미지로 테스트<ul><li>다른 이미지 확장자에 대해서는 아직 테스트 못함</li></ul></li><li>자세한건 코드로…<ul><li><a href="https://github.com/boring-km/dynamic_image_crop/tree/master/test">https://github.com/boring-km/dynamic_image_crop/tree/master/test</a></li></ul></li></ul><h1 id="CI에-적용하기"><a href="#CI에-적용하기" class="headerlink" title="CI에 적용하기"></a>CI에 적용하기</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">check</span> <span class="string">test</span> <span class="string">coverage</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">publish</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">example_page</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">coverage:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">macos-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">subosito/flutter-action@v2.10.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">flutter-version:</span> <span class="string">&#x27;3.10.5&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">packages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">flutter</span> <span class="string">pub</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span> <span class="string">flutter</span> <span class="string">test</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">flutter</span> <span class="string">test</span> <span class="string">--coverage</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">coverage</span> <span class="string">reports</span> <span class="string">to</span> <span class="string">Codecov</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">codecov/codecov-action@v3</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">CODECOV_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CODECOV_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>패키지 배포하거나 example 페이지 pull request 할 때 동작</li><li>예외적인 상황 발견 (PC에서는 통과하는 테스트가 github 서버에서는 이미지가 동일한 바이트 크기로 crop 되지 않고 오차 있음)<ul><li><a href="https://github.com/boring-km/dynamic_image_crop/actions/runs/5568985397/jobs/10171990974">https://github.com/boring-km/dynamic_image_crop/actions/runs/5568985397/jobs/10171990974</a></li></ul></li></ul><h2 id="publish-workflow"><a href="#publish-workflow" class="headerlink" title="publish workflow"></a>publish workflow</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Publish</span> <span class="string">to</span> <span class="string">pub.dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">publish</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">publish:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">macos-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">subosito/flutter-action@v2.10.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">flutter-version:</span> <span class="string">&#x27;3.10.5&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">packages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">flutter</span> <span class="string">pub</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Pub</span> <span class="string">Credentials</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">INPUT_CREDENTIAL:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CREDENTIAL_JSON</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sh ./pub_login.sh</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">Publish</span> <span class="string">Warnings</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">dart</span> <span class="string">pub</span> <span class="string">publish</span> <span class="string">--dry-run</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Publish</span> <span class="string">Package</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">dart</span> <span class="string">pub</span> <span class="string">publish</span> <span class="string">-f</span></span><br></pre></td></tr></table></figure><ul><li>dry-run은 필수는 아님</li></ul><h3 id="과외-요청-받음"><a href="#과외-요청-받음" class="headerlink" title="과외 요청 받음"></a>과외 요청 받음</h3><ul><li>직장 동료 아들이 유니티로 게임 만드는 걸 재밌게 하고 있다는데, 좀 진지하게 공부 시키고 싶어서 요청 받음</li><li>토요일에 잠깐 화상으로 만났는데 너무 어려보여서 당황 (초4)</li></ul><h3 id="노션-캡쳐"><a href="#노션-캡쳐" class="headerlink" title="노션 캡쳐"></a>노션 캡쳐</h3><p><img src="/images/flutter/study_14th/week4/img.png" alt="Untitled"></p>]]></content>
      
      
      <categories>
          
          <category> flutter-study-14th </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 중급반 스터디 14기 3주차</title>
      <link href="/2023/07/10/flutter/study_14th/week3/"/>
      <url>/2023/07/10/flutter/study_14th/week3/</url>
      
        <content type="html"><![CDATA[<h1 id="14기-3주차-강민"><a href="#14기-3주차-강민" class="headerlink" title="14기 3주차 강민"></a>14기 3주차 강민</h1><h2 id="이번주-한-업무-외-개발들"><a href="#이번주-한-업무-외-개발들" class="headerlink" title="이번주 한 업무 외 개발들"></a>이번주 한 업무 외 개발들</h2><ul><li>사이드 프로젝트 UI 부분만 개발</li><li><a href="https://pub.dev/packages/dynamic_image_crop">dynamic_image_crop</a> 패키지 widget test 작성하다가 실패함</li></ul><h2 id="위젯-테스트-실패…-gt-겨우-성공"><a href="#위젯-테스트-실패…-gt-겨우-성공" class="headerlink" title="위젯 테스트 실패… -&gt; 겨우 성공"></a>위젯 테스트 실패… -&gt; 겨우 성공</h2><p>위젯이 처음에 한번 빌드되고 나서 GlobalKey가 할당되기 전에</p><p>currentState 값을 사용하려고 해서 에러가 났다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">Crop the image as you can see on the screen.</span></span></span><br><span class="line"><span class="keyword">void</span> cropImage() &#123;</span><br><span class="line">  <span class="keyword">final</span> cropType = cropTypeNotifier.cropType;</span><br><span class="line">  <span class="keyword">if</span> (cropType == CropType.none) &#123;</span><br><span class="line">    _callback(</span><br><span class="line">      imageNotifier.image,</span><br><span class="line">      painterSize.width.floor(),</span><br><span class="line">      painterSize.height.floor(),</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> area = cropType == CropType.drawing</span><br><span class="line">        ? _drawingKey.currentState!.getDrawingArea()</span><br><span class="line">        : _painterKey.currentState!.getPainterArea(); <span class="comment">// 에러가 발생하는 구간</span></span><br><span class="line">    _callbackToParentWidget(area, cropType);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════</span><br><span class="line">The following _TypeError was thrown running a <span class="built_in">test</span>:</span><br><span class="line">Null check operator used on a null value</span><br><span class="line"></span><br><span class="line">When the exception was thrown, this was the stack:</span><br><span class="line"><span class="comment">#0      CropController.cropImage (package:dynamic_image_crop/src/controller/crop_controller.dart:60:37)</span></span><br><span class="line"><span class="comment">#1      main.&lt;anonymous closure&gt; (file:///Users/kangmin/dev/dynamic_image_crop/test/dynamic_crop_image_test.dart:47:20)</span></span><br><span class="line">&lt;asynchronous suspension&gt;</span><br><span class="line">&lt;asynchronous suspension&gt;</span><br><span class="line">(elided one frame from package:stack_trace)</span><br></pre></td></tr></table></figure><h3 id="원인"><a href="#원인" class="headerlink" title="원인"></a>원인</h3><ul><li>이 위젯은 시작할 때 initState() 함수 안에서 비동기로 imageSize 값을 초기화한다.<br>(현재 화면 크기에 맞춰 이미지 사이즈를 조절해야 한다.)</li><li>imageSize 값이 초기화 되기 전까지 Container() 위젯이었다가, imageSize 값이 초기화되면 setState(() {}) 을 실행해 다시 렌더링한다.</li><li>그 때 _painterKey를 key로 사용하는 위젯이 빌드된다.</li><li>근데 테스트 코드에서 이 _painterKey가 Widget의 key로 할당되기 전에 currentState를 호출해서 null 에러가 발생했다.</li></ul><h3 id="시도한-방법"><a href="#시도한-방법" class="headerlink" title="시도한 방법"></a>시도한 방법</h3><ul><li><p>테스트 코드에서 빌드가 될 때까지 좀 기다려주기 → 실패</p><ul><li><code>await Future.delayed(const Duration(seconds: 1));</code> 이런 방식으로 await 걸면 테스트 함수 안에서 다음 라인의 코드가 동작하지 않음</li><li><code>await tester.pumpWidget()</code> <code>await tester.pumpAndSettle()</code> 이런 테스트 함수 내에 Duration을 설정할 수 있지만 기다려주지 않음</li></ul></li><li><p><del>HELP!!!!!!!!</del></p></li><li><p>테스트 성공 -&gt; tester.runAsync() 사용해서 기다려주면 된다.</p></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_test/flutter_test.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; waitAndPumpAndSettle(WidgetTester tester, <span class="built_in">Duration</span> duration) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> tester.runAsync(() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> Future&lt;<span class="keyword">void</span>&gt;.delayed(duration);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> tester.pumpAndSettle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>테스트 코드 전체</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:io&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:typed_data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dynamic_image_crop/src/controller/crop_controller.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dynamic_image_crop/src/crop/crop_type.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dynamic_image_crop/src/dynamic_image_crop.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_test/flutter_test.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;test_utils.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  TestWidgetsFlutterBinding.ensureInitialized();</span><br><span class="line"></span><br><span class="line">  group(<span class="string">&#x27;FigureShapeView cropImage success test&#x27;</span>, () &#123;</span><br><span class="line">    <span class="keyword">late</span> File file;</span><br><span class="line">    <span class="keyword">late</span> Uint8List image;</span><br><span class="line">    <span class="keyword">late</span> CropController cropController;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> expectedCroppedWidth = <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">const</span> expectedCroppedHeight = <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">const</span> defaultPhysicalSize = Size(<span class="number">1920</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    setUp(() &#123;</span><br><span class="line">      file = File(<span class="string">&#x27;test/assets/sample_image.png&#x27;</span>); <span class="comment">// 1920 x 880</span></span><br><span class="line">      image = file.readAsBytesSync();</span><br><span class="line">      cropController = CropController();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    testWidgets(<span class="string">&#x27;circle CropType success test&#x27;</span>, (tester) <span class="keyword">async</span> &#123;</span><br><span class="line">      tester.view.physicalSize = defaultPhysicalSize;</span><br><span class="line">      cropController.cropTypeNotifier.value = CropType.circle;</span><br><span class="line">      <span class="keyword">const</span> expectedImageBytesLength = <span class="number">81129</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> testWidget = MaterialApp(</span><br><span class="line">        home: DynamicImageCrop(</span><br><span class="line">          image: image,</span><br><span class="line">          controller: cropController,</span><br><span class="line">          onResult: (image, width, height) &#123;</span><br><span class="line">            debugPrint(</span><br><span class="line">                <span class="string">&#x27;image length: <span class="subst">$&#123;image.length&#125;</span>, width: <span class="subst">$width</span>, height: <span class="subst">$height</span>&#x27;</span>);</span><br><span class="line">            expect(expectedImageBytesLength, image.length);</span><br><span class="line">            expect(expectedCroppedWidth, width);</span><br><span class="line">            expect(expectedCroppedHeight, height);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">await</span> tester.pumpWidget(testWidget);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> waitAndPumpAndSettle(tester, <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line">      <span class="keyword">await</span> waitAndPumpAndSettle(tester, <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">      cropController.cropImage();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> waitAndPumpAndSettle(tester, <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line">      <span class="keyword">await</span> waitAndPumpAndSettle(tester, <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    testWidgets(<span class="string">&#x27;rectangle CropType success test&#x27;</span>, (tester) <span class="keyword">async</span> &#123;</span><br><span class="line">      tester.view.physicalSize = defaultPhysicalSize;</span><br><span class="line">      cropController.cropTypeNotifier.value = CropType.rectangle;</span><br><span class="line">      <span class="keyword">const</span> expectedImageBytesLength = <span class="number">98868</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> testWidget = MaterialApp(</span><br><span class="line">        home: DynamicImageCrop(</span><br><span class="line">          image: image,</span><br><span class="line">          controller: cropController,</span><br><span class="line">          onResult: (image, width, height) &#123;</span><br><span class="line">            debugPrint(</span><br><span class="line">                <span class="string">&#x27;image length: <span class="subst">$&#123;image.length&#125;</span>, width: <span class="subst">$width</span>, height: <span class="subst">$height</span>&#x27;</span>);</span><br><span class="line">            expect(expectedImageBytesLength, image.length);</span><br><span class="line">            expect(expectedCroppedWidth, width);</span><br><span class="line">            expect(expectedCroppedHeight, height);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">await</span> tester.pumpWidget(testWidget);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> waitAndPumpAndSettle(tester, <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line">      <span class="keyword">await</span> waitAndPumpAndSettle(tester, <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">      cropController.cropImage();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> waitAndPumpAndSettle(tester, <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line">      <span class="keyword">await</span> waitAndPumpAndSettle(tester, <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    testWidgets(<span class="string">&#x27;triangle CropType success test&#x27;</span>, (tester) <span class="keyword">async</span> &#123;</span><br><span class="line">      tester.view.physicalSize = defaultPhysicalSize;</span><br><span class="line">      cropController.cropTypeNotifier.value = CropType.triangle;</span><br><span class="line">      <span class="keyword">const</span> expectedImageBytesLength = <span class="number">56144</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> testWidget = MaterialApp(</span><br><span class="line">        home: DynamicImageCrop(</span><br><span class="line">          image: image,</span><br><span class="line">          controller: cropController,</span><br><span class="line">          onResult: (image, width, height) &#123;</span><br><span class="line">            debugPrint(</span><br><span class="line">                <span class="string">&#x27;image length: <span class="subst">$&#123;image.length&#125;</span>, width: <span class="subst">$width</span>, height: <span class="subst">$height</span>&#x27;</span>);</span><br><span class="line">            expect(expectedImageBytesLength, image.length);</span><br><span class="line">            expect(expectedCroppedWidth, width);</span><br><span class="line">            expect(expectedCroppedHeight, height);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">await</span> tester.pumpWidget(testWidget);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> waitAndPumpAndSettle(tester, <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line">      <span class="keyword">await</span> waitAndPumpAndSettle(tester, <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">      cropController.cropImage();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> waitAndPumpAndSettle(tester, <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line">      <span class="keyword">await</span> waitAndPumpAndSettle(tester, <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="사이드-프로젝트-UI-작업-짧게"><a href="#사이드-프로젝트-UI-작업-짧게" class="headerlink" title="사이드 프로젝트 UI 작업 짧게"></a>사이드 프로젝트 UI 작업 짧게</h2><ul><li>AnimatedSwitcher, AnimatedOpacity, AnimatedContainer</li></ul><h2 id="EventChannel을-어쩔-수-없이-쓰게-된-사례"><a href="#EventChannel을-어쩔-수-없이-쓰게-된-사례" class="headerlink" title="EventChannel을 어쩔 수 없이 쓰게 된 사례"></a>EventChannel을 어쩔 수 없이 쓰게 된 사례</h2><ul><li><strong>원인: Native 코드에서 callback으로밖에 구현이 안되는 상황</strong></li></ul><h3 id="상세내용"><a href="#상세내용" class="headerlink" title="상세내용"></a>상세내용</h3><ul><li>모든 앱을 관리하는 중앙집중형(?) 부모 앱(Android) → 자식 앱 (flutter)</li></ul><ol><li>앱 권한을 계속 거부해서 더이상 팝업이 안뜨면 부모 앱 호출</li><li>부모 앱은 권한을 받아야 한다는 팝업 노출 후 설정 화면으로 이동 (삼성 기기의 Knox 연동으로 네비게이션 바를 강제로 감춤)</li><li>결과를 다시 받으면 권한 여부 확인</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NativeFunctions</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> INTENT_CHANNEL = MethodChannel(<span class="string">&#x27;smart_korn_writing/intent&#x27;</span>);</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> PERMISSION_EVENT_CHANNEL = EventChannel(<span class="string">&#x27;smart_korn_writing/permission&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="built_in">bool</span>&gt; requestPermissionToBookclub() <span class="keyword">async</span> &#123;</span><br><span class="line">    unawaited(INTENT_CHANNEL.invokeMethod(<span class="string">&#x27;메소드 채널 method name&#x27;</span>));</span><br><span class="line">    <span class="keyword">final</span> result = <span class="keyword">await</span> PERMISSION_EVENT_CHANNEL.receiveBroadcastStream().elementAt(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (result <span class="keyword">is</span> <span class="built_in">bool</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// others...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">if</span> (call.method == <span class="string">&quot;메소드 채널 method name&quot;</span>) &#123;</span><br><span class="line">requestPermissionToBookclub()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">requestPermissionToBookclub</span><span class="params">()</span></span> &#123; <span class="comment">//  부모앱 연동</span></span><br><span class="line"><span class="keyword">val</span> intent = Intent(<span class="string">&quot;액션명&quot;</span>)</span><br><span class="line">intent.putExtra(<span class="string">&quot;PACKAGE&quot;</span>, BuildConfig.APPLICATION_ID) <span class="comment">// 요청 패키지</span></span><br><span class="line">intent.putExtra(<span class="string">&quot;PERMISSION&quot;</span>, <span class="string">&quot;APP&quot;</span>)</span><br><span class="line">startActivityForResult(intent, PERMISSION_REQUEST_CODE)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityResult</span><span class="params">(requestCode: <span class="type">Int</span>, resultCode: <span class="type">Int</span>, <span class="keyword">data</span>: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, <span class="keyword">data</span>)</span><br><span class="line">    <span class="keyword">if</span> (requestCode != PERMISSION_REQUEST_CODE) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 마지막 권한 체크</span></span><br><span class="line">    <span class="keyword">if</span> (ActivityCompat.checkSelfPermission(</span><br><span class="line">            <span class="keyword">this</span>,</span><br><span class="line">            Manifest.permission.RECORD_AUDIO</span><br><span class="line">        ) != PackageManager.PERMISSION_GRANTED</span><br><span class="line">        || ActivityCompat.checkSelfPermission(</span><br><span class="line">            <span class="keyword">this</span>,</span><br><span class="line">            Manifest.permission.CAMERA</span><br><span class="line">        ) != PackageManager.PERMISSION_GRANTED</span><br><span class="line">    ) &#123;</span><br><span class="line">        finishApp()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        permissionEventSink?.success(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>FlutterActivity는 onActivityResult()가 deprecated X → 일반적으로(?) 사용하는 Activity 상속 클래스들은 deprecated 였지만!</li><li>권한이 그래도 없다면 앱을 종료시켜 버림 → 부모앱 화면으로 돌아감</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter-study-14th </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 중급반 스터디 14기 2주차</title>
      <link href="/2023/07/03/flutter/study_14th/week2/"/>
      <url>/2023/07/03/flutter/study_14th/week2/</url>
      
        <content type="html"><![CDATA[<h2 id="Flutter-Flame으로-간단한-게임-만들어보기"><a href="#Flutter-Flame으로-간단한-게임-만들어보기" class="headerlink" title="Flutter Flame으로 간단한 게임 만들어보기"></a>Flutter Flame으로 간단한 게임 만들어보기</h2><ul><li>Dodge Game → 총알 피하기 게임..?</li><li>2022년 8월 정도쯤 개발하다가 딴거하느라 바빠서 손 떼었던 프로젝트 살리기</li><li>간단한 상태관리는 Getx로 진행 → 이유는 딱히 없고 빨리 만들어보고 싶어서 선택했던걸로 기억</li><li>Firebase Auth랑 Cloud Firestore 사용해 사용자 정보 저장함.</li></ul><h2 id="자바-초보-시절-만들었던-게임-군대-전역-직후…"><a href="#자바-초보-시절-만들었던-게임-군대-전역-직후…" class="headerlink" title="자바 초보 시절 만들었던 게임 (군대 전역 직후…)"></a>자바 초보 시절 만들었던 게임 (군대 전역 직후…)</h2><ul><li>Swing으로 만들었음</li><li>그림은 전부 파워포인트 + 그림판</li><li>배경음악은 대충 저작권 없는 음원 찾아서 넣음</li><li><a href="https://github.com/boring-km/Java-Dodge-Game">https://github.com/boring-km/Java-Dodge-Game</a></li></ul><h2 id="주요-게임-화면"><a href="#주요-게임-화면" class="headerlink" title="주요 게임 화면"></a>주요 게임 화면</h2><ul><li>카카오 로그인도 넣었다가 귀찮아서 뺌</li><li>나중에 출시하려면 애플로그인도 하나 끼워넣어야 할듯.</li></ul><p><img src="/images/flutter/study_14th/week2/img.png" alt="img.png"></p><p><img src="/images/flutter/study_14th/week2/img_1.png" alt="img_1.png"></p><p><img src="/images/flutter/study_14th/week2/img_2.png" alt="img_2.png"></p><ul><li>스마트폰 기기를 기울여서 움직임 <a href="https://pub.dev/packages/sensors_plus">https://pub.dev/packages/sensors_plus</a> 사용<ul><li>학생 때 재밌게 했던 게임이 이 방식이었는데 아무리 검색해봐도 안나오는데 그리워서 채용</li></ul></li><li>조이스틱으로 하는 방법도 구현은 해봤는데 개성이 별로 없는거 같음 + 조이스틱에 가려져서 보기 흉해짐</li></ul><p><img src="/images/flutter/study_14th/week2/img_3.png" alt="img_3.png"></p><h2 id="개선안"><a href="#개선안" class="headerlink" title="개선안?"></a>개선안?</h2><ul><li><p>스테이지 부여해서 점점 어려워지도록 하기</p></li><li><p>다양한 유형의 총알? 만들기</p><ul><li>멀리서 일직선으로 선 그리면서 오는 Enemy</li><li>n초 동안 느린 속도로 따라오다가 사라지는 Enemy</li><li>etc…</li></ul></li><li><p>광고 넣어보기 → 보통 Flutter 앱에서 광고 넣으면 어떤거 사용하나요?</p><ul><li>GPT의 답변</li></ul><p><img src="/images/flutter/study_14th/week2/img_4.png" alt="img.png"></p></li><li><p>결론: <a href="https://pub.dev/packages/functional_google_mobile_ads">https://pub.dev/packages/functional_google_mobile_ads</a> 사용해보기</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter-study-14th </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 중급반 스터디 14기 1주차</title>
      <link href="/2023/06/26/flutter/study_14th/week1/"/>
      <url>/2023/06/26/flutter/study_14th/week1/</url>
      
        <content type="html"><![CDATA[<h2 id="자기-소개"><a href="#자기-소개" class="headerlink" title="자기 소개"></a>자기 소개</h2><p>경기도 남양주시 거주</p><p>일일커밋 중 → 그냥 습관처럼 하면 실력이 늘지 않을까해서 시작함</p><ul><li>Flutter 스터디도 그런 이유로 하는 중</li></ul><p>Flutter는 21년 초부터 해봤음</p><p>회사에서는 신규 프로젝트는 Flutter 위주로 개발하고, 기존 Android 프로젝트 유지보수 겸하고 있음</p><h2 id="스터디-예상-주제"><a href="#스터디-예상-주제" class="headerlink" title="스터디 예상 주제"></a>스터디 예상 주제</h2><ul><li>Flame을 이용한 Dodge 게임 완성해보기</li><li>프로토타입 개발하기 (사이드 프로젝트, 제로 웨이스트 관련)<ul><li>비사이드라는 플랫폼에서 팀 빌딩 → <a href="https://bside.best/potenday">https://bside.best/potenday</a></li></ul></li><li>기존 사이드 프로젝트 유지보수 및 테스트 코드 작성</li><li>저번 기수에 만들었던 <a href="https://pub.dev/packages/dynamic_image_crop">패키지</a> 테스트 코드 작성</li><li>tensorflow_lite + flutter 해보기</li></ul><h2 id="14기-주요-목적"><a href="#14기-주요-목적" class="headerlink" title="14기 주요 목적"></a>14기 주요 목적</h2><ul><li>새로 시작할 사이드 프로젝트와 회사에서 7월부터 개발 시작할 프로젝트에 모두 riverpod 적용할 예정이라 능숙해지는 것이 주 목적</li></ul><h2 id="공유-방식"><a href="#공유-방식" class="headerlink" title="공유 방식"></a>공유 방식</h2><ul><li>노션 이용</li><li>코드 공유가 필요하면 IntelliJ 사용</li><li>내가 새롭게 배운 내용 위주로 진행</li><li>준비하다가 질문할 내용이 있으면 적기</li><li>저번 기수는 계획을 8주 꽉 채워서 했는데, 이번엔 좀 유동적으로</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter-study-14th </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 중급반 스터디 13기 8주차</title>
      <link href="/2023/06/06/flutter/study_13th/week8/"/>
      <url>/2023/06/06/flutter/study_13th/week8/</url>
      
        <content type="html"><![CDATA[<h1 id="진행도"><a href="#진행도" class="headerlink" title="진행도"></a>진행도</h1><ul><li><input checked="" disabled="" type="checkbox"> 1주차: 프로젝트 및 자기 소개</li><li><input checked="" disabled="" type="checkbox"> 2주차: 프로필 소개 화면 Flutter Web으로 만들어보기</li><li><input checked="" disabled="" type="checkbox"> 3주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input checked="" disabled="" type="checkbox"> 4주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input checked="" disabled="" type="checkbox"> 5주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input checked="" disabled="" type="checkbox"> 6주차: 이미지 Custom Crop Package 개발</li><li><input checked="" disabled="" type="checkbox"> 7주차: 이미지 Custom Crop Package 개발</li><li><input checked="" disabled="" type="checkbox"> 8주차: 이미지 Custom Crop Package 개발</li></ul><h1 id="pub-dev-배포"><a href="#pub-dev-배포" class="headerlink" title="pub.dev 배포"></a><a href="http://pub.dev/">pub.dev</a> 배포</h1><p><a href="https://pub.dev/packages/dynamic_image_crop">dynamic_image_crop | Flutter Package</a></p><h3 id="외부-패키지-의존성-없이-하기"><a href="#외부-패키지-의존성-없이-하기" class="headerlink" title="외부 패키지 의존성 없이 하기"></a>외부 패키지 의존성 없이 하기</h3><ul><li>이왕 패키지를 직접 만드는 기회이니만큼, 다른 패키지와의 의존성을 없애고 싶었음</li><li>Native Code 의존성 없이 Dart 언어만으로 구현하고 싶었음</li></ul><h3 id="PUB-POINTS"><a href="#PUB-POINTS" class="headerlink" title="PUB POINTS"></a>PUB POINTS</h3><ul><li>처음에 120점 나왔음<ol><li>(-10점) Description 설명이 60자 ~ 120자로 적어야 하는데 너무 짧게 적었음</li><li>(-10점) dartdoc comments를 20% 이상 적어야 점수 줌</li></ol></li><li>해결하니 다시 만점으로 채점해줌</li></ul><h3 id="verified-publisher"><a href="#verified-publisher" class="headerlink" title="verified publisher"></a>verified publisher</h3><p><a href="https://pub.dev/create-publisher">Authentication required</a></p><p>등록하려면 Domain Name 소유하고 있어야 함.</p><p>→ <a href="http://boring-km.dev/">boring-km.dev</a> 로 Google Domains에서 도메인 구매</p><h3 id="dart-pub-publish"><a href="#dart-pub-publish" class="headerlink" title="dart pub publish"></a>dart pub publish</h3><ul><li>명령어 하나만으로 배포되는게 정말 편리했음</li><li>publish 하면 <a href="http://pub.dev/">pub.dev</a> 에서 자체적으로 analysis 한 뒤 평가됨 [PENDING ANALYSIS]</li><li>Github Actions 사용해서 Automated publishing 해볼 예정</li></ul><p><img src="/images/flutter/study_13th/week8/img.png" alt="Untitled"></p><h1 id="dynamic-image-crop-Demo"><a href="#dynamic-image-crop-Demo" class="headerlink" title="dynamic_image_crop Demo"></a>dynamic_image_crop Demo</h1><p><a href="https://boring-km.dev/dynamic_image_crop/">https://boring-km.dev/dynamic_image_crop</a></p><h1 id="남은-작업들"><a href="#남은-작업들" class="headerlink" title="남은 작업들"></a>남은 작업들</h1><ul><li>테스트 코드 작성 - 실제로 사용자가 지정한 영역을 잘 자르고 있는지 확인</li><li><a href="http://readme.md/">README.md</a> 에 뱃지 이것저것 달아보기</li><li>Github Actions로 publish 자동화할 브랜치 정하고 workflow 만들기</li><li>CustomPaint 상속 객체 받아서 입력받은 도형대로 crop 할 수 있는 기능 추가</li></ul><h1 id="13기-스터디-회고"><a href="#13기-스터디-회고" class="headerlink" title="13기 스터디 회고"></a>13기 스터디 회고</h1><p>해야지 하고 미뤘던 작업들을 발표를 해야한다는 부담감을 갖고 하니까 목표대로 수행할 수 있었습니다.</p><p>여태 혼자서만 flutter 개발 해오다가 다른 분들 개발하시는 것들도 구경해보고 좋은 기회였습니다. ㅎㅎ</p>]]></content>
      
      
      <categories>
          
          <category> flutter-study-13th </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 중급반 스터디 13기 7주차</title>
      <link href="/2023/05/30/flutter/study_13th/week7/"/>
      <url>/2023/05/30/flutter/study_13th/week7/</url>
      
        <content type="html"><![CDATA[<h1 id="진행도"><a href="#진행도" class="headerlink" title="진행도"></a>진행도</h1><ul><li><input checked="" disabled="" type="checkbox"> 1주차: 프로젝트 및 자기 소개</li><li><input checked="" disabled="" type="checkbox"> 2주차: 프로필 소개 화면 Flutter Web으로 만들어보기</li><li><input checked="" disabled="" type="checkbox"> 3주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input checked="" disabled="" type="checkbox"> 4주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input checked="" disabled="" type="checkbox"> 5주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input checked="" disabled="" type="checkbox"> 6주차: 이미지 Custom Crop Package 개발</li><li><input checked="" disabled="" type="checkbox"> 7주차: 이미지 Custom Crop Package 개발</li><li><input disabled="" type="checkbox"> 8주차: 이미지 Custom Crop Package 개발</li></ul><h1 id="지난주에-빠트렸던-crop-패키지"><a href="#지난주에-빠트렸던-crop-패키지" class="headerlink" title="지난주에 빠트렸던 crop 패키지"></a>지난주에 빠트렸던 crop 패키지</h1><p><a href="https://pub.dev/packages/image_crop">image_crop | Flutter Package</a></p><p>제일 내가 만들고 싶은 기능과 흡사함</p><p>예제가 확대된 채 움직여서 crop을 해야하는게 조금 불편했음</p><p>이 패키지 안에 있는 함수 기능이 꼭 필요해서 dart 코드로만 작성할 수 있을지 검토 중</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Future&lt;File&gt; cropImage(&#123;</span><br><span class="line">  <span class="keyword">required</span> File file,</span><br><span class="line">  <span class="keyword">required</span> Rect area,</span><br><span class="line">  <span class="built_in">double?</span> scale,</span><br><span class="line">&#125;) =&gt;</span><br><span class="line">    _channel.invokeMethod(<span class="string">&#x27;cropImage&#x27;</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;path&#x27;</span>: file.path,</span><br><span class="line">      <span class="string">&#x27;left&#x27;</span>: area.left,</span><br><span class="line">      <span class="string">&#x27;top&#x27;</span>: area.top,</span><br><span class="line">      <span class="string">&#x27;right&#x27;</span>: area.right,</span><br><span class="line">      <span class="string">&#x27;bottom&#x27;</span>: area.bottom,</span><br><span class="line">      <span class="string">&#x27;scale&#x27;</span>: scale ?? <span class="number">1.0</span>,</span><br><span class="line">    &#125;).then&lt;File&gt;((result) =&gt; File(result));</span><br></pre></td></tr></table></figure><h1 id="어려움"><a href="#어려움" class="headerlink" title="어려움"></a>어려움</h1><ul><li>외부 패키지 없이 기능을 완성하고 싶은데 위에 적혀있는 저 함수를 dart로 작성하는 방법을 아직 찾지 못함 → 다른 패키지 기능 더 살펴보고 다음주까지 알아내보기<ul><li>crop_image에서 가능한 것 같아서 좀 더 살펴보기</li><li>(<a href="https://pub.dev/packages/crop_image">https://pub.dev/packages/crop_image</a>)</li></ul></li></ul><h3 id="crop-image"><a href="#crop-image" class="headerlink" title="crop_image"></a>crop_image</h3><ul><li><a href="https://github.com/deakjahn/crop_image/blob/master/lib/src/crop_controller.dart">https://github.com/deakjahn/crop_image/blob/master/lib/src/crop_controller.dart</a></li><li>아래의 함수를 참고해서 dart 코드로 작성해보기</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:ui&#x27;</span> <span class="keyword">as</span> ui;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> Future&lt;ui.Image&gt; getCropImage(&#123;</span><br><span class="line">  <span class="keyword">required</span> Rect crop,</span><br><span class="line">  <span class="keyword">required</span> ui.Image image,</span><br><span class="line">  <span class="keyword">required</span> ShapeType shapeType,</span><br><span class="line">  <span class="keyword">required</span> CropArea area,</span><br><span class="line">&#125;) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> pictureRecorder = ui.PictureRecorder();</span><br><span class="line">  <span class="keyword">final</span> canvas = Canvas(pictureRecorder);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">final</span> cropWidth = crop.width * image.width; <span class="comment">// 실제로 crop할 이미지의 width</span></span><br><span class="line">  <span class="keyword">final</span> cropHeight = crop.height * image.height; <span class="comment">// 실제로 crop할 이미지의 height</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">final</span> cropCenter = Offset(    <span class="comment">// 실제로 crop할 이미지의 중심좌표</span></span><br><span class="line">    image.width.toDouble() * crop.center.dx,</span><br><span class="line">    image.height.toDouble() * crop.center.dy,</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ShapeType에 따라서 다른 Painter를 사용</span></span><br><span class="line">  <span class="keyword">if</span> (shapeType == ShapeType.rectangle) &#123;</span><br><span class="line">    RectanglePainterForCrop(</span><br><span class="line">      Rect.fromLTWH(area.left, area.top, cropWidth, cropHeight),</span><br><span class="line">      cropCenter,</span><br><span class="line">      image,</span><br><span class="line">    ).paint(canvas, Size(cropWidth, cropHeight));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeType == ShapeType.circle) &#123;</span><br><span class="line">    CirclePainterForCrop(</span><br><span class="line">      Rect.fromLTWH(area.left, area.top, cropWidth, cropHeight),</span><br><span class="line">      cropCenter,</span><br><span class="line">      image,</span><br><span class="line">    ).paint(canvas, Size(cropWidth, cropHeight));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeType == ShapeType.triangle) &#123;</span><br><span class="line">    TrianglePainterForCrop(</span><br><span class="line">      Rect.fromLTWH(area.left, area.top, cropWidth, cropHeight),</span><br><span class="line">      cropCenter,</span><br><span class="line">      image,</span><br><span class="line">    ).paint(canvas, Size(cropWidth, cropHeight));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> Exception(<span class="string">&#x27;Unknown shape type&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>패키지 사용이 최대한 단순하도록 계속 수정중</li></ul><h1 id="주간-회고"><a href="#주간-회고" class="headerlink" title="주간 회고"></a>주간 회고</h1><ul><li>앱 출시하고 조금 휴식..?</li><li>자유형식 경력 이력서 처음 작성해 봄</li><li>flutter_inappwebview 이슈에 적은 글이 반영됨<ul><li><a href="https://github.com/pichillilorenzo/flutter_inappwebview/issues/1629">https://github.com/pichillilorenzo/flutter_inappwebview/issues/1629</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter-study-13th </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 중급반 스터디 13기 6주차</title>
      <link href="/2023/05/23/flutter/study_13th/week6/"/>
      <url>/2023/05/23/flutter/study_13th/week6/</url>
      
        <content type="html"><![CDATA[<h1 id="진행도"><a href="#진행도" class="headerlink" title="진행도"></a>진행도</h1><ul><li><input checked="" disabled="" type="checkbox"> 1주차: 프로젝트 및 자기 소개</li><li><input checked="" disabled="" type="checkbox"> 2주차: 프로필 소개 화면 Flutter Web으로 만들어보기</li><li><input checked="" disabled="" type="checkbox"> 3주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input checked="" disabled="" type="checkbox"> 4주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input checked="" disabled="" type="checkbox"> 5주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input checked="" disabled="" type="checkbox"> 6주차: 이미지 Custom Crop Package 개발</li><li><input disabled="" type="checkbox"> 7주차: 이미지 Custom Crop Package 개발</li><li><input disabled="" type="checkbox"> 8주차: 이미지 Custom Crop Package 개발</li></ul><h1 id="프로젝트-소개"><a href="#프로젝트-소개" class="headerlink" title="프로젝트 소개"></a>프로젝트 소개</h1><ul><li>목적: Flutter에서 다양한 모형으로 이미지를 crop 하는 라이브러리</li></ul><h2 id="기존-이미지-Crop-관련-패키지-조사"><a href="#기존-이미지-Crop-관련-패키지-조사" class="headerlink" title="기존 이미지 Crop 관련 패키지 조사"></a>기존 이미지 Crop 관련 패키지 조사</h2><h3 id="image-cropper"><a href="#image-cropper" class="headerlink" title="image_cropper"></a>image_cropper</h3><p><a href="https://pub.dev/packages/image_cropper">image_cropper | Flutter Package</a></p><ul><li>Native 영역에서 편집을 하고 있어 Flutter 소스로 커스터마이징 하기가 어려움</li></ul><h3 id="crop"><a href="#crop" class="headerlink" title="crop"></a>crop</h3><p><a href="https://pub.dev/packages/crop">crop | Flutter Package</a></p><ul><li>crop할 특정 영역을 직접 정하지 못함</li></ul><p><img src="/images/flutter/study_13th/week6/img.png" alt="img.png"></p><h3 id="crop-your-image"><a href="#crop-your-image" class="headerlink" title="crop_your_image"></a>crop_your_image</h3><p><a href="https://pub.dev/packages/crop_your_image">crop_your_image | Flutter Package</a></p><ul><li>위의 crop 패키지와 마찬가지로 이미지의 특정 영역을 선택해서 crop 하는 방식이 아닌 뒤에 있는 이미지를 움직여서 crop 영역에 맞추는 느낌</li></ul><p><img src="/images/flutter/study_13th/week6/img_1.png" alt="img_1.png"></p><h3 id="crop-image"><a href="#crop-image" class="headerlink" title="crop_image"></a>crop_image</h3><p><a href="https://pub.dev/packages/crop_image">crop_image | Flutter Package</a></p><p><img src="/images/flutter/study_13th/week6/img_2.png" alt="img_2.png"></p><ul><li>영역을 지정해서 사각형 crop까지는 가능</li><li>카카오톡에 있는 이미지 자르기랑 비슷</li></ul><p><img src="/images/flutter/study_13th/week6/img_3.png" alt="img_3.png"></p><h3 id="custom-image-crop"><a href="#custom-image-crop" class="headerlink" title="custom_image_crop"></a>custom_image_crop</h3><p><a href="https://pub.dev/packages/custom_image_crop">custom_image_crop | Flutter Package</a></p><p><img src="/images/flutter/study_13th/week6/img_4.png" alt="img_4.png"></p><h2 id="새로-개발하려는-패키지의-차이점"><a href="#새로-개발하려는-패키지의-차이점" class="headerlink" title="새로 개발하려는 패키지의 차이점"></a>새로 개발하려는 패키지의 차이점</h2><p><img src="/images/flutter/study_13th/week6/img_5.png" alt="img_5.png"></p><p><img src="/images/flutter/study_13th/week6/img_6.png" alt="img_6.png"></p><p><img src="/images/flutter/study_13th/week6/img_7.png" alt="img_7.png"></p><p><img src="/images/flutter/study_13th/week6/img_8.png" alt="img_8.png"></p><ol><li>직접 crop 할 부분을 그려서 그 감싸지는 영역만 꺼내기</li><li>사각형&#x2F;원형 crop 사이즈 조절하면서 원하는 영역만 crop 할 수 있게 하기</li></ol><h2 id="최종-목표"><a href="#최종-목표" class="headerlink" title="최종 목표"></a>최종 목표</h2><ul><li>pub.dev에 배포해보기</li><li>핵심 기능만 압축해서 패키지화하기</li><li>ui test 적용하기 (픽셀 비교)</li></ul><h1 id="주간-회고"><a href="#주간-회고" class="headerlink" title="주간 회고"></a>주간 회고</h1><ul><li>사이드 프로젝트로 개발한 프로젝트 PlayStore 검토 중</li><li>이제 슬슬 이력서 작성할 때</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter-study-13th </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 중급반 스터디 13기 5주차</title>
      <link href="/2023/05/15/flutter/study_13th/week5/"/>
      <url>/2023/05/15/flutter/study_13th/week5/</url>
      
        <content type="html"><![CDATA[<h1 id="진행도"><a href="#진행도" class="headerlink" title="진행도"></a>진행도</h1><ul><li><input checked="" disabled="" type="checkbox"> 1주차: 프로젝트 및 자기 소개</li><li><input checked="" disabled="" type="checkbox"> 2주차: 프로필 소개 화면 Flutter Web으로 만들어보기</li><li><input checked="" disabled="" type="checkbox"> 3주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input checked="" disabled="" type="checkbox"> 4주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input checked="" disabled="" type="checkbox"> 5주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input disabled="" type="checkbox"> 6주차: 이미지 Custom Crop Plugin 개발</li><li><input disabled="" type="checkbox"> 7주차: 이미지 Custom Crop Plugin 개발</li><li><input disabled="" type="checkbox"> 8주차: 이미지 Custom Crop Plugin 개발</li></ul><h1 id="소프트웨어-개발의-꽃은-자동화-적용"><a href="#소프트웨어-개발의-꽃은-자동화-적용" class="headerlink" title="소프트웨어 개발의 꽃은 자동화 적용?"></a>소프트웨어 개발의 꽃은 자동화 적용?</h1><h2 id="CI에-테스트-커버리지-적용하기"><a href="#CI에-테스트-커버리지-적용하기" class="headerlink" title="CI에 테스트 커버리지 적용하기"></a>CI에 테스트 커버리지 적용하기</h2><ul><li>테스트 커버리지를 측정하고 나서 자동화 시스템에 반영하지 못하면 불편한 업무 프로세스가 오히려 늘어날 수도 있으니 CI에 반영할 수 있는 방법을 찾아본다.</li><li>다양한 CI 도구들: <a href="https://katalon.com/resources-center/blog/ci-cd-tools">https://katalon.com/resources-center/blog/ci-cd-tools</a></li><li>LINKPOOL 앱은 GitHub에 소스코드를 올리고 있으니 최대한 GitHub Action을 통해 무료로 적용해본다.</li></ul><h2 id="Codecov"><a href="#Codecov" class="headerlink" title="Codecov"></a>Codecov</h2><p>여기서는 Codecov 라는 도구를 사용해 테스트 커버리지를 더 쉽게 보고, CI에 반영할 수 있도록 해본다.</p><p><a href="https://docs.codecov.com/docs">Quick Start</a></p><h3 id="codecov-동작을-정의하는-codecov-yml-작성"><a href="#codecov-동작을-정의하는-codecov-yml-작성" class="headerlink" title="codecov 동작을 정의하는 codecov.yml 작성"></a>codecov 동작을 정의하는 codecov.yml 작성</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codecov:</span></span><br><span class="line">  <span class="attr">require_ci_to_pass:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">&quot;reach,diff,flags,files&quot;</span></span><br><span class="line">  <span class="attr">behavior:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">require_changes:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">require_base:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">require_head:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">branches:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">develop</span></span><br><span class="line"></span><br><span class="line"><span class="attr">coverage:</span></span><br><span class="line">  <span class="attr">range:</span> <span class="number">10</span><span class="string">..100</span></span><br><span class="line">  <span class="attr">round:</span> <span class="string">down</span></span><br><span class="line">  <span class="attr">precision:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">status:</span></span><br><span class="line">    <span class="attr">project:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">target:</span> <span class="number">10</span><span class="string">%</span></span><br><span class="line">        <span class="attr">threshold:</span> <span class="number">0</span><span class="string">%</span></span><br><span class="line">    <span class="attr">patch:</span></span><br><span class="line">      <span class="attr">target:</span> <span class="number">10</span><span class="string">%</span></span><br><span class="line">      <span class="attr">threshold:</span> <span class="number">0</span><span class="string">%</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;lib/models/result.freezed.dart&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;lib/models/**/*.freezed.dart&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;lib/models/*/*.freezed.dart&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;lib/models/*/*.g.dart&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;lib/gen/*.gen.dart&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;lib/firebase_options.dart&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;lib/util/logger.dart&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Pull-Request-작성-시-github-action에서-감지하여-테스트-커버리지-계산하기"><a href="#Pull-Request-작성-시-github-action에서-감지하여-테스트-커버리지-계산하기" class="headerlink" title="Pull Request 작성 시 github action에서 감지하여 테스트 커버리지 계산하기"></a>Pull Request 작성 시 github action에서 감지하여 테스트 커버리지 계산하기</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Measure</span> <span class="string">Code</span> <span class="string">Coverage</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">develop</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test-coverage:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">subosito/flutter-action@v2.8.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">flutter-version:</span> <span class="string">&#x27;3.10.0&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">packages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">flutter</span> <span class="string">pub</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&#x27;$<span class="template-variable">&#123;&#123; secrets.DOTENV &#125;&#125;</span>&#x27;</span> <span class="string">|</span> <span class="string">base64</span> <span class="string">-d</span> <span class="string">&gt;</span> <span class="string">.env</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123; secrets.FIREBASE_OPTIONS &#125;&#125;</span>&quot;</span> <span class="string">|</span> <span class="string">base64</span> <span class="string">-d</span> <span class="string">&gt;</span> <span class="string">./lib/firebase_options.dart</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span> <span class="string">flutter</span> <span class="string">test</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">flutter</span> <span class="string">test</span> <span class="string">--coverage</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">coverage</span> <span class="string">reports</span> <span class="string">to</span> <span class="string">Codecov</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">codecov/codecov-action@v3</span></span><br></pre></td></tr></table></figure><h2 id="웹페이지에서-확인"><a href="#웹페이지에서-확인" class="headerlink" title="웹페이지에서 확인"></a>웹페이지에서 확인</h2><p><img src="/images/flutter/study_13th/week5/1.png" alt="Untitled"></p><h3 id="github에서-확인"><a href="#github에서-확인" class="headerlink" title="github에서 확인"></a>github에서 확인</h3><ul><li>자동으로 PR에 Report 작성됨</li></ul><p><img src="/images/flutter/study_13th/week5/2.png" alt="Untitled"></p><p><img src="/images/flutter/study_13th/week5/3.png" alt="Untitled"></p><h1 id="주간-회고"><a href="#주간-회고" class="headerlink" title="주간 회고"></a>주간 회고</h1><ul><li>다른 사이드 프로젝트 앱 개발하느라 정신이 없음 (곧 출시!)</li><li>매일 잠을 거의 못 자는 상태</li><li>Kotlin의 suspend 함수가 비동기 함수들을 확실히 개발단계에서부터 제한하니까 실수가 적은 것 같다.</li></ul><h2 id="질문"><a href="#질문" class="headerlink" title="질문?"></a>질문?</h2><ul><li>flutter 3.10 업데이트 다들 해보고 계신가요? ㅎㅎ</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter-study-13th </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 중급반 스터디 13기 4주차</title>
      <link href="/2023/05/01/flutter/study_13th/week4/"/>
      <url>/2023/05/01/flutter/study_13th/week4/</url>
      
        <content type="html"><![CDATA[<h1 id="진행도"><a href="#진행도" class="headerlink" title="진행도"></a>진행도</h1><ul><li><input checked="" disabled="" type="checkbox"> 1주차: 프로젝트 및 자기 소개</li><li><input checked="" disabled="" type="checkbox"> 2주차: 프로필 소개 화면 Flutter Web으로 만들어보기</li><li><input checked="" disabled="" type="checkbox"> 3주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input checked="" disabled="" type="checkbox"> 4주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input disabled="" type="checkbox"> 5주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input disabled="" type="checkbox"> 6주차: 이미지 Custom Crop Plugin 개발</li><li><input disabled="" type="checkbox"> 7주차: 이미지 Custom Crop Plugin 개발</li><li><input disabled="" type="checkbox"> 8주차: 이미지 Custom Crop Plugin 개발</li></ul><h1 id="테스트-커버리지-측정-및-올리기"><a href="#테스트-커버리지-측정-및-올리기" class="headerlink" title="테스트 커버리지 측정 및 올리기"></a>테스트 커버리지 측정 및 올리기</h1><ul><li>테스트&#x2F;코드 커버리지 비율이 무조건 높다고 좋은건 아님.</li><li>그래도 테스트 코드가 없는 것보다는 있는 게 좋다.</li><li><strong>유의미한 테스트를 잘 작성하는 것이 중요하다.</strong></li></ul><h2 id="테스트-커버리지-확인-방법"><a href="#테스트-커버리지-확인-방법" class="headerlink" title="테스트 커버리지 확인 방법"></a>테스트 커버리지 확인 방법</h2><ol><li><code>flutter test —coverage</code> → coverage&#x2F;lcov.info 파일 생성됨</li><li><code>brew install lcov</code> → lcov.info 파일을 쉽게 보기 위한 도구 설치</li><li><code>genhtml coverage/lcov.info -o coverage/html</code> → lcov.info 파일을 html 형태로 변환</li><li><code>open ./coverage/html/index.html</code> → 생성된 html 파일 열어보기</li></ol><p><img src="/images/flutter/study_13th/week4/1.png" alt="img.png"></p><h2 id="지난-주에-작성한-테스트-코드의-테스트-커버리지-확인해보기"><a href="#지난-주에-작성한-테스트-코드의-테스트-커버리지-확인해보기" class="headerlink" title="지난 주에 작성한 테스트 코드의 테스트 커버리지 확인해보기"></a>지난 주에 작성한 테스트 코드의 테스트 커버리지 확인해보기</h2><ul><li>자동 생성되는 파일들은 예외처리한다.</li><li>거의 테스트를 작성하지 않아 3.6% 밖에 없음을 확인했다.</li><li>여기서부터는 정말 노력으로밖에 채울 수 없다.</li><li>특히나 UI 코드가 많아 테스트 작성하는데 시간과 비용이 많이 들어갈 것 같다.</li><li>작은 테스트 코드를 몇줄 쓰고나서 1%가 올랐다.</li></ul><p><img src="/images/flutter/study_13th/week4/2.png" alt="img.png"></p><h2 id="참고-글"><a href="#참고-글" class="headerlink" title="참고 글"></a>참고 글</h2><p>테스트 커버리지 확인 방법 안내: <a href="https://dev-yakuza.posstree.com/ko/flutter/test-coverage/">https://dev-yakuza.posstree.com/ko/flutter/test-coverage/</a></p><p>How to get your “actual” test coverage of your Flutter applications?: <a href="https://medium.com/flutter-community/how-to-actually-get-test-coverage-for-your-flutter-applications-f881c0ae8155">https://medium.com/flutter-community/how-to-actually-get-test-coverage-for-your-flutter-applications-f881c0ae8155</a></p><h1 id="통합-테스트-해보기"><a href="#통합-테스트-해보기" class="headerlink" title="통합 테스트 해보기"></a>통합 테스트 해보기</h1><ul><li>저번주에 <code>WidgetTester.tap()</code> 함수가 ElevatedButton에서는 동작했음.</li><li>실제 코드로 테스트하는 과정</li></ul><h2 id="로그인-x2F-로그아웃-통합-테스트-해보기-지훈님-발표-중에-테스트-성공"><a href="#로그인-x2F-로그아웃-통합-테스트-해보기-지훈님-발표-중에-테스트-성공" class="headerlink" title="로그인&#x2F;로그아웃 통합 테스트 해보기 (지훈님 발표 중에 테스트 성공!)"></a>로그인&#x2F;로그아웃 통합 테스트 해보기 (지훈님 발표 중에 테스트 성공!)</h2><ul><li>소셜 로그인은 flutter 안에서만 테스트하기가 어려움.</li><li>id&#x2F;password 로그인을 안보이게 추가하여 진행하기</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  IntegrationTestWidgetsFlutterBinding.ensureInitialized();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// email: signed@test.com</span></span><br><span class="line">  <span class="comment">// pw: 123456</span></span><br><span class="line">  testWidgets(<span class="string">&#x27;이미 가입된 유저 계정의 로그인/로그아웃 테스트&#x27;</span>, (WidgetTester tester) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 앱 실행</span></span><br><span class="line">    <span class="keyword">await</span> app.main();</span><br><span class="line">    <span class="keyword">await</span> tester.pumpAndSettle(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 튜토리얼 시작 버튼 tap</span></span><br><span class="line">    <span class="keyword">final</span> startButton = find.byKey(<span class="keyword">const</span> Key(<span class="string">&#x27;StartAppButton&#x27;</span>));</span><br><span class="line">    <span class="keyword">if</span> (startButton.evaluate().isNotEmpty) &#123;</span><br><span class="line">      <span class="keyword">await</span> tester.tap(startButton);</span><br><span class="line">      <span class="keyword">await</span> tester.pump(<span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">500</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 테스트 로그인 버튼 tap</span></span><br><span class="line">    <span class="keyword">const</span> testLoginButtonKey = Key(<span class="string">&#x27;SignedUserLoginButton&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (find.byKey(testLoginButtonKey).evaluate().isNotEmpty) &#123;</span><br><span class="line">      InkWellButton(testLoginButtonKey).onTap!.call();</span><br><span class="line">      <span class="keyword">await</span> tester.pump(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 홈화면 BottomNavigation에서 마이페이지로 이동</span></span><br><span class="line">    <span class="keyword">await</span> tester.pumpAndSettle();</span><br><span class="line">    <span class="keyword">await</span> tester.pumpAndSettle(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">final</span> navigation = find.byKey(<span class="keyword">const</span> Key(<span class="string">&#x27;MainBottomNavigationBar&#x27;</span>));</span><br><span class="line">    <span class="keyword">final</span> navigationBar = navigation</span><br><span class="line">        .evaluate()</span><br><span class="line">        .first</span><br><span class="line">        .widget <span class="keyword">as</span> BottomNavigationBar;</span><br><span class="line">    navigationBar.onTap!.call(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">await</span> tester.pump(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 로그아웃 버튼 클릭</span></span><br><span class="line">    <span class="keyword">const</span> logoutKey = Key(<span class="string">&#x27;menu:로그아웃&#x27;</span>);</span><br><span class="line">    InkWellButton(logoutKey).onTap!.call();</span><br><span class="line">    <span class="keyword">await</span> tester.pump(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 로그아웃 다이얼로그에서 로그아웃 수행</span></span><br><span class="line">    <span class="keyword">const</span> logoutButtonKey = Key(<span class="string">&#x27;MyPageDialogRightButtonKey&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> tester.tap(find.byKey(logoutButtonKey));</span><br><span class="line">    <span class="keyword">await</span> tester.pump(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 다시 로그인 화면으로 돌아왔는지 확인</span></span><br><span class="line">    <span class="keyword">final</span> actual = find.byKey(testLoginButtonKey);</span><br><span class="line">    expect(actual, findsWidgets);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="추가적으로…"><a href="#추가적으로…" class="headerlink" title="추가적으로…"></a>추가적으로…</h1><p>Android에서 선언형 UI 그리는 Jetpack Compose 사용한 사이드 프로젝트 잠시 소개…?</p><ul><li>달력 들어간 TODO 앱</li><li>금융습관들을 루틴으로 관리할 수 있도록 고도화 예정</li></ul><p><img src="/images/flutter/study_13th/week4/3.png" alt="img.png"></p><ul><li>개인적으로 Preview 제공하는 기능이 UI 격리해서 테스트하는데 굉장히 좋은 것 같다.</li></ul><p><a href="https://developer.android.com/jetpack/compose?gclid=CjwKCAjwxr2iBhBJEiwAdXECw4CPihTvFILzy9XTURynpGjgt81VDCsg0L4kQ_LTz6ujJBJ-v-fC0xoCkuwQAvD_BwE&gclsrc=aw.ds">Jetpack Compose UI App Development Toolkit - Android Developers</a></p><h1 id="이런-것도-있어요"><a href="#이런-것도-있어요" class="headerlink" title="이런 것도 있어요"></a>이런 것도 있어요</h1><p>테스트 코드 작성과 관련해서 좀 더 편하게 작성하기 위한 추가적인 패키지가 있지 않을까해서 봤더니 역시 있었습니다.</p><p><a href="https://pub.dev/packages/bdd_widget_test">bdd_widget_test | Flutter Package</a></p><p><a href="https://pub.dev/packages/convenient_test">convenient_test | Flutter Package</a></p>]]></content>
      
      
      <categories>
          
          <category> flutter-study-13th </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter InAppWebView iOS 16.4 Inspecting 안되는 이슈</title>
      <link href="/2023/04/26/flutter/flutter_inappwebview_ios_debugging/"/>
      <url>/2023/04/26/flutter/flutter_inappwebview_ios_debugging/</url>
      
        <content type="html"><![CDATA[<ul><li>원문 링크: <a href="https://github.com/pichillilorenzo/flutter_inappwebview/issues/1629">https://github.com/pichillilorenzo/flutter_inappwebview/issues/1629</a></li></ul><p>iOS 버전이 16.4로 업데이트 되면서 WKWebView.isInspectable 값을 true로 설정해야만 Safari를 통해 웹뷰 디버깅이 가능하다.</p><p>근데 아직 InAppWebView 베타버전 라이브러리에서도 작업이 안되어 있어서 이슈를 적어봤다.</p><p>일단은 임시로 Pod 폴더에서 InAppWebView.swift 파일을 직접 수정해서 옵션을 넣어주는 수 밖에 없을 것 같다.</p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 중급반 스터디 13기 3주차</title>
      <link href="/2023/04/24/flutter/study_13th/week3/"/>
      <url>/2023/04/24/flutter/study_13th/week3/</url>
      
        <content type="html"><![CDATA[<h1 id="진행도"><a href="#진행도" class="headerlink" title="진행도"></a>진행도</h1><ul><li><input checked="" disabled="" type="checkbox"> 1주차: 프로젝트 및 자기 소개</li><li><input checked="" disabled="" type="checkbox"> 2주차: 프로필 소개 화면 Flutter Web으로 만들어보기</li><li><input checked="" disabled="" type="checkbox"> 3주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input disabled="" type="checkbox"> 4주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input disabled="" type="checkbox"> 5주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input disabled="" type="checkbox"> 6주차: 이미지 Custom Crop Plugin 개발</li><li><input disabled="" type="checkbox"> 7주차: 이미지 Custom Crop Plugin 개발</li><li><input disabled="" type="checkbox"> 8주차: 이미지 Custom Crop Plugin 개발</li></ul><h1 id="프로젝트-LINKPOOL-소개"><a href="#프로젝트-LINKPOOL-소개" class="headerlink" title="프로젝트 LINKPOOL 소개"></a>프로젝트 LINKPOOL 소개</h1><p>다른 앱에서 url 링크를 쉽게 저장하고 공유할 수 있는 앱</p><h2 id="Store-Link"><a href="#Store-Link" class="headerlink" title="Store Link"></a>Store Link</h2><ul><li>링크풀 - 체계적인 링크 관리의 시작</li><li>PlayStore: <a href="https://play.google.com/store/apps/details?id=com.mr.ac_project_app">https://play.google.com/store/apps/details?id=com.mr.ac_project_app</a></li><li>AppStore: <a href="https://apps.apple.com/us/app/%EB%A7%81%ED%81%AC%ED%92%80-%EC%B2%B4%EA%B3%84%EC%A0%81%EC%9D%B8-%EB%A7%81%ED%81%AC-%EA%B4%80%EB%A6%AC%EC%9D%98-%EC%8B%9C%EC%9E%91/id1644108674">https://apps.apple.com/us/app/링크풀-체계적인-링크-관리의-시작/id1644108674</a></li></ul><h2 id="사용-기술"><a href="#사용-기술" class="headerlink" title="사용 기술"></a>사용 기술</h2><p><img src="/images/flutter/study_13th/week3/tutorial.png" alt="tutorial"></p><ul><li>App 외부에서 url 저장 기능</li><li>해당 url의 meta 태그 정보 저장함</li><li>나머지는 거의 게시판 기능</li></ul><h3 id="html-meta-태그-정보-활용-OGP"><a href="#html-meta-태그-정보-활용-OGP" class="headerlink" title="html meta 태그 정보 활용 (OGP)"></a>html meta 태그 정보 활용 (OGP)</h3><ul><li>Facebook에서 개발한 OGP(Open Graph Protocol)</li><li>앱 내부에선 flutter 패키지 metadata_fetch 사용</li></ul><p><a href="https://pub.dev/packages/metadata_fetch">metadata_fetch | Dart Package</a></p><ul><li>Android에선 jsoup 라이브러리 활용해 html의 메타태그 정보 가져왔음</li><li>iOS에선 OGP Swift wrapper 라이브러리 사용</li></ul><p><a href="https://github.com/satoshi-takano/OpenGraph">https://github.com/satoshi-takano/OpenGraph</a></p><h3 id="App-내부-DB-활용"><a href="#App-내부-DB-활용" class="headerlink" title="App 내부 DB 활용"></a>App 내부 DB 활용</h3><ul><li>flutter: <a href="https://pub.dev/packages/sqflite">https://pub.dev/packages/sqflite</a></li><li>AOS, iOS 네이티브 화면에서도 동일 데이터에 접근하기 위해 SQLite 사용, db 파일경로를 공유하여 양방향으로 기록하는 구조 사용</li></ul><h3 id="GitHub-Source"><a href="#GitHub-Source" class="headerlink" title="GitHub Source"></a>GitHub Source</h3><ul><li><a href="https://github.com/Monday-Rocket/ac_project_app">https://github.com/Monday-Rocket/ac_project_app</a></li></ul><h1 id="테스트-코드-작성-및-리팩토링"><a href="#테스트-코드-작성-및-리팩토링" class="headerlink" title="테스트 코드 작성 및 리팩토링"></a>테스트 코드 작성 및 리팩토링</h1><p><img src="/images/flutter/study_13th/week3/flow.png" alt="flow"></p><h2 id="프로필-이미지-변경-화면-테스트"><a href="#프로필-이미지-변경-화면-테스트" class="headerlink" title="프로필 이미지 변경 화면 테스트"></a>프로필 이미지 변경 화면 테스트</h2><p><img src="/images/flutter/study_13th/week3/test1.png" alt="test1"></p><ul><li>마이페이지 화면에서 프로필 이미지를 누르면 프로필 변경 화면으로 이동함</li></ul><p><img src="/images/flutter/study_13th/week3/test2.png" alt="test2"></p><ul><li>지정된 이미지 9개에서 선택하는 기능</li><li>서버에 저장할 때는 이미지 번호만 저장함 → 추후 사용자 이미지로 저장하기 위해 String으로 저장</li><li>사용자 이미지를 업로드하는 기능으로 만들면 비용 나올까봐 현재는 구현 안되어 있음</li></ul><h3 id="UX-Flow"><a href="#UX-Flow" class="headerlink" title="UX Flow"></a>UX Flow</h3><ol><li>변경할 프로필 이미지를 9개 이미지에서 하나를 골라 누르기</li><li>하단의 변경하기 버튼이나, 완료 버튼 누르기</li><li>프로필 정보 변경 API 호출</li><li>이전 화면(마이페이지)으로 돌아가면서, 변경된 프로필 정보를 전달함</li><li>전달 받은 데이터로 닉네임과 프로필 이미지 영역만 다시 그리기</li></ol><h3 id="Widget-테스트-작성"><a href="#Widget-테스트-작성" class="headerlink" title="Widget 테스트 작성"></a>Widget 테스트 작성</h3><ol><li>프로필 이미지가 불러와지는 지 테스트</li><li>프로필 닉네임이 불러와지는 지 테스트</li><li>특정 프로필 이미지를 선택했을 때 화면이 바뀌는 지 테스트</li></ol><h3 id="test-x2F-widget-tap-helper-dart-GestureDetector-위젯을-key에서-찾아오는-위젯-아래의-테스트에서-이걸-구현한-이유-있음"><a href="#test-x2F-widget-tap-helper-dart-GestureDetector-위젯을-key에서-찾아오는-위젯-아래의-테스트에서-이걸-구현한-이유-있음" class="headerlink" title="test&#x2F;widget_tap_helper.dart: GestureDetector 위젯을 key에서 찾아오는 위젯 (아래의 테스트에서 이걸 구현한 이유 있음)"></a>test&#x2F;widget_tap_helper.dart: GestureDetector 위젯을 key에서 찾아오는 위젯 (아래의 테스트에서 이걸 구현한 이유 있음)</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GestureDetector GestureDetectorButton(Key key) =&gt;</span><br><span class="line">    find.byKey(key).evaluate().first.widget <span class="keyword">as</span> GestureDetector;</span><br></pre></td></tr></table></figure><h3 id="test-x2F-ui-x2F-view-x2F-user-x2F-change-profile-view-test-dart"><a href="#test-x2F-ui-x2F-view-x2F-user-x2F-change-profile-view-test-dart" class="headerlink" title="test&#x2F;ui&#x2F;view&#x2F;user&#x2F;change_profile_view_test.dart"></a>test&#x2F;ui&#x2F;view&#x2F;user&#x2F;change_profile_view_test.dart</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../../widget_tap_helper.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">final</span> testWidget = MaterialApp(</span><br><span class="line">    home: ScreenUtilInit(</span><br><span class="line">      designSize: <span class="keyword">const</span> Size(<span class="number">393</span>, <span class="number">852</span>),</span><br><span class="line">      builder: (_, __) &#123;</span><br><span class="line">        <span class="keyword">return</span> ProfileSelector(</span><br><span class="line">          profile: Profile(</span><br><span class="line">            nickname: <span class="string">&#x27;오키&#x27;</span>,</span><br><span class="line">            profileImage: <span class="string">&#x27;02&#x27;</span>,</span><br><span class="line">          ),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  testWidgets(<span class="string">&#x27;프로필 이미지가 불러와지는 지 테스트&#x27;</span>, (tester) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> tester.pumpWidget(testWidget);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> imagePath = <span class="string">&#x27;assets/images/profile/img_02_on.png&#x27;</span>;</span><br><span class="line">    <span class="keyword">final</span> actual = find.image(Image.asset(imagePath).image);</span><br><span class="line"></span><br><span class="line">    expect(actual, findsWidgets);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  testWidgets(<span class="string">&#x27;프로필 닉네임이 불러와지는 지 테스트&#x27;</span>, (tester) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> tester.pumpWidget(testWidget);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> nickname = <span class="string">&#x27;오키&#x27;</span>;</span><br><span class="line">    <span class="keyword">final</span> actual = find.text(nickname);</span><br><span class="line"></span><br><span class="line">    expect(actual, findsWidgets);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  testWidgets(<span class="string">&#x27;4번 프로필을 선택했을 때 화면이 바뀌는 지 테스트&#x27;</span>, (tester) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> tester.pumpWidget(testWidget);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4번 이미지 버튼 tap</span></span><br><span class="line">    <span class="keyword">const</span> selectIndex = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">const</span> key = Key(<span class="string">&#x27;select:<span class="subst">$selectIndex</span>&#x27;</span>);</span><br><span class="line">    GestureDetectorButton(key)</span><br><span class="line">        .onTap!</span><br><span class="line">        .call(); <span class="comment">// 동작 안 함 -&gt; await tester.tap(found, warnIfMissed: false);</span></span><br><span class="line">    <span class="keyword">await</span> tester.pump(); <span class="comment">// 안 기다려주면 변경된 UI 감지를 못함</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 선택된 이미지 위젯 찾기</span></span><br><span class="line">    <span class="keyword">const</span> selectedImageKey = Key(<span class="string">&#x27;selectedImage&#x27;</span>);</span><br><span class="line">    <span class="keyword">final</span> selectedWidget = find.byKey(selectedImageKey);</span><br><span class="line">    <span class="keyword">final</span> actualImage = (selectedWidget.evaluate().first.widget <span class="keyword">as</span> Image).image;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 설정하려고 했던 이미지 가져오기 </span></span><br><span class="line">    <span class="keyword">const</span> targetImagePath =</span><br><span class="line">        <span class="string">&#x27;assets/images/profile/img_0&#123;<span class="subst">$selectIndex</span>+1&#125;_on.png&#x27;</span>;</span><br><span class="line">    <span class="keyword">final</span> matcherImage = Image.asset(targetImagePath).image;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 같은 이미지인지 확인하기</span></span><br><span class="line">    expect(actualImage, matcherImage);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Widget-테스트-우여곡절"><a href="#Widget-테스트-우여곡절" class="headerlink" title="Widget 테스트 우여곡절"></a>Widget 테스트 우여곡절</h3><ul><li>3번에서 위젯을 선택해도 안 바뀜</li><li>리팩토링 필요: BlocBuilder로 감싸여진 구조에서 변경된 상태를 바로 전달받을 수가 없었음</li><li>tap() 메소드가 동작을 안해서 다른 방법을 선택했음.</li></ul><h3 id="API-Mock-테스트-작성"><a href="#API-Mock-테스트-작성" class="headerlink" title="API Mock 테스트 작성"></a>API Mock 테스트 작성</h3><ul><li>프로필 이미지 변경 API Mock 테스트</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MockFirebaseAuth</span> <span class="keyword">extends</span> <span class="title">Mock</span> <span class="keyword">implements</span> <span class="title">FirebaseAuth</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  test(<span class="string">&#x27;ProfileApi ChangeApi Success Test&#x27;</span>, () <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Given: 변경하려는 프로필 이미지 번호는 2번</span></span><br><span class="line">    <span class="keyword">const</span> targetProfileImageNumber = <span class="string">&#x27;02&#x27;</span>;</span><br><span class="line">    <span class="keyword">final</span> expectedResult = ApiResult(</span><br><span class="line">      status: <span class="number">0</span>,</span><br><span class="line">      data: DetailUser(</span><br><span class="line">        profileImg: targetProfileImageNumber,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// When 1: ProfileApi의 MockClient 설정하고</span></span><br><span class="line">    <span class="keyword">final</span> mockClient = MockClient((request) <span class="keyword">async</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (request.url.toString() == <span class="string">&#x27;<span class="subst">$baseUrl</span>/users/me&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> http.Response(</span><br><span class="line">          jsonEncode(expectedResult),</span><br><span class="line">          <span class="number">200</span>,</span><br><span class="line">          headers: &#123;</span><br><span class="line">            HttpHeaders.contentTypeHeader: <span class="string">&#x27;application/json; charset=utf-8&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> http.Response(<span class="string">&#x27;error&#x27;</span>, <span class="number">404</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> profileApi = ProfileApi(</span><br><span class="line">      client: CustomClient(</span><br><span class="line">        client: mockClient,</span><br><span class="line">        auth: MockFirebaseAuth(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// When 2: ProfileApi의 changeImage() 실행했을 때,</span></span><br><span class="line">    <span class="keyword">final</span> result = <span class="keyword">await</span> profileApi.changeImage(</span><br><span class="line">      profileImg: targetProfileImageNumber,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Then: 예상했던 결과와 동일하게 나오는지 확인한다.</span></span><br><span class="line">    result.when(</span><br><span class="line">      success: (actual) =&gt; expect(actual, expectedResult.data),</span><br><span class="line">      error: fail,</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mock-테스트-우여곡절"><a href="#Mock-테스트-우여곡절" class="headerlink" title="Mock 테스트 우여곡절"></a>Mock 테스트 우여곡절</h3><ul><li>http mocking이 잘 안되어서 힘들었음.</li><li>mock test를 예상하고 만들지 않아 MockClient, MockFirebaseAuth를 사용하기 위한 구조로 변경이 필요했음.</li></ul><p><img src="/images/flutter/study_13th/week3/error.png" alt="error"></p><ul><li><p>원인은 Response 인코딩에 있었음</p></li><li><p>mock Response랑 다르다고 하면 될 것을 http patch 함수 날릴 때 부터 에러를 보내서 원인을 빨리 알아내기가 어려웠음.</p></li><li><p>해결에 참고한 링크: <a href="https://stackoverflow.com/questions/52990816/dart-json-encodedata-can-not-accept-other-language">https://stackoverflow.com/questions/52990816/dart-json-encodedata-can-not-accept-other-language</a></p></li><li><p><strong>추후에 개선될 기능</strong></p><ul><li>나중에는 사용자가 직접 업로드한 이미지로도 프로필 이미지 바꿀 수 있게도 구현할 예정</li><li>이미 선택된 프로필 이미지로는 변경이 안되게 수정</li></ul></li></ul><h2 id="리팩토링"><a href="#리팩토링" class="headerlink" title="리팩토링"></a>리팩토링</h2><ol><li>프로필 변경 화면 안쪽 부분 Stateful로 변경</li><li>프로필 변경 후 나올 때 화면 업데이트 개선 (불필요한 API 재조회 및 화면 전체 로딩하는 등)</li><li>iOS 공유패널 Open Graph 데이터 불러와질 때 까지 화면 잠시 blocking 하기 (로딩효과?)</li></ol><h1 id="회고"><a href="#회고" class="headerlink" title="회고"></a>회고</h1><ul><li>내가 작성했던 코드를 다시 보니 아주 형편없는 코드였다.</li><li>테스트를 처음부터 고려하면서 코딩하지 않으면 나중에 개고생한다.</li><li>익숙하지 않은 테스트 코드 작성에 훈련이 많이 필요함을 느꼈다.</li><li>bloc 잘 다루는 법좀 공부해야겠다.</li></ul><h1 id="질문"><a href="#질문" class="headerlink" title="질문"></a>질문</h1><ol><li>테스트 코드 작성에 관련된 선배님들의 훈수 부탁드립니다.</li><li>widget test에서 GestureDetector&#x2F;InkWell 위젯의 WidgetTester.tap() 이 동작하지 않는 이유?</li><li>GridView로 분명 9개를 그렸는데 테스트코드에서 6개밖에 못 그리는 이유가 있을까요</li></ol><p><img src="/images/flutter/study_13th/week3/console.png" alt="console"></p>]]></content>
      
      
      <categories>
          
          <category> flutter-study-13th </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 중급반 스터디 13기 2주차</title>
      <link href="/2023/04/17/flutter/study_13th/week2/"/>
      <url>/2023/04/17/flutter/study_13th/week2/</url>
      
        <content type="html"><![CDATA[<h1 id="13기-2주차-강민"><a href="#13기-2주차-강민" class="headerlink" title="13기 2주차 강민"></a>13기 2주차 강민</h1><ul><li><input checked="" disabled="" type="checkbox"> 1주차: 프로젝트 및 자기 소개</li><li><input checked="" disabled="" type="checkbox"> 2주차: 프로필 소개 화면 Flutter Web으로 만들어보기</li><li><input disabled="" type="checkbox"> 3주차: 링크풀 테스트 코드 작성 및 리팩토링 ← 프로필 소개 화면 Flutter Web으로 만들어보기</li><li><input disabled="" type="checkbox"> 4주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input disabled="" type="checkbox"> 5주차: 링크풀 테스트 코드 작성 및 리팩토링</li><li><input disabled="" type="checkbox"> 6주차: 이미지 Custom Crop Plugin 개발</li><li><input disabled="" type="checkbox"> 7주차: 이미지 Custom Crop Plugin 개발</li><li><input disabled="" type="checkbox"> 8주차: 이미지 Custom Crop Plugin 개발</li></ul><p><a href="https://boring-km.github.io/2023/04/10/flutter/study_13th/week1/">13기 1주차 강민</a></p><h2 id="일정-변경사항"><a href="#일정-변경사항" class="headerlink" title="일정 변경사항"></a>일정 변경사항</h2><p>2주 연속으로 개발 기간으로 잡기에 아깝기도 해서 프로필 내용은 천천히 검토하면서 채우도록 하고, 다음주부터 링크풀 리팩토링 시작하기로 함.</p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/boring-km/profile">https://github.com/boring-km/profile</a></p><ul><li>Flutter Web 프로젝트</li><li>상세 내역은 markdown으로 작성해서 파일 내용만 바꿔도 업데이트 될 수 있도록 구현</li><li>github page로 배포 (아래는 github workflow)</li></ul><p><a href="https://github.com/boring-km/profile/blob/master/.github/workflows/workflow.yml">profile&#x2F;workflow.yml at master · boring-km&#x2F;profile</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Profile</span> <span class="string">Web</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Web</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">my_secret:</span> <span class="string">$</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">subosito/flutter-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">flutter-version:</span> <span class="string">&#x27;3.7.11&#x27;</span></span><br><span class="line">          <span class="attr">channel:</span> <span class="string">&#x27;stable&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">flutter</span> <span class="string">--version</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">flutter</span> <span class="string">config</span> <span class="string">--enable-web</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">flutter</span> <span class="string">pub</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">flutter</span> <span class="string">build</span> <span class="string">web</span> <span class="string">--release</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # 2. change path to [existed lib/main.dart path]/build/web</span></span><br><span class="line"><span class="string">          cd ./build/web</span></span><br><span class="line"><span class="string">          pwd</span></span><br><span class="line"><span class="string">          git init</span></span><br><span class="line"><span class="string">          git config --global user.email kms0644804@naver.com</span></span><br><span class="line"><span class="string">          git config --global user.name boring-km</span></span><br><span class="line"><span class="string">          git status</span></span><br><span class="line"><span class="string">          git remote add origin https://$&#123;&#123;secrets.commit_secret&#125;&#125;@github.com/boring-km/profile.git </span></span><br><span class="line"><span class="string">          git checkout -b gh-pages</span></span><br><span class="line"><span class="string">          git add --all</span></span><br><span class="line"><span class="string">          git commit -m &quot;update&quot;</span></span><br><span class="line"><span class="string">          git push origin gh-pages -f</span></span><br></pre></td></tr></table></figure><h2 id="known-issue-Flutter-Web-amp-SEO-Accessibility"><a href="#known-issue-Flutter-Web-amp-SEO-Accessibility" class="headerlink" title="known issue? - Flutter Web &amp; SEO (Accessibility)"></a>known issue? - Flutter Web &amp; SEO (Accessibility)</h2><ul><li>flutter web에서 SEO(검색 엔진 최적화) 이슈가 가장 흔한 이슈로 알고 있는데, flutter도 많이 발전한 만큼 방법이 생겼지 않을까 해서 찾아봤다.</li><li>이전 Flutter에서는 Semantics 위젯으로 감싸야만 접근이 가능했던 것 같은데, <strong>지금은 굳이 Semantics 위젯을 작성하지 않아도 가능했다.</strong></li></ul><p><a href="https://medium.com/flutter/going-deeper-with-flutters-web-support-66d7ad95eb52">Going deeper with Flutter’s web support</a></p><ul><li>참고 글 - html처럼 inspecting 가능했음</li></ul><p><img src="/images/flutter/study_13th/week2/example.png" alt="Untitled"></p><h3 id="How-to-2가지-방법"><a href="#How-to-2가지-방법" class="headerlink" title="How to? (2가지 방법)"></a>How to? (2가지 방법)</h3><ul><li>우선 flutter web 빌드 할 때 web-render 옵션을 html로 설정해야 한다!</li><li>명령어로 실행&#x2F;빌드할 때 설정하는 옵션과 Runtime에서 설정하는 옵션이 있다.</li><li>실행 옵션을 간편하게 하기 위해 런타임 옵션으로 설정하고 진행한다. (index.html에서 아래 내용처럼 수정하면 된다.)</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> useHtml = <span class="comment">// ...</span></span><br><span class="line">_flutter.<span class="property">loader</span>.<span class="title function_">loadEntrypoint</span>(&#123;</span><br><span class="line">  <span class="attr">onEntrypointLoaded</span>: <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">engineInitializer</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> config = &#123;</span><br><span class="line">      <span class="attr">renderer</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> appRunner = <span class="keyword">await</span> engineInitializer.<span class="title function_">initializeEngine</span>(config);</span><br><span class="line">    <span class="keyword">await</span> appRunner.<span class="title function_">runApp</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://docs.flutter.dev/development/platform-integration/web/renderers">Web renderers</a></p><ul><li>그리고 여기서 상황에 맞게 변경하면 될 것 같다.</li><li>이왕이면 공식문서에서 제공하는 2번의 방식을 사용하는 게 낫겠다.</li></ul><ol><li>JavaScript 함수 호출, Console에서 입력해서 활성화 가능</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setDebuggable</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;flt-glass-pane&#x27;</span>).<span class="property">shadowRoot</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;flt-semantics-placeholder&#x27;</span>).<span class="title function_">click</span>(&#123;<span class="attr">force</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>flutter에서 semantic enable 하기 (<a href="https://docs.flutter.dev/development/accessibility-and-localization/accessibility?tab=browsers#screen-readers">관련문서</a>)</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RendererBinding.instance.setSemanticsEnabled(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h2 id="사소한-이슈"><a href="#사소한-이슈" class="headerlink" title="사소한 이슈"></a>사소한 이슈</h2><p>Flutter Web으로 로컬에서 Chrome으로 Run 하면 문제없이 화면이 보이는데, github page로 배포하면 화면이 안보이는 현상 있음</p><ul><li>Inspector를 통해 오류를 확인하면 _flutter 객체를 javascript에서 찾지 못해서 발생.</li></ul><p><a href="https://stackoverflow.com/questions/72833719/getting-flutter-is-undefined-in-flutter-web-only-in-production">Getting _flutter is undefined in flutter web, only in production</a></p><p><a href="https://github.com/flutter/flutter/issues/107448">https://github.com/flutter/flutter/issues/107448</a></p><base *href*="$FLUTTER_BASE_HREF"> → <base *href*="/profile/"><h2 id="배포된-Web-Url"><a href="#배포된-Web-Url" class="headerlink" title="배포된 Web Url"></a>배포된 Web Url</h2><p><a href="https://boring-km.github.io/profile">boring-km profile</a></p><h2 id="회고"><a href="#회고" class="headerlink" title="회고"></a>회고</h2><ul><li>지난 과거를 되돌아보면서 이력서 비스무레한 내용을 적다보니 후회가 많이 남았습니다. 더 열심히 살아야겠어요.</li><li>Web으로 화면 크기를 큰 간격으로 조절하다보니 앱으로 개발하면서는 생각지못한 영역에서 Overflow가 발생하는 걸 볼 수 있었어요.</li><li>Flutter Web에서 모바일 웹인지 데스크탑 웹인지 구별하는 방법도 있을까 해서 찾아보니까 방법이 있네요</li></ul><p><a href="https://github.com/flutter/flutter/issues/80505#issuecomment-821817704">Detect whether flutter web app is running on desktop or mobile · Issue #80505 · flutter&#x2F;flutter</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/foundation.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">final</span> isWebMobile = kIsWeb &amp;&amp;</span><br><span class="line"> (defaultTargetPlatform == TargetPlatform.iOS ||</span><br><span class="line"> defaultTargetPlatform == TargetPlatform.android);</span><br></pre></td></tr></table></figure><h2 id="질문"><a href="#질문" class="headerlink" title="질문"></a>질문</h2><ul><li>처음에 화면 로딩할 때 Text 값이 잠깐동안 X 모양으로 보였다가 글자가 나타나는데 이유를 아시는 분 계실까요?</li><li>flutter web으로 개발하시면서 모바일 웹 따로 데스크탑 따로 UI 구성하시나요..?</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter-study-13th </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 중급반 스터디 13기 1주차</title>
      <link href="/2023/04/10/flutter/study_13th/week1/"/>
      <url>/2023/04/10/flutter/study_13th/week1/</url>
      
        <content type="html"><![CDATA[<h1 id="13기-1주차-강민"><a href="#13기-1주차-강민" class="headerlink" title="13기 1주차 강민"></a>13기 1주차 강민</h1><p><a href="https://github.com/boring-km">boring-km - Overview</a></p><h2 id="하는-일"><a href="#하는-일" class="headerlink" title="하는 일"></a>하는 일</h2><p>유아&#x2F;초등용 태블릿 앱을 Flutter와 Android Native로 개발하고 있는 진강민입니다.</p><p>일 시작한지는 3년 정도 되었습니다.. (전에는 서버 개발자였어요)</p><h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><p>Flutter를 처음 접한 시기는 2020년 12월입니다. 원래 Android 개발은 할 줄 알고 있는 상태에서 갖고 있던 맥북을 좀더 적극적으로 활용해보려고 iOS 개발도 해보려다가 크로스플랫폼 개발이 개인 프로젝트 개발 시 생산성이 더 뛰어날 것 같아 선택했습니다.</p><p>작년 여름까지는 거의 회사에서만 사용하거나 개인 프로젝트로만 작업을 해보다가 작년 8월부터 사이드 프로젝트를 팀 단위로 진행하면서 조금 더 알아가려고 하는 단계에 있습니다.</p><h2 id="스터디-지원-동기"><a href="#스터디-지원-동기" class="headerlink" title="스터디 지원 동기"></a>스터디 지원 동기</h2><p>Flutter를 좀 더 지혜롭게 사용하는 방법들을 공유하고, 공유 받고 싶어서 지원했어요 🙂</p><p>아직 경험도 적고 이런 방식으로 스터디 진행하는게 처음이라 어색한 것도 많지만 잘 부탁드려요 ㅎㅎ</p><h2 id="발표-진행-방식"><a href="#발표-진행-방식" class="headerlink" title="발표 진행 방식"></a>발표 진행 방식</h2><p>Notion 이나 Velog를 통해 어느정도 정리된 진행상황 공유하고,</p><p>소스코드를 보여드릴 땐 IntelliJ IDEA에서 작성한 형태로 보여드릴 것 같습니다.</p><p>(추가) 진행하면서 생긴 질문들, 주간 회고</p><h2 id="진행할-프로젝트"><a href="#진행할-프로젝트" class="headerlink" title="진행할 프로젝트"></a>진행할 프로젝트</h2><table><thead><tr><th>Week 1</th><th>프로젝트 및 자기 소개</th></tr></thead><tbody><tr><td>Week 2</td><td>프로필 소개 화면 Flutter Web으로 만들어보기</td></tr><tr><td>Week 3</td><td>프로필 소개 화면 Flutter Web으로 만들어보기</td></tr><tr><td>Week 4</td><td>링크풀 테스트 코드 작성 및 리팩토링</td></tr><tr><td>Week 5</td><td>링크풀 테스트 코드 작성 및 리팩토링</td></tr><tr><td>Week 6</td><td>이미지 Custom Crop Plugin 개발</td></tr><tr><td>Week 7</td><td>이미지 Custom Crop Plugin 개발</td></tr><tr><td>Week 8</td><td>이미지 Custom Crop Plugin 개발</td></tr></tbody></table><h3 id="1-프로필-소개-화면-Flutter-Web으로-만들어보기"><a href="#1-프로필-소개-화면-Flutter-Web으로-만들어보기" class="headerlink" title="1. 프로필 소개 화면 Flutter Web으로 만들어보기"></a>1. 프로필 소개 화면 Flutter Web으로 만들어보기</h3><ul><li>목적: 포트폴리오를 좀 더 세련된(?) 방법으로 표현해보고자 시작해보려고 해요.</li></ul><p>개발 전 Markdown Web에서 로딩하는 예제 샘플: <a href="https://github.com/boring-km/flutter_md_viewer">https://github.com/boring-km/flutter_md_viewer</a></p><p>배포된 테스트 Web 화면: <a href="https://boring-km.github.io/flutter_md_viewer/#/">https://boring-km.github.io/flutter_md_viewer</a></p><h3 id="2-링크풀-테스트-코드-작성"><a href="#2-링크풀-테스트-코드-작성" class="headerlink" title="2. 링크풀 테스트 코드 작성"></a>2. 링크풀 테스트 코드 작성</h3><ul><li><p>목적: 급하게 개발하면서 놓쳐왔던 테스트 코드를 늦게나마 작성해보면서 테스트 코드 작성에 좀 더 익숙해지고, 가능하다면 CI&#x2F;CD 파이프라인에 테스트 커버리지까지 반영할 수 있었으면 좋겠습니다. (이건 희망사항이네요 ㅠㅠ)</p></li><li><p>PlayStore: <a href="https://play.google.com/store/apps/details?id=com.mr.ac_project_app">https://play.google.com/store/apps/details?id=com.mr.ac_project_app</a></p></li><li><p>AppStore: <a href="https://apps.apple.com/us/app/%EB%A7%81%ED%81%AC%ED%92%80-%EC%B2%B4%EA%B3%84%EC%A0%81%EC%9D%B8-%EB%A7%81%ED%81%AC-%EA%B4%80%EB%A6%AC%EC%9D%98-%EC%8B%9C%EC%9E%91/id1644108674">https://apps.apple.com/us/app/링크풀-체계적인-링크-관리의-시작/id1644108674</a></p></li><li><p>Source Code: <a href="https://github.com/Monday-Rocket/ac_project_app">https://github.com/Monday-Rocket/ac_project_app</a></p></li></ul><h3 id="3-이미지-Custom-Crop-Plugin-개발"><a href="#3-이미지-Custom-Crop-Plugin-개발" class="headerlink" title="3. 이미지 Custom Crop Plugin 개발"></a>3. 이미지 Custom Crop Plugin 개발</h3><ul><li>목적: 회사에서 이미지 Crop 기능을 구현하는데 정말 필요로 하는 기능이 없어서 라이브러리로 만들면 좋겠다고 생각했어요</li><li>현재는 직접 프로젝트 내에 구현된 코드만 존재 → Plugin으로 변환 필요 → <a href="http://pub.dev/">Pub.dev</a> 업로드 목표</li><li>CustomPaint를 활용해 선택 영역만 Path로 잘라내서 Canvas, PictureRecorder 등을 활용해 이미지 파일로 만든다.</li><li>정해진 도형 크기를 조절하거나, 직접 선택영역을 그려 그 부분만 Crop 할 수 있도록 한다.</li></ul><p><img src="/images/flutter/study_13th/week1/1.png" alt="1"></p><p><img src="/images/flutter/study_13th/week1/2.png" alt="2"></p><p><img src="/images/flutter/study_13th/week1/3.png" alt="3"></p>]]></content>
      
      
      <categories>
          
          <category> flutter-study-13th </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10장 컴포즈 앱 테스트와 디버깅</title>
      <link href="/2023/04/03/jetpack_compose/chapter10/"/>
      <url>/2023/04/03/jetpack_compose/chapter10/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Just-Android-Compose-Study/JetpackComposeStudy/tree/master/Chapter10">Source Code</a></p><h2 id="환경설정과-테스트-작성"><a href="#환경설정과-테스트-작성" class="headerlink" title="환경설정과 테스트 작성"></a>환경설정과 테스트 작성</h2><p><strong>테스트와 디버깅은 꼭 필요하다.</strong></p><p>중요한 프로그램들이 모두 그래왔듯 결국 내가 개발하는 앱에도 버그가 발생할 것이다.</p><p>개발자로서의 삶을 더욱 윤택하게 만드려면 스스로 테스트 코드를 작성하고 자신의 코드나 다른 사람의 코드를 디버깅하는 데 익숙해야만 한다.</p><blockquote><ul><li>유닛 테스트: 비즈니스 로직이 예상대로 동작함을 확인해야만 한다.</li><li>통합 테스트: 앱의 모든 구성 요소가 적절히 통합되어 있는지 확인한다. ex) 앱이 하는 일에 따라 원격 서비스에 접근, DB와 연동, 디바이스에 파일을 읽고 쓰는 동작을<br>  포함할 수 있다.</li><li>UI 테스트: UI가 정확히 구현되었는지 테스트한다. 지원하는 모든 화면 크기에 대해 모든 UI 요소가 잘 나타나는지, 항상 적절한 값을 보여주는지, 버튼을 클릭하거나<br>  슬라이더를 이동하는 등의 상호작용이 의도된 함수를 호출시키는지? 앱의 모든 영역이 접근성을 가지는 지 확인해야 한다.</li></ul></blockquote><p><strong>테스트 피라미드</strong>: Unit Test - 통합 테스트 - UI 테스트로 이어지는 구조</p><h3 id="유닛-테스트-구현"><a href="#유닛-테스트-구현" class="headerlink" title="유닛 테스트 구현"></a>유닛 테스트 구현</h3><ul><li>Unit은 작고 고립된 코드 조각으로, 프로그래밍 언어에 따라 일반적으로 function, method, sub routine, property가 이에 해당한다.</li><li>Test class는 하나 이상의 테스트를 포함한다.</li><li>테스트는 잘 정의된 상황이나 조건 또는 기준이 포함되어 있는지를 확인한다.</li><li>테스트는 격리되어야 한다.</li><li><strong>테스트는 이전 테스트에 의존해서는 안 된다.</strong></li><li>**단언문(assertion)**은 예상되는 행위를 나타낸다. 단언문을 충족시키지 못하면 테스트는 실패한다.</li></ul><h3 id="Composable-함수-테스트"><a href="#Composable-함수-테스트" class="headerlink" title="Composable 함수 테스트"></a>Composable 함수 테스트</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SimpleButtonDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> a = stringResource(id = R.string.a)</span><br><span class="line">    <span class="keyword">val</span> b = stringResource(id = R.string.b)</span><br><span class="line">    <span class="keyword">var</span> text <span class="keyword">by</span> remember &#123; mutableStateOf(a) &#125;</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier.fillMaxSize(),</span><br><span class="line">        contentAlignment = Alignment.Center</span><br><span class="line">    ) &#123;</span><br><span class="line">        Button(onClick = &#123;</span><br><span class="line">            text = <span class="keyword">if</span> (text == a) b <span class="keyword">else</span> a</span><br><span class="line">        &#125;) &#123;</span><br><span class="line">            Text(text = text)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UI 테스트 코드는 아래에서</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SimpleInstrumentedTest.kt</span></span><br><span class="line"><span class="meta">@RunWith(AndroidJUnit4::class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleInstrumentedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@get:Rule</span></span><br><span class="line">    <span class="keyword">var</span> name = TestName()   <span class="comment">// 테스트 메서드 내부에서 현재 테스트 이름을 제공할 수 있게 해준다.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    createComposeRule: ComposeContentTestRule 구현체, AndroidComposeTestRule&lt;ComponentActivity&gt;</span></span><br><span class="line"><span class="comment">    createAndroidComposeRule: ComponentActivity 이외의 액티비티 클래스용 AndroidComposeTestRule을 생성할 수 있게 해준다.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@get:Rule</span></span><br><span class="line">    <span class="keyword">val</span> rule: ComposeContentTestRule = createComposeRule()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 테스트할 Composable 함수 로딩</span></span><br><span class="line">        <span class="comment">// 테스트마다 정확히 한 번만 호출되어야 한다.</span></span><br><span class="line">        rule.setContent &#123;</span><br><span class="line">            SimpleButtonDemo()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testInitialLetterIsA</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// onNodeWithText: finder라 불린다. 시맨틱 노드에서 동작한다.</span></span><br><span class="line">        <span class="comment">// 특정 컴포저블이 기대한 대로 나타나거나 동작하는지 테스트하려면 컴포즈 계층 구조의 모든 자식 사이에서 해당 컴포저블을 찾아내야 한다.</span></span><br><span class="line">        <span class="comment">// 여기서 시맨틱 트리가 동작한다. -&gt; UI 계층 구조와 동시에 생성되며 Rule, Text, Action과 같은 속성을 사용해 계층 구조를 설명한다.</span></span><br><span class="line">        rule.onNodeWithText(<span class="string">&quot;A&quot;</span>).assertExists()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testPrintMethodName</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(name.methodName)    <span class="comment">// Logcat에서 testPrintMethodName 확인하면 된다. </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="시맨틱-이해"><a href="#시맨틱-이해" class="headerlink" title="시맨틱 이해"></a>시맨틱 이해</h2><p>교재 내용에서 제대로 동작하지 않는 예제가 있어 수정했다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> A에서_버튼을_누르면_B로_텍스트가_바뀐다<span class="params">()</span></span> &#123;</span><br><span class="line">    rule.onNodeWithText(<span class="string">&quot;A&quot;</span>).performClick()</span><br><span class="line">    rule.onNodeWithText(<span class="string">&quot;B&quot;</span>).assertExists()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>onNode()</code>, <code>onAllNodes()</code> 모두 <strong>finder</strong>로 불리며, 주어진 조건과 일치하는 semantic 노드를 찾아 반환한다.</li></ul><ol><li>“A”가 적혀있는 텍스트를 찾아 클릭을 한다.</li><li>“B”가 적혀있는 텍스트가 존재하는지 확인한다.</li></ol><ul><li>아래는 기존 예제</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> A에서_버튼을_누르면_B로_텍스트가_바뀐다<span class="params">()</span></span> &#123;</span><br><span class="line">    rule.onNodeWithText(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">        .performClick() <span class="comment">// performClick() 이후 assert()가 불가능하다.</span></span><br><span class="line">        .assert(hasText(<span class="string">&quot;B&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="시맨틱-노드로-작업"><a href="#시맨틱-노드로-작업" class="headerlink" title="시맨틱 노드로 작업"></a>시맨틱 노드로 작업</h3><ul><li>시맨틱 노드 로그 출력하기 <code>printToLog(&quot;테스트명&quot;)</code></li><li>이미지 노드 테스트</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ImageDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Image(</span><br><span class="line">        painter = painterResource(id = R.drawable.ic_baseline_airport_shuttle_24),</span><br><span class="line">        contentDescription = stringResource(id = R.string.airport_shuttle),</span><br><span class="line">        contentScale = ContentScale.FillBounds,</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .size(width = <span class="number">128.</span>dp, height = <span class="number">128.</span>dp)</span><br><span class="line">            .background(Color.Blue)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(AndroidJUnit4::class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContentDescriptionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@get:Rule</span></span><br><span class="line">    <span class="keyword">val</span> rule = createComposeRule()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> 공항셔틀을_ContentDescription으로_설정한_이미지의_가로_길이는_128dp다<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> contentDescription = <span class="string">&quot;&quot;</span></span><br><span class="line">        rule.setContent &#123;</span><br><span class="line">            ImageDemo()</span><br><span class="line">            contentDescription = stringResource(id = R.string.airport_shuttle)</span><br><span class="line">        &#125;</span><br><span class="line">        rule.onNodeWithContentDescription(contentDescription)</span><br><span class="line">            .assertWidthIsEqualTo(<span class="number">128.</span>dp)</span><br><span class="line">            .printToLog(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="커스텀-시맨틱-프로퍼티-추가"><a href="#커스텀-시맨틱-프로퍼티-추가" class="headerlink" title="커스텀 시맨틱 프로퍼티 추가"></a>커스텀 시맨틱 프로퍼티 추가</h3><p>테스트에서 추가적인 정보를 노출하고 싶은 경우에는 커스텀 시맨틱 프로퍼티를 생성해 제공할 수 있다.</p><ul><li>요구사항 1: SemanticsPropertyKey를 정의한다.</li><li>요구사항 2: SemanticsPropertyReceiver를 통해 사용할 수 있게 해준다.</li></ul><figure class="highlight plaintext"><figcaption><span>&#123; &#125;``` 블록 내부에서 타입 안정성을 보장받는 상태로 key-value pair 저장이 가능하다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```kotlin</span><br><span class="line">// 1. 사전 정의</span><br><span class="line">val BackgroundColorKey = SemanticsPropertyKey&lt;Color&gt;(&quot;BackgroundColor&quot;)</span><br><span class="line">var SemanticsPropertyReceiver.backgroundColor by BackgroundColorKey</span><br><span class="line"></span><br><span class="line">// 2. Composable 작성</span><br><span class="line">@Composable</span><br><span class="line">fun BoxButtonDemo() &#123;</span><br><span class="line">    var color by remember &#123; mutableStateOf(COLOR1) &#125;</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .testTag(TAG1)</span><br><span class="line">            .semantics &#123; backgroundColor = color &#125;  // 프로퍼티 설정</span><br><span class="line">            .background(color = color),</span><br><span class="line">        contentAlignment = Alignment.Center</span><br><span class="line">    ) &#123;</span><br><span class="line">        Button(onClick = &#123;</span><br><span class="line">            color = if (color == COLOR1)</span><br><span class="line">                COLOR2</span><br><span class="line">            else</span><br><span class="line">                COLOR1</span><br><span class="line">        &#125;) &#123;</span><br><span class="line">            Text(text = stringResource(id = R.string.toggle))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 테스트 코드에서 접근</span></span><br><span class="line"><span class="meta">@RunWith(AndroidJUnit4::class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoxButtonDemoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@get:Rule</span></span><br><span class="line">    <span class="keyword">val</span> rule = createComposeRule()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> 텍스트박스의_배경색이_COLOR1인_노드가_존재한다<span class="params">()</span></span> &#123;</span><br><span class="line">        rule.setContent &#123;</span><br><span class="line">            BoxButtonDemo()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// SemanticsMatcher의 expectValue()와 해당 프로퍼티 key 값을 이용해 값이 동일한지 확인한다.</span></span><br><span class="line">        rule.onNode(SemanticsMatcher.expectValue(BackgroundColorKey, COLOR1)).assertExists()    <span class="comment">// equals가 아닌 일치하는 Node가 있는지 존재 유무를 따짐</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="컴포즈-앱-디버깅"><a href="#컴포즈-앱-디버깅" class="headerlink" title="컴포즈 앱 디버깅"></a>컴포즈 앱 디버깅</h2><p>직접 해보는게 제일 좋을 것 같다.</p><h4 id="추가적인-팁"><a href="#추가적인-팁" class="headerlink" title="추가적인 팁"></a>추가적인 팁</h4><ul><li>커스텀 Modifier를 통한 현재 기본값 출력</li><li>inspectorInfo parameter</li><li>디버그 인스펙터 정보 확인하기</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">isDebugInspectorInfoEnabled = <span class="literal">true</span>  <span class="comment">// InspectableValue.kt 전역변수 설정</span></span><br><span class="line"></span><br><span class="line">Modifier.semantics &#123; backgroundColor = color &#125;.also &#123;</span><br><span class="line">        (it <span class="keyword">as</span> CombinedModifier).run &#123;</span><br><span class="line">            <span class="keyword">val</span> <span class="keyword">inner</span> = <span class="keyword">this</span>.javaClass.getDeclaredField(<span class="string">&quot;inner&quot;</span>)</span><br><span class="line">            <span class="keyword">inner</span>.isAccessible = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">val</span> value = <span class="keyword">inner</span>.<span class="keyword">get</span>(<span class="keyword">this</span>) <span class="keyword">as</span> InspectorValueInfo</span><br><span class="line">            value.inspectableElements.forEach &#123; ve: ValueElement -&gt;</span><br><span class="line">                Log.i(<span class="string">&quot;ValueElement&quot;</span>, <span class="string">&quot;value element: <span class="variable">$ve</span>&quot;</span>) <span class="comment">// 원하는 대로 값을 뽑아 사용 가능</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>그래서 나온 결과는 아래와 같았다.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I/ValueElement: value element: ValueElement(name=mergeDescendants, value=false)</span><br><span class="line">I/ValueElement: value element: ValueElement(name=properties, value=Function1&lt;androidx.compose.ui.semantics.SemanticsPropertyReceiver, kotlin.Unit&gt;)</span><br></pre></td></tr></table></figure><h2 id="요약-및-더-읽을거리"><a href="#요약-및-더-읽을거리" class="headerlink" title="요약 및 더 읽을거리"></a>요약 및 더 읽을거리</h2><ul><li>기본적 테스트 작성법과 디버깅 방법 안내를 받았다.</li><li>구글 Android Compose Test 문서 확인하기</li><li>JUnit, Kotest에 대해 더 알아보기</li><li>테스트 자동화 알아보기</li></ul>]]></content>
      
      
      <categories>
          
          <category> jetpack-compose-study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9장 상호 운용 API 자세히 알아보기</title>
      <link href="/2023/03/28/jetpack_compose/chapter09/"/>
      <url>/2023/03/28/jetpack_compose/chapter09/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Just-Android-Compose-Study/JetpackComposeStudy/tree/master/Chapter09">Source Code</a></p><h2 id="컴포즈-앱에서-뷰-나타내기"><a href="#컴포즈-앱에서-뷰-나타내기" class="headerlink" title="컴포즈 앱에서 뷰 나타내기"></a>컴포즈 앱에서 뷰 나타내기</h2><h3 id="컴포즈-앱에-커스텀-컴포넌트-추가"><a href="#컴포즈-앱에-커스텀-컴포넌트-추가" class="headerlink" title="컴포즈 앱에 커스텀 컴포넌트 추가"></a>컴포즈 앱에 커스텀 컴포넌트 추가</h3><p>QRCode 스캔하는 ZXing 라이브러리를 AndroidView를 이용해 ComposeApp에서 사용해보는 예제</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZxingDemoActivity</span> : <span class="type">ComponentActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> barcodeView: DecoratedBarcodeView</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> text = MutableLiveData(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> requestPermission =</span><br><span class="line">        registerForActivityResult(ActivityResultContracts.RequestPermission()) &#123; isGranted -&gt;</span><br><span class="line">            <span class="keyword">if</span> (isGranted) &#123;</span><br><span class="line">                barcodeView.resume()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint(<span class="string">&quot;InflateParams&quot;</span>)</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        <span class="comment">// 1: layout.xml inflate</span></span><br><span class="line">        <span class="keyword">val</span> root = layoutInflater.inflate(R.layout.layout, <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2: barcodeView 초기화</span></span><br><span class="line">        barcodeView = root.findViewById(R.id.barcode_scanner)</span><br><span class="line">        <span class="keyword">val</span> formats = listOf(BarcodeFormat.QR_CODE, BarcodeFormat.CODE_39)</span><br><span class="line">        barcodeView.barcodeView.decoderFactory = DefaultDecoderFactory(formats)</span><br><span class="line">        barcodeView.initializeFromIntent(intent)</span><br><span class="line">        <span class="keyword">val</span> callback = <span class="keyword">object</span> : BarcodeCallback &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">barcodeResult</span><span class="params">(result: <span class="type">BarcodeResult</span>)</span></span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (result.text == <span class="literal">null</span> || result.text == text.value) &#123;</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                text.value = result.text</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3: 지속적인 스캔 실시</span></span><br><span class="line">        barcodeView.decodeContinuous(callback)</span><br><span class="line"></span><br><span class="line">        setContent &#123;</span><br><span class="line">            <span class="keyword">val</span> state = text.observeAsState()</span><br><span class="line">            state.value?.let &#123;</span><br><span class="line">                ZxingDemo(root, it)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ZxingDemo</span><span class="params">(root: <span class="type">View</span>, value: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier.fillMaxSize(),</span><br><span class="line">        contentAlignment = Alignment.TopCenter</span><br><span class="line">    ) &#123;</span><br><span class="line">        AndroidView(modifier = Modifier.fillMaxSize(),</span><br><span class="line">            factory = &#123;</span><br><span class="line">                root</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">if</span> (value.isNotBlank()) &#123;</span><br><span class="line">            Text(</span><br><span class="line">                modifier = Modifier.padding(<span class="number">16.</span>dp),</span><br><span class="line">                text = value,</span><br><span class="line">                color = Color.White,</span><br><span class="line">                style = MaterialTheme.typography.h4</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>factory 블록은 구성될 뷰를 얻기 위해 정확히 한 번만 호출된다.<br>항상 UI 스레드에서 호출될 것이기 때문에 필요에 따라 View property 설정이 가능하다.</li></ul><h3 id="AndroidViewBinding-으로-View-Layer-구조-Inflating"><a href="#AndroidViewBinding-으로-View-Layer-구조-Inflating" class="headerlink" title="AndroidViewBinding()으로 View Layer 구조 Inflating"></a>AndroidViewBinding()으로 View Layer 구조 Inflating</h3><ul><li>ComposeActivity에서 ViewActivity</li><li>Compose여도 xml 파일과 ViewBinding</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComposeActivity</span> : <span class="type">ComponentActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> viewModel: MyViewModel <span class="keyword">by</span> viewModels()  <span class="comment">// ViewModel 초기화</span></span><br><span class="line">        viewModel.setSliderValue(intent.getFloatExtra(KEY, <span class="number">0F</span>)) <span class="comment">// Slider 값 초기화</span></span><br><span class="line">        setContent &#123;</span><br><span class="line">            ViewIntegrationDemo(viewModel) &#123;</span><br><span class="line">                <span class="comment">// onClick</span></span><br><span class="line">                <span class="comment">// ComposeActivity -&gt; ViewActivity</span></span><br><span class="line">                <span class="keyword">val</span> i = Intent(</span><br><span class="line">                    <span class="keyword">this</span>,</span><br><span class="line">                    ViewActivity::<span class="keyword">class</span>.java</span><br><span class="line">                )</span><br><span class="line">                i.putExtra(KEY, viewModel.sliderValue.value)    <span class="comment">// 현재 sliderValue</span></span><br><span class="line">                startActivity(i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExperimentalMaterial3Api</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ViewIntegrationDemo</span><span class="params">(viewModel: <span class="type">MyViewModel</span>, onClick: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> sliderValueState = viewModel.sliderValue.observeAsState()</span><br><span class="line">    Scaffold(modifier = Modifier.fillMaxSize(),</span><br><span class="line">        topBar = &#123;</span><br><span class="line">            TopAppBar(title =</span><br><span class="line">            &#123;</span><br><span class="line">                Text(text = stringResource(id = R.string.compose_activity))</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;) &#123; padding -&gt;</span><br><span class="line">        Column(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .fillMaxSize()</span><br><span class="line">                .padding(padding)</span><br><span class="line">                .padding(<span class="number">16.</span>dp),</span><br><span class="line">            horizontalAlignment = Alignment.CenterHorizontally,</span><br><span class="line">            verticalArrangement = Arrangement.Center</span><br><span class="line">        ) &#123;</span><br><span class="line">            Slider(</span><br><span class="line">                modifier = Modifier.fillMaxWidth(),</span><br><span class="line">                onValueChange = &#123;</span><br><span class="line">                    viewModel.setSliderValue(it)</span><br><span class="line">                &#125;,</span><br><span class="line">                value = sliderValueState.value ?: <span class="number">0F</span></span><br><span class="line">            )</span><br><span class="line">            <span class="comment">// AndroidViewBinding 사용</span></span><br><span class="line">            AndroidViewBinding(</span><br><span class="line">                modifier = Modifier.fillMaxWidth(),</span><br><span class="line">                factory = CustomBinding::inflate</span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="comment">// custom.xml 안에 있는 textView, button</span></span><br><span class="line">                textView.text = sliderValueState.value.toString()</span><br><span class="line">                button.setOnClickListener &#123;</span><br><span class="line">                    onClick()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.textview.MaterialTextView</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/textView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span> <span class="attr">android:layout_height</span>=<span class="string">&quot;64dp&quot;</span> <span class="attr">android:background</span>=<span class="string">&quot;?colorSecondary&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span> <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span> <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.button.MaterialButton</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;16dp&quot;</span> <span class="attr">android:text</span>=<span class="string">&quot;@string/view_activity&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span> <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@id/textView&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>반대로 ViewActivity에서는 기존 코드처럼 ViewBinding을 사용하고 ComposeView를 사용해 Composable 함수를 불러온다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> KEY = <span class="string">&quot;key&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: LayoutBinding</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        binding = LayoutBinding.inflate(layoutInflater)</span><br><span class="line">        setContentView(binding.root)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> viewModel: MyViewModel <span class="keyword">by</span> viewModels()  <span class="comment">// ViewModel 초기화</span></span><br><span class="line">        viewModel.setSliderValue(intent.getFloatExtra(KEY, <span class="number">0F</span>)) <span class="comment">// Slider 값 초기화</span></span><br><span class="line"></span><br><span class="line">        viewModel.sliderValue.observe(<span class="keyword">this</span>) &#123;<span class="comment">// ViewModel 내 sliderValue 값 observing</span></span><br><span class="line">            binding.slider.value = it</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// slider 값 ViewModel 내 sliderValue에 반영</span></span><br><span class="line">        binding.slider.addOnChangeListener &#123; _, value, _ -&gt; viewModel.setSliderValue(value) &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// layout에서 ComposeView 사용</span></span><br><span class="line">        binding.composeView.run &#123;</span><br><span class="line">            setViewCompositionStrategy(ViewCompositionStrategy.DisposeOnDetachedFromWindow)</span><br><span class="line">            setContent &#123;</span><br><span class="line">                <span class="keyword">val</span> sliderValue = viewModel.sliderValue.observeAsState()</span><br><span class="line">                sliderValue.value?.let &#123;</span><br><span class="line">                    <span class="comment">// ViewActivity -&gt; ComposeActivity</span></span><br><span class="line">                    ComposeDemo(it) &#123;   <span class="comment">// 버튼 클릭 시 동작</span></span><br><span class="line">                        <span class="keyword">val</span> i = Intent(</span><br><span class="line">                            context,</span><br><span class="line">                            ComposeActivity::<span class="keyword">class</span>.java</span><br><span class="line">                        )</span><br><span class="line">                        i.putExtra(KEY, it)</span><br><span class="line">                        startActivity(i)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposeDemo</span><span class="params">(value: <span class="type">Float</span>, onClick: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize(),</span><br><span class="line">        horizontalAlignment = Alignment.CenterHorizontally,</span><br><span class="line">        verticalArrangement = Arrangement.Center</span><br><span class="line">    ) &#123;</span><br><span class="line">        Box(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .fillMaxWidth()</span><br><span class="line">                .background(MaterialTheme.colorScheme.secondary)</span><br><span class="line">                .height(<span class="number">64.</span>dp),</span><br><span class="line">            contentAlignment = Alignment.Center</span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(</span><br><span class="line">                text = value.toString()</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        Button(</span><br><span class="line">            onClick = onClick,  <span class="comment">// 버튼 클릭 시 ComposeActivity 띄우기</span></span><br><span class="line">            modifier = Modifier.padding(top = <span class="number">16.</span>dp)</span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(text = stringResource(id = R.string.compose_activity))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> <span class="attr">android:padding</span>=<span class="string">&quot;16dp&quot;</span> <span class="attr">tools:context</span>=<span class="string">&quot;.ViewActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.slider.Slider</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/slider&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;16dp&quot;</span> <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span> <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.compose.ui.platform.ComposeView</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/compose_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span> <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span> <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@id/slider&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="View와-Composable-Function-간-데이터-공유"><a href="#View와-Composable-Function-간-데이터-공유" class="headerlink" title="View와 Composable Function 간 데이터 공유"></a>View와 Composable Function 간 데이터 공유</h2><ul><li>위 예시 코드에서 보았던 것처럼 ViewModel을 이용해 데이터를 담았다가 state형태로 가져와 사용하면서 View의 데이터를 ViewModel에, ViewModel<br>데이터를 Composable 함수에 담는 형식으로 구현한다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. View -&gt; ViewModel </span></span><br><span class="line">binding.slider.addOnChangeListener &#123; _, value, _ -&gt; viewModel.setSliderValue(value) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// layout에서 ComposeView 사용</span></span><br><span class="line">binding.composeView.run &#123;</span><br><span class="line">    setViewCompositionStrategy(ViewCompositionStrategy.DisposeOnDetachedFromWindow)</span><br><span class="line">    setContent &#123;</span><br><span class="line">        <span class="comment">// 2. ViewModel -&gt; Composable</span></span><br><span class="line">        <span class="keyword">val</span> sliderValue = viewModel.sliderValue.observeAsState()</span><br><span class="line">        sliderValue.value?.let &#123;</span><br><span class="line">            ComposeDemo(it) &#123;</span><br><span class="line">                <span class="keyword">val</span> i = Intent(</span><br><span class="line">                    context,</span><br><span class="line">                    ComposeActivity::<span class="keyword">class</span>.java</span><br><span class="line">                )</span><br><span class="line">                i.putExtra(KEY, it)</span><br><span class="line">                startActivity(i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sliderValueState = viewModel.sliderValue.observeAsState()</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AndroidViewBinding 사용</span></span><br><span class="line">AndroidViewBinding(</span><br><span class="line">  modifier = Modifier.fillMaxWidth(),</span><br><span class="line">  factory = CustomBinding::inflate</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="comment">// Compose -&gt; ViewModel 내부의 sliderValueState -&gt; View</span></span><br><span class="line">  textView.text = sliderValueState.value.toString()</span><br><span class="line">  button.setOnClickListener &#123;</span><br><span class="line">    onClick()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="뷰-계층-구조에-컴포저블-임베디드"><a href="#뷰-계층-구조에-컴포저블-임베디드" class="headerlink" title="뷰 계층 구조에 컴포저블 임베디드"></a>뷰 계층 구조에 컴포저블 임베디드</h2><p>이미 위에서 ComposeView에 대해 보고 왔다.</p><p><code>androidx.compose.ui.platform.ComposeView</code>를 통해 가능하다.</p><p>setViewCompositionStrategy(): Composition(구성) 호출 전략 설정 <a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/platform/ViewCompositionStrategy">ViewCompositionStrategy</a></p><p>교재에서 정리해준 레이아웃에 Compose Layer 구조를 포함시키기 위해 알아야 하는 단계는 아래와 같다.</p><ul><li>layout xml에 <code>androidx.compose.ui.platform.ComposeView</code> 추가</li><li>layout이 출력되는 위치에 ViewCompositionStrategy를 결정한다.</li><li>setContent { }를 사용해 컨텐츠를 설정한다.</li><li>viewModels()를 호출해 ViewModel 참조를 얻는다.</li><li>관련 View에 Listener를 등록하고 변경할 때 ViewModel을 갱신한다.</li><li>Composable 함수에서는 필요에 따라 ViewModel 프로퍼티에서 observeAsState()를 호출해 상태를 생성한다.</li><li>Composable 내부에서는 상황에 맞는 <code>setter</code>를 호출해 ViewModel을 갱신한다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> jetpack-compose-study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8장 애니메이션 적용</title>
      <link href="/2023/03/19/jetpack_compose/chapter08/"/>
      <url>/2023/03/19/jetpack_compose/chapter08/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Just-Android-Compose-Study/JetpackComposeStudy/tree/master/Chapter08">Source Code</a></p><h2 id="애니메이션을-사용한-상태-변화-시각화"><a href="#애니메이션을-사용한-상태-변화-시각화" class="headerlink" title="애니메이션을 사용한 상태 변화 시각화"></a>애니메이션을 사용한 상태 변화 시각화</h2><p>버튼을 클릭하면 상태를 변화시켜 박스의 색상을 빨간색과 파란색으로 전환하는 예제</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">StateChangeDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> toggled <span class="keyword">by</span> remember &#123;</span><br><span class="line">        mutableStateOf(<span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> color = <span class="keyword">if</span> (toggled)</span><br><span class="line">        Color.Blue</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Color.Red</span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .padding(<span class="number">16.</span>dp),</span><br><span class="line">        horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line">    ) &#123;</span><br><span class="line">        Button(onClick = &#123;</span><br><span class="line">            toggled = !toggled</span><br><span class="line">        &#125;) &#123;</span><br><span class="line">            Text(</span><br><span class="line">                stringResource(R.string.toggle)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        Box(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .padding(top = <span class="number">32.</span>dp)</span><br><span class="line">                .background(color = color)</span><br><span class="line">                .size(<span class="number">128.</span>dp)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="한-가지-값을-변경하는-애니메이션"><a href="#한-가지-값을-변경하는-애니메이션" class="headerlink" title="한 가지 값을 변경하는 애니메이션"></a>한 가지 값을 변경하는 애니메이션</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> color <span class="keyword">by</span> animateColorAsState(</span><br><span class="line">    targetValue = <span class="keyword">if</span> (toggled)</span><br><span class="line">        Color.Blue</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Color.Red,</span><br><span class="line">    animationSpec = tween(durationMillis = <span class="number">500</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><code>animateColorAsState()</code>을 통해 색 변경 부분을 애니메이션으로 부드럽게 전환한다.</li><li>tween 애니메이션을 사용해봤다.</li></ul><h3 id="여러-값을-변경하는-애니메이션"><a href="#여러-값을-변경하는-애니메이션" class="headerlink" title="여러 값을 변경하는 애니메이션"></a>여러 값을 변경하는 애니메이션</h3><p>상태가 변경됐을 때 한번에 여러 값에 애니메이션 적용하기</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MultipleValuesAnimationDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> toggled <span class="keyword">by</span> remember &#123;</span><br><span class="line">        mutableStateOf(<span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> transition = updateTransition(</span><br><span class="line">        targetState = toggled,  <span class="comment">// 이 상태값이 변하면 transition 작동</span></span><br><span class="line">        label = <span class="string">&quot;toggledTransition&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">val</span> borderWidth <span class="keyword">by</span> transition.animateDp(label = <span class="string">&quot;borderWidthTransition&quot;</span>) &#123; state -&gt;</span><br><span class="line">        <span class="keyword">if</span> (state)</span><br><span class="line">            <span class="number">10.</span>dp</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="number">1.</span>dp</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 상태 값에 따라 animate</span></span><br><span class="line">    <span class="keyword">val</span> degrees <span class="keyword">by</span> transition.animateFloat(label = <span class="string">&quot;degreesTransition&quot;</span>) &#123; state -&gt;</span><br><span class="line">        <span class="keyword">if</span> (state) -<span class="number">360F</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="number">0F</span></span><br><span class="line">    &#125;</span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .padding(<span class="number">16.</span>dp),</span><br><span class="line">        horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line">    ) &#123;</span><br><span class="line">        Button(onClick = &#123;</span><br><span class="line">            toggled = !toggled  <span class="comment">// 상태 변경</span></span><br><span class="line">        &#125;) &#123;</span><br><span class="line">            Text(</span><br><span class="line">                stringResource(R.string.toggle)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        Box(</span><br><span class="line">            contentAlignment = Alignment.Center,</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .padding(top = <span class="number">32.</span>dp)</span><br><span class="line">                .border(</span><br><span class="line">                    width = borderWidth,</span><br><span class="line">                    color = Color.Black</span><br><span class="line">                )</span><br><span class="line">                .size(<span class="number">128.</span>dp)</span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(</span><br><span class="line">                text = stringResource(id = R.string.app_name),</span><br><span class="line">                modifier = Modifier.rotate(degrees = degrees)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="애니메이션을-사용해-UI-요소를-노출하거나-숨기기"><a href="#애니메이션을-사용해-UI-요소를-노출하거나-숨기기" class="headerlink" title="애니메이션을 사용해 UI 요소를 노출하거나 숨기기"></a>애니메이션을 사용해 UI 요소를 노출하거나 숨기기</h2><ul><li>필요한 데이터만 보여주고 가리기</li></ul><h3 id="AnimatedVisibility-의-이해"><a href="#AnimatedVisibility-의-이해" class="headerlink" title="AnimatedVisibility()의 이해"></a>AnimatedVisibility()의 이해</h3><ul><li>좌측에서 <code>slideInHorizontally()</code>으로 부드럽게 이동하면서 나오다가 <code>fadeOut()</code>으로 투명도 올리면서 사라지기</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">AnimatedVisibilityDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> visible <span class="keyword">by</span> remember &#123;</span><br><span class="line">        mutableStateOf(<span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .padding(<span class="number">16.</span>dp),</span><br><span class="line">        horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line">    ) &#123;</span><br><span class="line">        Button(onClick = &#123;</span><br><span class="line">            visible = !visible</span><br><span class="line">        &#125;) &#123;</span><br><span class="line">            Text(</span><br><span class="line">                stringResource(</span><br><span class="line">                    id = <span class="keyword">if</span> (visible)</span><br><span class="line">                        R.string.hide</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        R.string.show</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        AnimatedVisibility(</span><br><span class="line">            visible = visible,</span><br><span class="line">            enter = slideInHorizontally(initialOffsetX = &#123; -it &#125;),</span><br><span class="line">            exit = fadeOut(animationSpec = tween(durationMillis = <span class="number">300</span>))</span><br><span class="line">        ) &#123;</span><br><span class="line">            Box(</span><br><span class="line">                modifier = Modifier</span><br><span class="line">                    .padding(top = <span class="number">32.</span>dp)</span><br><span class="line">                    .background(color = Color.Red)</span><br><span class="line">                    .size(<span class="number">128.</span>dp)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="크기-변경-애니메이션"><a href="#크기-변경-애니메이션" class="headerlink" title="크기 변경 애니메이션"></a>크기 변경 애니메이션</h3><ul><li><code>Slider()</code> 값에 따라 <code>Text()</code>의 maxLine 값과 fontSize가 동적으로 변하는 예제 (교재보다 좀더 부드럽게 해봄)</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SizeChangeAnimationDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> size <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="number">1F</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> transition = updateTransition(</span><br><span class="line">        targetState = size,  <span class="comment">// 이 상태값이 변하면 transition 작동</span></span><br><span class="line">        label = <span class="string">&quot;sizeTransition&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> fontSize <span class="keyword">by</span> transition.animateFloat(label = <span class="string">&quot;text&quot;</span>) &#123; state -&gt;</span><br><span class="line">        state</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .padding(<span class="number">16.</span>dp)</span><br><span class="line">    ) &#123;</span><br><span class="line">        Slider(</span><br><span class="line">            value = size,</span><br><span class="line">            valueRange = (<span class="number">1F</span>.<span class="number">.4F</span>),</span><br><span class="line">            steps = <span class="number">3</span>,</span><br><span class="line">            onValueChange = &#123;</span><br><span class="line">                size = it</span><br><span class="line">            &#125;,</span><br><span class="line">            modifier = Modifier.padding(bottom = <span class="number">8.</span>dp)</span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = stringResource(id = R.string.lines),</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .fillMaxWidth()</span><br><span class="line">                .background(Color.White)</span><br><span class="line">                .animateContentSize(tween(durationMillis = <span class="number">300</span>)),</span><br><span class="line">            maxLines = fontSize.toInt(), color = Color.Blue</span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = stringResource(id = R.string.app_name),</span><br><span class="line">            fontSize = (fontSize * <span class="number">8</span>).sp</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="시각-효과를-통한-트랜지션-향상"><a href="#시각-효과를-통한-트랜지션-향상" class="headerlink" title="시각 효과를 통한 트랜지션 향상"></a>시각 효과를 통한 트랜지션 향상</h2><ul><li>UI 일부를 전환하고 싶을 때는 <code>Crossfade()</code>를 사용하자</li></ul><h3 id="Crossfade-Composable-function"><a href="#Crossfade-Composable-function" class="headerlink" title="Crossfade Composable function"></a>Crossfade Composable function</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CrossfadeAnimationDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> isFirstScreen <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="literal">true</span>) &#125;</span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize(),</span><br><span class="line">        horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line">    ) &#123;</span><br><span class="line">        Switch(</span><br><span class="line">            checked = isFirstScreen,</span><br><span class="line">            onCheckedChange = &#123;</span><br><span class="line">                isFirstScreen = !isFirstScreen</span><br><span class="line">            &#125;,</span><br><span class="line">            modifier = Modifier.padding(top = <span class="number">16.</span>dp, bottom = <span class="number">16.</span>dp)</span><br><span class="line">        )</span><br><span class="line">        Crossfade(targetState = isFirstScreen, animationSpec = spring(stiffness = Spring.StiffnessVeryLow)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it) &#123;</span><br><span class="line">                Screen(</span><br><span class="line">                    text = stringResource(id = R.string.letter_w),</span><br><span class="line">                    backgroundColor = Color.Gray</span><br><span class="line">                )</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Screen(</span><br><span class="line">                    text = stringResource(id = R.string.letter_i),</span><br><span class="line">                    backgroundColor = Color.LightGray</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Screen</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    text: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    backgroundColor: <span class="type">Color</span> = Color.White</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .background(color = backgroundColor),</span><br><span class="line">        contentAlignment = Alignment.Center</span><br><span class="line">    ) &#123;</span><br><span class="line">        Text(</span><br><span class="line">            text = text,</span><br><span class="line">            style = MaterialTheme.typography.displayLarge</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>교재에서는 <code>Crossfade()</code> 내부에서 사용된 <code>tween()</code> 애니메이션에 대해 설명해주고 있지만 패스</p><h3 id="AnimationSpec-이해"><a href="#AnimationSpec-이해" class="headerlink" title="AnimationSpec 이해"></a>AnimationSpec 이해</h3><ul><li>애니메이션 사양을 정의하기 위한 기본 인터페이스</li><li>애니메이션을 수행할 데이터 타입과 애니메이션 환경설정을 저장한다.</li><li>애니메이션 시스템은 AnimatorVector 인스턴스에서 동작한다.</li><li>여러가지 AnimationSpec의 확장 인터페이스들이 있으니 필요에 따라 사용하면 되겠다.</li><li>무한으로 실행되는 애니메이션 보여주고 끝내기</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">InfiniteRepeatableDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> infiniteTransition = rememberInfiniteTransition()</span><br><span class="line">    <span class="keyword">val</span> degrees <span class="keyword">by</span> infiniteTransition.animateFloat(</span><br><span class="line">        initialValue = <span class="number">0F</span>,</span><br><span class="line">        targetValue = <span class="number">0F</span>,</span><br><span class="line">        animationSpec = infiniteRepeatable(animation = keyframes &#123;</span><br><span class="line">            durationMillis = <span class="number">3000</span></span><br><span class="line">            <span class="number">0F</span> at <span class="number">0</span></span><br><span class="line">            <span class="number">180F</span> at <span class="number">750</span></span><br><span class="line">            <span class="number">359F</span> at <span class="number">750</span> + <span class="number">750</span></span><br><span class="line">            <span class="number">180F</span> at <span class="number">750</span> + <span class="number">750</span> + <span class="number">750</span></span><br><span class="line">            <span class="number">0F</span> at <span class="number">750</span> + <span class="number">750</span> + <span class="number">750</span> + <span class="number">750</span></span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier.fillMaxSize(),</span><br><span class="line">        contentAlignment = Alignment.Center</span><br><span class="line">    ) &#123;</span><br><span class="line">        Text(</span><br><span class="line">            text = stringResource(id = R.string.app_name),</span><br><span class="line">            modifier = Modifier.rotate(degrees = degrees),</span><br><span class="line">            fontSize = (degrees / <span class="number">6</span>).sp</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jetpack-compose-study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7장 팁, 트릭, 모범 사례</title>
      <link href="/2023/03/13/jetpack_compose/chapter07/"/>
      <url>/2023/03/13/jetpack_compose/chapter07/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Just-Android-Compose-Study/JetpackComposeStudy/tree/master/Chapter07">Source Code</a></p><h2 id="상태-유지와-검색"><a href="#상태-유지와-검색" class="headerlink" title="상태 유지와 검색"></a>상태 유지와 검색</h2><ul><li>상태(state): 시간의 흐름에 따라 변하는 앱 데이터</li></ul><h3 id="ViewModel에-객체-주입"><a href="#ViewModel에-객체-주입" class="headerlink" title="ViewModel에 객체 주입"></a>ViewModel에 객체 주입</h3><p>ViewModel은 배후에서 데이터를 어떻게 읽고 쓰는지 관련이 없어야 한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewModelFactory</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> repository: Repository) :</span><br><span class="line">    ViewModelProvider.NewInstanceFactory() &#123;</span><br><span class="line">    <span class="comment">// ViewModel 인스턴스 생성</span></span><br><span class="line">    <span class="comment">// modelClass 새로 생성할 ViewModel</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : ViewModel&gt;</span> <span class="title">create</span><span class="params">(modelClass: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;)</span></span>: T =</span><br><span class="line">        <span class="keyword">if</span> (modelClass.isAssignableFrom(TemperatureViewModel::<span class="keyword">class</span>.java))</span><br><span class="line">            TemperatureViewModel(repository) <span class="keyword">as</span> T</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            DistancesViewModel(repository) <span class="keyword">as</span> T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Factory-사용"><a href="#Factory-사용" class="headerlink" title="Factory 사용"></a>Factory 사용</h3><ul><li>이전 챕터 6장에서 이미 살펴봤다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposeUnitConverterNavHost</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    navController: <span class="type">NavHostController</span>, modifier: <span class="type">Modifier</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> context = LocalContext.current</span><br><span class="line">    <span class="keyword">val</span> factory = ViewModelFactory(Repository(context))</span><br><span class="line">    NavHost(</span><br><span class="line">        navController = navController,</span><br><span class="line">        startDestination = Screens.temperature,</span><br><span class="line">        modifier = modifier</span><br><span class="line">    ) &#123;</span><br><span class="line">        composable(Screens.temperature) &#123;</span><br><span class="line">            TemperatureConverter(</span><br><span class="line">                viewModel = viewModel(factory = factory)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        composable(Screens.distances) &#123;</span><br><span class="line">            DistancesConverter(</span><br><span class="line">                viewModel = viewModel(factory = factory)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>생성자를 호출하는 방식으로 Repository 객체를 ViewModel에 주입</li><li><strong>의존성 주입</strong> 프레임워크에 의존하고 있다면 방식이 많이 바뀐다.</li></ul><h2 id="컴포저블을-반응성-있게-유지"><a href="#컴포저블을-반응성-있게-유지" class="headerlink" title="컴포저블을 반응성 있게 유지"></a>컴포저블을 반응성 있게 유지</h2><p><strong>컴포저블 함수</strong>의 목적이 UI를 선언하고 사용자 인터랙션을 다루는 것임을 항상 명심해야 한다.<br>데이터가 ViewModel 내부에서 유지되고 있다면 Composable은 반드시 ViewModel과 상호작용해야 한다.</p><h3 id="ViewModel-인스턴스와-소통"><a href="#ViewModel-인스턴스와-소통" class="headerlink" title="ViewModel 인스턴스와 소통"></a>ViewModel 인스턴스와 소통</h3><ul><li>ViewModel에 있는 데이터는 observable이어야 한다. (LiveData, MutableLiveData)</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> _temperature: MutableLiveData&lt;String&gt; = MutableLiveData(</span><br><span class="line">    repository.getString(<span class="string">&quot;temperature&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> temperature: LiveData&lt;String&gt;</span><br><span class="line">    <span class="keyword">get</span>() = _temperature</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setTemperature</span><span class="params">(value: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    _temperature.value = value</span><br><span class="line">    repository.putString(<span class="string">&quot;temperature&quot;</span>, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ViewModel 인스턴스는 아래와 같은 방법으로 데이터를 나타낸다.</p><ul><li>public 접근자를 갖는 읽기 전용 property(temperature)</li><li>private 접근자를 갖는 쓰기 가능한 backing variable(_temperature)</li></ul><p>ViewModel 사용 방법에 대해서는 6장에서 이미 해봤다.</p><ul><li><code>viewModel.temperature.observeAsState()</code></li><li>ViewModel을 전달 받아 상태 값을 구하면 된다.</li></ul><h3 id="장기간-동작하는-작업-처리"><a href="#장기간-동작하는-작업-처리" class="headerlink" title="장기간 동작하는 작업 처리"></a>장기간 동작하는 작업 처리</h3><p>섭씨와 화씨를 전환하는 경우는 빠르게 자주 호출되는 경우이고, 입력값에 따라 점점 더 많은 시간을 소모하는 상황도 있다.</p><p>연산에 너무 많은 시간이 소요되어 앱이 응답하지 않는 상황을 막기 위해 <strong>연산</strong>을 <strong>결과를 전달하는 동작</strong>과 분리해야 한다.</p><ol><li>결과를 observable property로 제공한다.</li><li>coroutine, kotlin flow 사용</li><li>연산을 끝내면 result property 갱신한다.</li></ol><p>코루틴을 사용해 observable property를 바꾸는 예제가 있었다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">convert</span><span class="params">()</span></span> &#123;</span><br><span class="line">    getDistanceAsFloat().let &#123;</span><br><span class="line">        viewModelScope.launch &#123;</span><br><span class="line">            _convertedDistance.value = <span class="keyword">if</span> (!it.isNaN())</span><br><span class="line">                <span class="keyword">if</span> (_unit.value == R.string.meter)</span><br><span class="line">                    it * <span class="number">0.00062137F</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    it / <span class="number">0.00062137F</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">Float</span>.NaN</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>반대로 convertedDistance 상태 값을 가져오고 싶을 땐<br><code>val convertedValue by viewModel.convertedDistance.observeAsState()</code></p><p><strong>장시간 동작하는 함수</strong>는 <strong>ViewModel</strong>에서 호출되게 해라 -&gt; 그냥 비동기로 동작하면 다 ViewModel</p><h2 id="부수-효과의-이해"><a href="#부수-효과의-이해" class="headerlink" title="부수 효과의 이해"></a>부수 효과의 이해</h2><h3 id="suspend-함수-호출"><a href="#suspend-함수-호출" class="headerlink" title="suspend 함수 호출"></a>suspend 함수 호출</h3><ul><li>6장에서 사용한 코드에서는 이 코루틴 scope 안에서만 동작하는 중단 함수가 있었다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> snackbarCoroutineScope = rememberCoroutineScope()</span><br><span class="line">snackbarCoroutineScope.launch &#123;</span><br><span class="line">    snackbarHostState.showSnackbar(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LaunchedEffect-DisposableEffect"><a href="#LaunchedEffect-DisposableEffect" class="headerlink" title="LaunchedEffect(), DisposableEffect()"></a>LaunchedEffect(), DisposableEffect()</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">LaunchedEffectDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> clickCount <span class="keyword">by</span> rememberSaveable &#123; mutableStateOf(<span class="number">0</span>) &#125;</span><br><span class="line">    <span class="keyword">var</span> counter <span class="keyword">by</span> rememberSaveable &#123; mutableStateOf(<span class="number">0</span>) &#125;</span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .padding(<span class="number">16.</span>dp),</span><br><span class="line">        horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line">    ) &#123;</span><br><span class="line">        Row &#123;</span><br><span class="line">            Button(onClick = &#123;</span><br><span class="line">                <span class="comment">// 상태 값 갱신 -&gt; LaunchedEffect 동작</span></span><br><span class="line">                clickCount += <span class="number">1</span></span><br><span class="line">            &#125;) &#123;</span><br><span class="line">                Text(</span><br><span class="line">                    text = <span class="keyword">if</span> (clickCount == <span class="number">0</span>)</span><br><span class="line">                        stringResource(id = R.string.start)</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        stringResource(id = R.string.restart)</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">            Spacer(modifier = Modifier.width(<span class="number">8.</span>dp))</span><br><span class="line">            Button(enabled = clickCount &gt; <span class="number">0</span>,</span><br><span class="line">                onClick = &#123;</span><br><span class="line">                    clickCount = <span class="number">0</span>  <span class="comment">// 상태 값 초기화 -&gt; DisposableEffect 동작</span></span><br><span class="line">                &#125;) &#123;</span><br><span class="line">                Text(text = stringResource(id = R.string.stop))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 상태값에 따라 변하는 View가 suspend 함수에 의해 변하고 있다면...!</span></span><br><span class="line">            <span class="keyword">if</span> (clickCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                DisposableEffect(clickCount) &#123;  <span class="comment">// 키가 변경 되었을 때 함수 실행</span></span><br><span class="line">                    println(<span class="string">&quot;init: clickCount is <span class="variable">$clickCount</span>&quot;</span>)</span><br><span class="line">                    onDispose &#123;</span><br><span class="line">                        println(<span class="string">&quot;dispose: clickCount is <span class="variable">$clickCount</span>&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                LaunchedEffect(clickCount) &#123;</span><br><span class="line">                    counter = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> (isActive) &#123;</span><br><span class="line">                        counter += <span class="number">1</span></span><br><span class="line">                        delay(<span class="number">1000</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">&quot;<span class="variable">$counter</span>&quot;</span>,</span><br><span class="line">            style = MaterialTheme.typography.displaySmall</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jetpack-compose-study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6장 조립</title>
      <link href="/2023/03/07/jetpack_compose/chapter06/"/>
      <url>/2023/03/07/jetpack_compose/chapter06/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Just-Android-Compose-Study/JetpackComposeStudy/tree/master/Chapter06">Source Code</a></p><h2 id="컴포즈-앱-스타일링"><a href="#컴포즈-앱-스타일링" class="headerlink" title="컴포즈 앱 스타일링"></a>컴포즈 앱 스타일링</h2><p>Material You (Material 3) 사용하면서 변경사항이 좀 많은 것 같아 레퍼런스 참고</p><blockquote><ul><li><a href="https://m3.material.io/">https://m3.material.io/</a></li><li><a href="https://developer.android.com/jetpack/compose/designsystems/material2-material3?hl=ko">Compose의 Material 2에서 Material 3으로 이전</a></li></ul></blockquote><h3 id="색상-모양-텍스트-스타일-정의"><a href="#색상-모양-텍스트-스타일-정의" class="headerlink" title="색상, 모양, 텍스트 스타일 정의"></a>색상, 모양, 텍스트 스타일 정의</h3><p>예제코드 중 Material3이 반영되지 않은 코드는 변환해가며 작성해봤다.</p><p>부모 테마를 재정의해 테마를 중첩할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MaterialThemeDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    MaterialTheme(</span><br><span class="line">        typography = Typography.copy(<span class="comment">// Typography 재사용</span></span><br><span class="line">            displayLarge = TextStyle(color = Color.Red)</span><br><span class="line">        )</span><br><span class="line">    ) &#123;</span><br><span class="line">        Row(</span><br><span class="line">            Modifier.fillMaxSize(),</span><br><span class="line">            verticalAlignment = Alignment.CenterVertically,</span><br><span class="line">            horizontalArrangement = Arrangement.Center</span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(</span><br><span class="line">                text = <span class="string">&quot;Hello&quot;</span>,</span><br><span class="line">                style = MaterialTheme.typography.displayLarge<span class="comment">// 수정된 MaterialTheme</span></span><br><span class="line">            )</span><br><span class="line">            Spacer(modifier = Modifier.width(<span class="number">2.</span>dp))</span><br><span class="line">            MaterialTheme(</span><br><span class="line">                typography = Typography.copy(<span class="comment">// Typography 재사용</span></span><br><span class="line">                    displayLarge = TextStyle(color = Color.Blue)</span><br><span class="line">                )</span><br><span class="line">            ) &#123;</span><br><span class="line">                Text(</span><br><span class="line">                    text = <span class="string">&quot;Compose&quot;</span>,</span><br><span class="line">                    style = MaterialTheme.typography.displayLarge <span class="comment">// 수정된 MaterialTheme</span></span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="리소스-기반의-테마-사용"><a href="#리소스-기반의-테마-사용" class="headerlink" title="리소스 기반의 테마 사용"></a>리소스 기반의 테마 사용</h3><p>테마 xml에도 컬러 값을 사용하고 컴포즈에서도 컬러 값을 또 선언하지 않으려면 <code>colorResource()</code>을 사용해 리소스 쪽에서만 컬러 값을 정리해두자.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> colorScheme = <span class="keyword">when</span> &#123;</span><br><span class="line">    dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> context = LocalContext.current</span><br><span class="line">        <span class="comment">// Android 31 미만에서는 다크모드 X</span></span><br><span class="line">        <span class="keyword">if</span> (darkTheme) dynamicDarkColorScheme(context) <span class="keyword">else</span> dynamicLightColorScheme(context)</span><br><span class="line">    &#125;</span><br><span class="line">    darkTheme -&gt; DarkColorScheme</span><br><span class="line">    <span class="keyword">else</span> -&gt; LightColorScheme.copy(secondary = colorResource(id = R.color.orange_dark))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SplashScreen을 안드로이드 12 이전에서도 사용할 수 있는 방법도 있다니 찾아보자.</p><h4 id="values-x2F-themes-xml"><a href="#values-x2F-themes-xml" class="headerlink" title="values&#x2F;themes.xml"></a>values&#x2F;themes.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;Theme.AnimatedSplashScreen&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;android:Theme.Material.Light.NoActionBar&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:statusBarColor&quot;</span>&gt;</span>@color/black<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowBackground&quot;</span>&gt;</span>@color/black<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="values-31-x2F-themes-xml"><a href="#values-31-x2F-themes-xml" class="headerlink" title="values-31&#x2F;themes.xml"></a>values-31&#x2F;themes.xml</h4><?xml version="1.0" encoding="utf-8"?><resources><pre><code>&lt;style name=&quot;Theme.AnimatedSplashScreen&quot; parent=&quot;android:Theme.Material.Light.NoActionBar&quot;&gt;    &lt;item name=&quot;android:statusBarColor&quot;&gt;@color/black&lt;/item&gt;    &lt;item name=&quot;android:windowBackground&quot;&gt;@color/black&lt;/item&gt;    &lt;item name=&quot;android:windowSplashScreenAnimatedIcon&quot;&gt;@drawable/transparent_image&lt;/item&gt;&lt;/style&gt;</code></pre></resources><ul><li>splash icon을 투명하게 만들고 SplashScreen이 제일 처음에 보이도록 한다. (이렇게 안하면 SplashScreen 앞에 앱 아이콘이 잠시 보임)</li></ul><h2 id="툴바와-메뉴-통합"><a href="#툴바와-메뉴-통합" class="headerlink" title="툴바와 메뉴 통합"></a>툴바와 메뉴 통합</h2><ul><li>Scaffold()에서 topBar, bottomBar 정의</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OptIn(ExperimentalMaterial3Api::class)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposeUnitConverter</span><span class="params">(factory: <span class="type">ViewModelFactory</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> navController = rememberNavController()<span class="comment">// 화면을 이동하기 위한 NavHostController 생성</span></span><br><span class="line">    <span class="keyword">val</span> menuItems = listOf(<span class="string">&quot;Item #1&quot;</span>, <span class="string">&quot;Item #2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Material3: ScaffoldState 사용 안하고 바로 snackbarHostState 선언</span></span><br><span class="line">    <span class="keyword">val</span> snackbarHostState = remember &#123; SnackbarHostState() &#125;</span><br><span class="line">    <span class="keyword">val</span> snackbarCoroutineScope = rememberCoroutineScope()</span><br><span class="line"></span><br><span class="line">    Chapter06Theme(dynamicColor = <span class="literal">false</span>) &#123;</span><br><span class="line">        Scaffold(topBar = &#123;</span><br><span class="line">            ComposeUnitConverterTopBar(menuItems) &#123; s -&gt;</span><br><span class="line">                snackbarCoroutineScope.launch &#123;</span><br><span class="line">                    snackbarHostState.showSnackbar(s)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, bottomBar = &#123;</span><br><span class="line">            ComposeUnitConverterBottomBar(navController)</span><br><span class="line">        &#125;) &#123;</span><br><span class="line">            ComposeUnitConverterNavHost(</span><br><span class="line">                navController = navController, factory = factory, modifier = Modifier.padding(it)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="상단-앱-바-생성"><a href="#상단-앱-바-생성" class="headerlink" title="상단 앱 바 생성"></a>상단 앱 바 생성</h3><ul><li>TopAppBar() 사용하면 된다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExperimentalMaterial3Api</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TopAppBar</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    title: @<span class="type">Composable</span> () -&gt; <span class="type">Unit</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="params"><span class="function">    navigationIcon: @<span class="type">Composable</span> () -&gt; <span class="type">Unit</span> = &#123;&#125;,<span class="comment">// 앱 바 좌측 아이콘</span></span></span></span><br><span class="line"><span class="params"><span class="function">    actions: @<span class="type">Composable</span> <span class="type">RowScope</span>.() -&gt; <span class="type">Unit</span> = &#123;&#125;,<span class="comment">// 앱 바 우측에 들어가는 Row() </span></span></span></span><br><span class="line"><span class="params"><span class="function">    windowInsets: <span class="type">WindowInsets</span> = TopAppBarDefaults.windowInsets,</span></span></span><br><span class="line"><span class="params"><span class="function">    colors: <span class="type">TopAppBarColors</span> = TopAppBarDefaults.smallTopAppBarColors()</span></span>,</span><br><span class="line">    scrollBehavior: TopAppBarScrollBehavior? = <span class="literal">null</span><span class="comment">// 스크롤 상태에 따라 투명도를 조절하는 행동을 넣을 수 있겠다...</span></span><br><span class="line">) &#123;</span><br><span class="line">    SingleRowTopAppBar(</span><br><span class="line">        modifier = modifier,</span><br><span class="line">        title = title,</span><br><span class="line">        titleTextStyle = MaterialTheme.typography.fromToken(TopAppBarSmallTokens.HeadlineFont),</span><br><span class="line">        centeredTitle = <span class="literal">false</span>,</span><br><span class="line">        navigationIcon = navigationIcon,</span><br><span class="line">        actions = actions,</span><br><span class="line">        windowInsets = windowInsets,</span><br><span class="line">        colors = colors,</span><br><span class="line">        scrollBehavior = scrollBehavior</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>예제 코드에는 DropdownMenu까지 action에 추가해서 보여주고 있지만 여기서는 중요하진 않아서 기록하지는 않겠음.</p><h2 id="네비게이션-추가"><a href="#네비게이션-추가" class="headerlink" title="네비게이션 추가"></a>네비게이션 추가</h2><p>Scaffold()에서 bottomBar로 추가한 BottomAppBar() 알아보기</p><p>화면별로 라우팅을 하기 위한 객체가 하나 필요하다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">ComposeUnitConverterScreen</span></span>(</span><br><span class="line">    <span class="keyword">val</span> route: String,</span><br><span class="line">    <span class="meta">@StringRes</span> <span class="keyword">val</span> label: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="meta">@DrawableRes</span> <span class="keyword">val</span> icon: <span class="built_in">Int</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> screens = listOf(</span><br><span class="line">            Temperature,</span><br><span class="line">            Distances</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> route_temperature = <span class="string">&quot;temperature&quot;</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> route_distances = <span class="string">&quot;distances&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">object</span> Temperature : ComposeUnitConverterScreen(</span><br><span class="line">        route_temperature,</span><br><span class="line">        R.string.temperature,</span><br><span class="line">        R.drawable.baseline_thermostat_24</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">object</span> Distances : ComposeUnitConverterScreen(</span><br><span class="line">        route_distances,</span><br><span class="line">        R.string.distances,</span><br><span class="line">        R.drawable.baseline_square_foot_24</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>이제 이 ComposeUnitConverterScreen 안에 있는 screens 리스트에서 원하는 화면을 고르면 그 화면의 컴포저블 함수를 리턴해준다.</li><li>아래는 <code>ComposeUnitConverterScreen</code>를 어떻게 사용하는지 나온다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposeUnitConverterBottomBar</span><span class="params">(navController: <span class="type">NavHostController</span>)</span></span> &#123;</span><br><span class="line">    NavigationBar &#123;</span><br><span class="line">        <span class="keyword">val</span> navBackStackEntry <span class="keyword">by</span> navController.currentBackStackEntryAsState()</span><br><span class="line">        <span class="keyword">val</span> currentDestination = navBackStackEntry?.destination</span><br><span class="line">        <span class="comment">// 모든 스크린 forEach</span></span><br><span class="line">        ComposeUnitConverterScreen.screens.forEach &#123; screen -&gt;</span><br><span class="line">            NavigationBarItem(selected = currentDestination?.hierarchy?.any &#123; it.route == screen.route &#125; == <span class="literal">true</span>,</span><br><span class="line">                onClick = &#123;</span><br><span class="line">                    <span class="comment">// 일단 클릭하면 그 화면으로 이동하기</span></span><br><span class="line">                    navController.navigate(screen.route) &#123;</span><br><span class="line">                        launchSingleTop = <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                label = &#123;</span><br><span class="line">                    <span class="comment">// screen 객체에 이미 정의된 label</span></span><br><span class="line">                    Text(text = stringResource(id = screen.label))</span><br><span class="line">                &#125;,</span><br><span class="line">                icon = &#123;</span><br><span class="line">                    <span class="comment">// screen 객체에 이미 정의된 icon, label</span></span><br><span class="line">                    Icon(</span><br><span class="line">                        painter = painterResource(id = screen.icon),</span><br><span class="line">                        contentDescription = stringResource(id = screen.label)</span><br><span class="line">                    )</span><br><span class="line">                &#125;,</span><br><span class="line">                alwaysShowLabel = <span class="literal">false</span><span class="comment">// 선택되었을 때만 label 보여줌</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NavHostController와-NavHost-사용"><a href="#NavHostController와-NavHost-사용" class="headerlink" title="NavHostController와 NavHost() 사용"></a>NavHostController와 NavHost() 사용</h3><p>교재는 <strong>섭씨&#x2F;화씨 변환 기능이 있는 화면</strong>과 <strong>미터&#x2F;마일 변환 기능이 있는 화면</strong>을 <code>NavHostController</code>와 <code>NavHost</code>를 이용해 전환하는 예제를 보여주고 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposeUnitConverterNavHost</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    navController: <span class="type">NavHostController</span>, factory: <span class="type">ViewModelProvider</span>.<span class="type">Factory</span>?, modifier: <span class="type">Modifier</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    NavHost(</span><br><span class="line">        navController = navController,</span><br><span class="line">        startDestination = ComposeUnitConverterScreen.route_temperature,</span><br><span class="line">        modifier = modifier</span><br><span class="line">    ) &#123;</span><br><span class="line">        composable(ComposeUnitConverterScreen.route_temperature) &#123;</span><br><span class="line">            TemperatureConverter(</span><br><span class="line">                viewModel = viewModel(factory = factory)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        composable(ComposeUnitConverterScreen.route_distances) &#123;</span><br><span class="line">            DistancesConverter(</span><br><span class="line">                viewModel = viewModel(factory = factory)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>근데 아까 위에서 Splash 화면에서 홈화면으로 이동하기 위해서도 이러한 동작이 필요했었다.</p><p>MainActivity부터 살펴보자</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span>: <span class="type">ComponentActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContent &#123;</span><br><span class="line">            Chapter06Theme &#123;</span><br><span class="line">                <span class="keyword">val</span> navController = rememberNavController()</span><br><span class="line">                SetupNavGraph(navController = navController)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 Activity에서 이동할 화면들은 모두 NavHostController로 제어한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SetupNavGraph</span><span class="params">(navController: <span class="type">NavHostController</span>)</span></span> &#123;</span><br><span class="line">    NavHost(navController = navController, startDestination = Screen.Splash.route) &#123;</span><br><span class="line">        composable(route = Screen.Splash.route) &#123;</span><br><span class="line">            SplashScreen(navController = navController)</span><br><span class="line">        &#125;</span><br><span class="line">        composable(route = Screen.Home.route) &#123;</span><br><span class="line">            HomeScreen()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서는 화면이동 단위를 SplashScreen과 HomeScreen으로 나눴다.<br>이 HomeScreen 안에서는 아까 위에서 섭씨&#x2F;화씨, 미터&#x2F;마일 변환하는 화면이 나올 것이다.<br>그 화면들을 여기서 전부 통합해 정의하면 어떻게 될까…?</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SetupNavGraph</span><span class="params">(navController: <span class="type">NavHostController</span>)</span></span> &#123;</span><br><span class="line">    NavHost(navController = navController, startDestination = ComposeUnitConverterScreen.splash) &#123;</span><br><span class="line">        composable(ComposeUnitConverterScreen.splash) &#123;</span><br><span class="line">            SplashScreen(navController = navController)</span><br><span class="line">        &#125;</span><br><span class="line">        composable(ComposeUnitConverterScreen.temperature) &#123;</span><br><span class="line">            HomeScreen(navController = navController)</span><br><span class="line">        &#125;</span><br><span class="line">        composable(ComposeUnitConverterScreen.distances) &#123;</span><br><span class="line">            HomeScreen(navController = navController)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 구성했더니 HomeScreen에서 화면을 이동할 때마다 깜빡거린다. 확실히 이건 잘못된 방법이었다. ㅠㅠ</p><p>이 예제는 Navigation 기능을 사용해 화면을 이동하는 예제다 보니 화면 전환했던 기록이 전부 쌓여있어서 Back 버튼을 누르면 이전 화면으로 되돌아가는게 보인다. (데이터도 이전 화면의 데이터가 남아있음)</p><p>그리고 ViewModelFactory를 사용하다보니 화면을 새로 만들면서도 이전 값이 유지 되면서 생성된다는 점도 같이 확인하면 되겠다.</p>]]></content>
      
      
      <categories>
          
          <category> jetpack-compose-study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5장 Composable 함수 상태 관리</title>
      <link href="/2023/02/27/jetpack_compose/chapter05/"/>
      <url>/2023/02/27/jetpack_compose/chapter05/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Just-Android-Compose-Study/JetpackComposeStudy/tree/master/Chapter05">Source Code</a></p><h2 id="상태를-갖거나-갖지-않는-Composable-함수-이해"><a href="#상태를-갖거나-갖지-않는-Composable-함수-이해" class="headerlink" title="상태를 갖거나 갖지 않는 Composable 함수 이해"></a>상태를 갖거나 갖지 않는 Composable 함수 이해</h2><p><strong>UI는 항상 현재 데이터를 보여줘야만 한다는 것이 중요하다. 따라서 값이 변경되면 반드시 UI에 알려야 한다.</strong><br>이를 위해 <code>observable</code> 타입을 사용한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// kotlin에서 사용되는 예시</span></span><br><span class="line"><span class="keyword">var</span> counter <span class="keyword">by</span> observable(-<span class="number">1</span>) &#123; _, oldValue, newValue -&gt;</span><br><span class="line">println(<span class="string">&quot;<span class="variable">$oldValue</span> -&gt; <span class="variable">$newValue</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.3</span>) counter = i</span><br></pre></td></tr></table></figure><p>Jetpack Compose에서는 이러한 콜백 함수 없이도 상태가 변경되면 자동으로 관련된 UI 요소를 재구성하도록 동작한다.</p><h3 id="Composable-함수에서-상태-사용"><a href="#Composable-함수에서-상태-사용" class="headerlink" title="Composable 함수에서 상태 사용"></a>Composable 함수에서 상태 사용</h3><p>stateful: Composable 함수가 값을 유지(remember)하고 있으면 stateful 함수다</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SimpleStateDemo1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> num = remember &#123; mutableStateOf(Random.nextInt(<span class="number">0</span>, <span class="number">10</span>)) &#125;</span><br><span class="line">    Text(text = <span class="string">&quot;값: <span class="subst">$&#123;num.value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    LaunchedEffect(<span class="literal">true</span>) &#123;</span><br><span class="line">        delay(<span class="number">3000</span>)</span><br><span class="line">        num.value = <span class="number">9999</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SimpleStateDemo2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> num <span class="keyword">by</span> remember &#123; mutableStateOf(Random.nextInt(<span class="number">0</span>, <span class="number">10</span>)) &#125;</span><br><span class="line">    <span class="comment">// num 값을 직접 변경할 수는 없어졌다.</span></span><br><span class="line">    <span class="comment">// num 자체에서는 state 가지지 않음</span></span><br><span class="line">    Text(text = num.toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// caculation은 기억할 값을 생성하는 lambda 표현식</span></span><br><span class="line"><span class="comment">// 구성되는 동안 단 한 번만 평가되고 다시는 평가되지 않는다.</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">remember</span><span class="params">(<span class="keyword">crossinline</span> calculation: @<span class="type">DisallowComposableCalls</span> () -&gt; <span class="type">T</span>)</span></span>: T =</span><br><span class="line">    currentComposer.cache(<span class="literal">false</span>, calculation)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">remember</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    key1: <span class="type">Any</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">crossinline</span> calculation: @<span class="type">DisallowComposableCalls</span> () -&gt; <span class="type">T</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: T &#123;</span><br><span class="line"><span class="comment">// key1으로 들어오는 값이 변경되었는지 체크</span></span><br><span class="line">    <span class="keyword">return</span> currentComposer.cache(currentComposer.changed(key1), calculation)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>changed 내용</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A Compose compiler plugin API. DO NOT call directly.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Check [value] is different than the value used in the previous composition. This is used,</span></span><br><span class="line"><span class="comment"> * for example, to check parameter values to determine if they have changed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to check</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> `true` if the value if [equals] of the previous value returns `false` when passed</span></span><br><span class="line"><span class="comment"> * [value].</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ComposeCompilerApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">changed</span><span class="params">(value: <span class="type">Any</span>?)</span></span>: <span class="built_in">Boolean</span></span><br></pre></td></tr></table></figure><ul><li>Composer.cache()</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// invalid 값이 위에 있는 check에서 값이 변경되었을 때 true로 들어오면서 값이 변경된다. (block 람다식 재실행)</span></span><br><span class="line"><span class="meta">@ComposeCompilerApi</span></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Composer.<span class="title">cache</span><span class="params">(invalid: <span class="type">Boolean</span>, block: @<span class="type">DisallowComposableCalls</span> () -&gt; <span class="type">T</span>)</span></span>: T &#123;</span><br><span class="line">    <span class="meta">@Suppress(<span class="string">&quot;UNCHECKED_CAST&quot;</span>)</span></span><br><span class="line">    <span class="keyword">return</span> rememberedValue().let &#123;</span><br><span class="line">        <span class="keyword">if</span> (invalid || it === Composer.Empty) &#123;</span><br><span class="line">            <span class="keyword">val</span> value = block()</span><br><span class="line">            updateRememberedValue(value)</span><br><span class="line">            value</span><br><span class="line">        &#125; <span class="keyword">else</span> it</span><br><span class="line">    &#125; <span class="keyword">as</span> T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">RememberWithKeyDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> key <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="literal">false</span>) &#125;</span><br><span class="line">    <span class="comment">// key의 상태를 지켜보는 date, 변경시 람다식이 재실행 될 것임</span></span><br><span class="line">    <span class="keyword">val</span> date <span class="keyword">by</span> remember(key) &#123; mutableStateOf(Date()) &#125;</span><br><span class="line">    Column(</span><br><span class="line">        horizontalAlignment = Alignment.CenterHorizontally,</span><br><span class="line">        verticalArrangement = Arrangement.Center,</span><br><span class="line">        modifier = Modifier.fillMaxSize()</span><br><span class="line">    ) &#123;</span><br><span class="line">        Text(text = date.toString())</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        remember로 설정한 값이 이전 구성과 같다면 재평가되지 않고,</span></span><br><span class="line"><span class="comment">        동일하지 않은 경우에 새로운 값으로 계산하고, 이 값을 기억하고 반환한다.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Button(onClick = &#123; key = !key &#125;) &#123;</span><br><span class="line">            Text(text = stringResource(id = R.string.click))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="상태를-갖지-않는-Composable-함수-작성"><a href="#상태를-갖지-않는-Composable-함수-작성" class="headerlink" title="상태를 갖지 않는 Composable 함수 작성"></a>상태를 갖지 않는 Composable 함수 작성</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SimpleStatelessComposable2</span><span class="params">(text: <span class="type">State</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    Text(text = text.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 함수는 파라미터로 상태를 받지만 저장하지 않고 다른 상태를 기억하지도 않는다.<br><strong>멱등성(idempotent)</strong>: 연산을 여러 번 적용하더라도 결과가 달라지지 않는 성질을 의미</p><h4 id="Composable-함수의-준수사항"><a href="#Composable-함수의-준수사항" class="headerlink" title="Composable 함수의 준수사항"></a>Composable 함수의 준수사항</h4><ul><li><p>빠름: Composable은 무거운 연산을 하지 말아야 한다. 웹 서비스나 어떠한 I&#x2F;O도 호출해서는 안 된다. Composable에서 사용하는 데이터는 전달받는 형식이 돼야 한다.</p></li><li><p>부수 효과에서 자유로움: 전역 프로퍼티를 수정하거나 의도치 않은 observable 효과를 생산하지 말아야 한다.</p></li><li><p>멱등성: <code>remember &#123; &#125;</code>를 사용하지 않고(1) 전역 프로퍼티에도 접근하지 않으며(2) <strong>예측 불가능한 코드를 호출하지 말아야 한다.(3)</strong></p></li></ul><h4 id="상태를-갖는-Composable-상태를-갖지-않는-Composable"><a href="#상태를-갖는-Composable-상태를-갖지-않는-Composable" class="headerlink" title="상태를 갖는 Composable, 상태를 갖지 않는 Composable"></a>상태를 갖는 Composable, 상태를 갖지 않는 Composable</h4><p><strong>상태를 갖는 Composable에서 상태를 갖지 않는 Composable을 호출하자.</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stateless</span></span><br><span class="line"><span class="meta">@ExperimentalMaterial3Api</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TextFieldDemo</span><span class="params">(state: <span class="type">MutableState</span>&lt;<span class="type">TextFieldValue</span>&gt;)</span></span> &#123;</span><br><span class="line">    TextField(</span><br><span class="line">        value = state.value,</span><br><span class="line">        onValueChange = &#123; state.value = it &#125;,</span><br><span class="line">        placeholder = &#123; Text(<span class="string">&quot;Hello&quot;</span>) &#125;,</span><br><span class="line">        modifier = Modifier.fillMaxWidth()</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// stateful</span></span><br><span class="line"><span class="meta">@ExperimentalMaterial3Api</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TextFieldDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> state = remember &#123;</span><br><span class="line">        mutableStateOf(TextFieldValue(<span class="string">&quot;&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    TextFieldDemo(state)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="상태-호이스팅과-이벤트-전달"><a href="#상태-호이스팅과-이벤트-전달" class="headerlink" title="상태 호이스팅과 이벤트 전달"></a>상태 호이스팅과 이벤트 전달</h2><blockquote><ul><li>상태를 갖지 않는 Composable로 만들기 위해 상태를 상위로 이동시키는 패턴이다.</li><li>Composable을 좀 더 재사용하기 쉽고 테스트에 용이하게 하는 것 외에도 하나 이상의 Composable 함수에서 상태를 사용하려면 상태를 상위로 올리게 할 필요가 있다.</li></ul></blockquote><h3 id="섭씨-x2F-화씨-변경-예제"><a href="#섭씨-x2F-화씨-변경-예제" class="headerlink" title="섭씨&#x2F;화씨 변경 예제"></a>섭씨&#x2F;화씨 변경 예제</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TemperatureTextField</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    temperature: <span class="type">MutableState</span>&lt;<span class="type">String</span>&gt;,  <span class="comment">// 파라미터로 상태를 전달 받으며</span></span></span></span><br><span class="line"><span class="params"><span class="function">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="params"><span class="function">    callback: () -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    TextField(</span><br><span class="line">        value = temperature.value,</span><br><span class="line">        onValueChange = &#123;</span><br><span class="line">            temperature.value = it  <span class="comment">// 변경 사항을 상태에 다시 저장한다.</span></span><br><span class="line">        &#125;,</span><br><span class="line">        placeholder = &#123;</span><br><span class="line">            Text(text = stringResource(id = R.string.placeholder))</span><br><span class="line">        &#125;,</span><br><span class="line">        modifier = modifier,</span><br><span class="line">        keyboardActions = KeyboardActions(onAny = &#123;</span><br><span class="line">            callback()</span><br><span class="line">        &#125;),</span><br><span class="line">        keyboardOptions = KeyboardOptions(</span><br><span class="line">            keyboardType = KeyboardType.Number,</span><br><span class="line">            imeAction = ImeAction.Done</span><br><span class="line">        ),</span><br><span class="line">        singleLine = <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TemperatureRadioButton</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    selected: <span class="type">Boolean</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    resId: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    onClick: (<span class="type">Int</span>) -&gt; <span class="type">Unit</span>, <span class="comment">// 파라미터를 받는 콜백함수를 파라미터로 설정</span></span></span></span><br><span class="line"><span class="params"><span class="function">    modifier: <span class="type">Modifier</span> = Modifier</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    Row(</span><br><span class="line">        verticalAlignment = Alignment.CenterVertically,</span><br><span class="line">        modifier = modifier</span><br><span class="line">    ) &#123;</span><br><span class="line">        RadioButton(</span><br><span class="line">            selected = selected,</span><br><span class="line">            onClick = &#123;</span><br><span class="line">                onClick(resId)  <span class="comment">// onClick 콜백함수 호출</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = stringResource(resId),</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .padding(start = <span class="number">8.</span>dp)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TemperatureScaleButtonGroup</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    selected: <span class="type">MutableState</span>&lt;<span class="type">Int</span>&gt;,    <span class="comment">// 상태를 받음</span></span></span></span><br><span class="line"><span class="params"><span class="function">    modifier: <span class="type">Modifier</span> = Modifier</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> sel = selected.value</span><br><span class="line">    <span class="keyword">val</span> onClick = &#123; resId: <span class="built_in">Int</span> -&gt; selected.value = resId &#125;  <span class="comment">// 3: 새로운 상태 값으로 지정한다.</span></span><br><span class="line">    Row(modifier = modifier) &#123;</span><br><span class="line">        TemperatureRadioButton(</span><br><span class="line">            selected = sel == R.string.celsius,</span><br><span class="line">            resId = R.string.celsius,   <span class="comment">// 2: redId 값을</span></span><br><span class="line">            onClick = onClick   <span class="comment">// 1: 라디오 버튼을 클릭하면, (버블업, bubble up)</span></span><br><span class="line">        )</span><br><span class="line">        TemperatureRadioButton(</span><br><span class="line">            selected = sel == R.string.fahrenheit,</span><br><span class="line">            resId = R.string.fahrenheit,</span><br><span class="line">            onClick = onClick,</span><br><span class="line">            modifier = Modifier.padding(start = <span class="number">16.</span>dp)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert</span></span><br><span class="line"><span class="comment">// 부모(stateful)에서 상태를 생성하고,</span></span><br><span class="line"><span class="comment">// 자식(stateless)은 부모의 상태를 받아서만 동작하는 수동적 Composable 함수다. </span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">FlowOfEventsDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> strCelsius = stringResource(id = R.string.celsius)</span><br><span class="line">    <span class="keyword">val</span> strFahrenheit = stringResource(id = R.string.fahrenheit)</span><br><span class="line">    <span class="keyword">val</span> temperature = remember &#123; mutableStateOf(<span class="string">&quot;&quot;</span>) &#125;</span><br><span class="line">    <span class="keyword">val</span> scale = remember &#123; mutableStateOf(R.string.celsius) &#125;</span><br><span class="line">    <span class="keyword">var</span> convertedTemperature <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="built_in">Float</span>.NaN) &#125;</span><br><span class="line">    <span class="keyword">val</span> calc = &#123;</span><br><span class="line">        <span class="keyword">val</span> temp = temperature.value.toFloat()</span><br><span class="line">        convertedTemperature = <span class="keyword">if</span> (scale.value == R.string.celsius)</span><br><span class="line">            (temp * <span class="number">1.8F</span>) + <span class="number">32F</span> <span class="comment">// 섭씨 * 1.8 + 32</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            (temp - <span class="number">32F</span>) / <span class="number">1.8F</span> <span class="comment">// (화씨 - 32) / 1.8</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 섭씨면 화씨로, 화씨면 섭씨로 표현</span></span><br><span class="line">    <span class="keyword">val</span> result = remember(convertedTemperature) &#123;</span><br><span class="line">        <span class="keyword">if</span> (convertedTemperature.isNaN())</span><br><span class="line">            <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="string">&quot;<span class="subst">$&#123;convertedTemperature&#125;</span><span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">                if (scale.value == R.string.celsius)</span></span></span><br><span class="line"><span class="subst"><span class="string">                    strFahrenheit</span></span></span><br><span class="line"><span class="subst"><span class="string">                else strCelsius</span></span></span><br><span class="line"><span class="subst"><span class="string">            &#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> enabled = temperature.value.isNotBlank()    <span class="comment">//  비어 있지 않으면 모두 활성화</span></span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .padding(<span class="number">16.</span>dp),</span><br><span class="line">        horizontalAlignment = Alignment.CenterHorizontally,</span><br><span class="line">        verticalArrangement = Arrangement.Center</span><br><span class="line">    ) &#123;</span><br><span class="line">        TemperatureTextField(</span><br><span class="line">            temperature = temperature,</span><br><span class="line">            modifier = Modifier.padding(bottom = <span class="number">16.</span>dp),</span><br><span class="line">            callback = calc     <span class="comment">// 키보드 액션에서 완료 눌렀을 때</span></span><br><span class="line">        )</span><br><span class="line">        TemperatureScaleButtonGroup(</span><br><span class="line">            selected = scale,</span><br><span class="line">            modifier = Modifier.padding(bottom = <span class="number">16.</span>dp)</span><br><span class="line">        )</span><br><span class="line">        Button(</span><br><span class="line">            onClick = calc,     <span class="comment">// 직접 변환</span></span><br><span class="line">            enabled = enabled</span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(text = stringResource(id = R.string.convert))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result.isNotEmpty()) &#123;  <span class="comment">// 결과가 있을 때만 보이는 Text</span></span><br><span class="line">            Text(</span><br><span class="line">                text = result,</span><br><span class="line">                style = MaterialTheme.typography.bodyMedium</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>전환 후 표시되는 텍스트는 기억되었다가 result에 할당된다.</li><li>convertedTemperature가 변경되면 result는 재평가된다. (정말?)</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 섭씨면 화씨로, 화씨면 섭씨로 표현</span></span><br><span class="line">    <span class="keyword">val</span> result = remember(convertedTemperature) &#123;</span><br><span class="line">    <span class="comment">// 여기서 출력을 찍어봤다.</span></span><br><span class="line">        println(<span class="string">&quot;converted?: <span class="variable">$convertedTemperature</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (convertedTemperature.isNaN())</span><br><span class="line">            <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="string">&quot;<span class="subst">$&#123;convertedTemperature&#125;</span><span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">                if (scale.value == R.string.celsius)</span></span></span><br><span class="line"><span class="subst"><span class="string">                    strFahrenheit</span></span></span><br><span class="line"><span class="subst"><span class="string">                else strCelsius</span></span></span><br><span class="line"><span class="subst"><span class="string">            &#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p><img src="/images/jetpack_compose/chapter05/log.png"></p><p>예상대로 remember 대상 상태값인 convertedTemperature 바뀌지 않으면 재평가(Recomposition&#x2F;재구성)되지 않음을 알 수 있었다.</p><h2 id="환경설정-변경에도-데이터-유지"><a href="#환경설정-변경에도-데이터-유지" class="headerlink" title="환경설정 변경에도 데이터 유지"></a>환경설정 변경에도 데이터 유지</h2><p>Jetpack Compose는 임시로 상태를 저장하기 위해 <code>rememberSaveable &#123; &#125;</code> 사용한다.</p><h3 id="ViewModel-사용해보기"><a href="#ViewModel-사용해보기" class="headerlink" title="ViewModel 사용해보기"></a>ViewModel 사용해보기</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyViewModel</span> : <span class="type">ViewModel</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// observable 변수</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> _text: MutableLiveData&lt;String&gt; =</span><br><span class="line">        MutableLiveData&lt;String&gt;(<span class="string">&quot;Hello #3&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> text: LiveData&lt;String&gt;</span><br><span class="line">        <span class="keyword">get</span>() = _text</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setText</span><span class="params">(value: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        _text.value = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewModelDemoActivity</span> : <span class="type">ComponentActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContent &#123;</span><br><span class="line">            ViewModelDemo()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ViewModelDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> viewModel: MyViewModel = viewModel()</span><br><span class="line">    <span class="comment">// 상태를 임시로 기억함</span></span><br><span class="line">    <span class="keyword">val</span> state1 = remember &#123;</span><br><span class="line">        mutableStateOf(<span class="string">&quot;Hello #1&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    It behaves similarly to remember,</span></span><br><span class="line"><span class="comment">     but the stored value will survive the activity or process recreation</span></span><br><span class="line"><span class="comment">      using the saved instance state mechanism</span></span><br><span class="line"><span class="comment">     (for example it happens when the screen is rotated in the Android application).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">val</span> state2 = rememberSaveable &#123;</span><br><span class="line">        mutableStateOf(<span class="string">&quot;Hello #2&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> testState = rememberSaveable(saver = Saver(</span><br><span class="line">        save = &#123;</span><br><span class="line">            println(<span class="string">&quot;save&quot;</span>)</span><br><span class="line">            mutableStateOf(<span class="string">&quot;Hello #tester2&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        restore = &#123;</span><br><span class="line">            println(<span class="string">&quot;restore&quot;</span>)</span><br><span class="line">            mutableStateOf(<span class="string">&quot;Restored&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    )) &#123;</span><br><span class="line">        println(<span class="string">&quot;initial&quot;</span>)</span><br><span class="line">        mutableStateOf(<span class="string">&quot;initial&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> state3 = viewModel.text.observeAsState()    <span class="comment">// 변경 가능한 상태를 리턴함, Nullable State를 리턴함</span></span><br><span class="line">    state3.value?.let &#123;</span><br><span class="line">        Column(modifier = Modifier.fillMaxWidth()) &#123;</span><br><span class="line">            <span class="keyword">val</span> context = LocalContext.current <span class="keyword">as</span> Activity</span><br><span class="line"></span><br><span class="line">            MyTextField(state1) &#123; state1.value = it &#125;</span><br><span class="line">            MyTextField(state2) &#123; state2.value = it &#125;</span><br><span class="line">            MyTextField(state3) &#123;</span><br><span class="line">                viewModel.setText(it)</span><br><span class="line">            &#125;</span><br><span class="line">            MyTextField(testState) &#123;</span><br><span class="line">                testState.value = it</span><br><span class="line">            &#125;</span><br><span class="line">            Button(onClick = &#123;</span><br><span class="line">                context.startActivity(Intent(context, ViewModelDemoActivity::<span class="keyword">class</span>.java))</span><br><span class="line">                context.finish()</span><br><span class="line"></span><br><span class="line">            &#125;) &#123;</span><br><span class="line">                Text(text = <span class="string">&quot;재시작&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MyTextField</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    value: <span class="type">State</span>&lt;<span class="type">String</span>?&gt;,  <span class="comment">// Nullable State</span></span></span></span><br><span class="line"><span class="params"><span class="function">    onValueChange: (<span class="type">String</span>) -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    value.value?.let &#123;</span><br><span class="line">        TextField(</span><br><span class="line">            value = it,</span><br><span class="line">            onValueChange = onValueChange,</span><br><span class="line">            modifier = Modifier.fillMaxWidth()</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>rememberSaveable &#123; &#125;</code> 으로도 간단하게 상태를 저장하고 불러올 수 있겠지만, 하나의 화면 안에서 모든 로직이 끝나는 것이 아니라 데이터를 외부에서 의존적인 형태로 받아올 때는 Saver 구현체나 ViewModel 클래스를 사용하는 것이 좋겠다.</p><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><ul><li>상태 호이스팅은 상태를 갖지 않는 Composable 함수를 만들기 위한 일종의 도구다.</li><li><code>remember &#123; &#125;</code>, <code>rememberSaveable &#123; &#125;</code>, <code>ViewModel</code>에 대해 알아보았다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> jetpack-compose-study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4장 요소 배치</title>
      <link href="/2023/02/21/jetpack_compose/chapter04/"/>
      <url>/2023/02/21/jetpack_compose/chapter04/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Just-Android-Compose-Study/JetpackComposeStudy/tree/master/Chapter04">Source Code</a></p><h2 id="미리-정의된-레이아웃-사용"><a href="#미리-정의된-레이아웃-사용" class="headerlink" title="미리 정의된 레이아웃 사용"></a>미리 정의된 레이아웃 사용</h2><p>Jetpack Compose는 기준이 되는 축을 따라 컨텐츠를 배열하는 기본적인 레이아웃을 제공한다.</p><ul><li>Horizontal: Row()</li><li>Vertical: Column()</li><li>Stacked: Box(), BoxWithConstraints()</li></ul><h3 id="기본-구성-요소-조합"><a href="#기본-구성-요소-조합" class="headerlink" title="기본 구성 요소 조합"></a>기본 구성 요소 조합</h3><ul><li>가운데 정렬하기</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CheckboxWithLabel</span><span class="params">(label: <span class="type">String</span>, state: <span class="type">MutableState</span>&lt;<span class="type">Boolean</span>&gt;)</span></span> &#123;</span><br><span class="line">  Row(</span><br><span class="line">    modifier = Modifier.clickable &#123;</span><br><span class="line">      state.value = !state.value</span><br><span class="line">    &#125;, verticalAlignment = Alignment.CenterVertically   <span class="comment">// 수직 가운데 정렬</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    Checkbox(</span><br><span class="line">      checked = state.value,</span><br><span class="line">      onCheckedChange = &#123;</span><br><span class="line">        state.value = it</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    Text(</span><br><span class="line">      text = label,</span><br><span class="line">      modifier = Modifier.padding(start = <span class="number">8.</span>dp)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Box() 내에서 먼저 작성한 뷰부터 뒤에서 겹쳐 쌓인다.</li><li>먼저 Column과 Box를 사용한 예제부터 확인</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">PredefinedLayoutsDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> red = remember &#123; mutableStateOf(<span class="literal">true</span>) &#125;</span><br><span class="line">  <span class="keyword">val</span> green = remember &#123; mutableStateOf(<span class="literal">true</span>) &#125;</span><br><span class="line">  <span class="keyword">val</span> blue = remember &#123; mutableStateOf(<span class="literal">true</span>) &#125;</span><br><span class="line">  Column(</span><br><span class="line">    modifier = Modifier</span><br><span class="line">      .fillMaxSize()</span><br><span class="line">      .padding(<span class="number">16.</span>dp)</span><br><span class="line">  ) &#123;</span><br><span class="line">    CheckboxWithLabel(</span><br><span class="line">      label = stringResource(id = R.string.red),</span><br><span class="line">      state = red</span><br><span class="line">    )</span><br><span class="line">    CheckboxWithLabel(</span><br><span class="line">      label = stringResource(id = R.string.green),</span><br><span class="line">      state = green</span><br><span class="line">    )</span><br><span class="line">    CheckboxWithLabel(</span><br><span class="line">      label = stringResource(id = R.string.blue),</span><br><span class="line">      state = blue</span><br><span class="line">    )</span><br><span class="line">    Box(</span><br><span class="line">      modifier = Modifier</span><br><span class="line">        .fillMaxSize()</span><br><span class="line">        .padding(top = <span class="number">16.</span>dp)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">if</span> (red.value) &#123;</span><br><span class="line">        Box(</span><br><span class="line">          modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .background(Color.Red)</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (green.value) &#123;</span><br><span class="line">        Box(</span><br><span class="line">          modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .padding(<span class="number">32.</span>dp)</span><br><span class="line">            .background(Color.Green)</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (blue.value) &#123;</span><br><span class="line">        Box(</span><br><span class="line">          modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .padding(<span class="number">64.</span>dp)</span><br><span class="line">            .background(Color.Blue)</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="제약-조건을-기반으로-하는-레이아웃-생성"><a href="#제약-조건을-기반으로-하는-레이아웃-생성" class="headerlink" title="제약 조건을 기반으로 하는 레이아웃 생성"></a>제약 조건을 기반으로 하는 레이아웃 생성</h3><p>안드로이드의 전통적인 View기반 세계에서 ConstraintLayout으로 View 계층 구조를 평탄화한 것처럼 Box(), Row(), Column()을 중첩하는 행위를<br>제한하기 위한 방법</p><p>Compose에서는 기본 제공은 아니고 gradle 추가 필요함</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;androidx.constraintlayout:constraintlayout-compose:1.0.1&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>Domain-Specific Language(DSL, 도메인 특화 언어)를 사용해 다른 요소와 연관이 있는 UI 요소의 위치와 크기를 정의한다.</li><li>그래서 내부에 있는 각각의 Composable 함수는 자신과 관련된 참조를 갖고 있어야 하며, 이 참조는 createRefs()를 사용해 생성된다.</li><li>제약조건은 modifier에서 constrainAs()를 사용하면 된다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Stable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Modifier.<span class="title">constrainAs</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  ref: <span class="type">ConstrainedLayoutReference</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  constrainBlock: <span class="type">ConstrainScope</span>.() -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> = <span class="keyword">this</span>.then(ConstrainAsModifier(ref, constrainBlock))</span><br></pre></td></tr></table></figure><ul><li>constrainAs() 파라미터에서 후행 람다 표현식은 ConstrainScope를<br>받는다. <a href="https://developer.android.com/reference/kotlin/androidx/constraintlayout/compose/ConstrainScope">ConstrainScope 문서</a></li><li>이렇게 다른 컴포저블의 위치와 연결되는 위치를 정의하기 때문에 이런 프로퍼티를 anchors(앵커)라고 부른다.</li><li>ConstraintLayout() 예제 확인해보자</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExperimentalComposeUiApi</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ConstraintLayoutDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> red = remember &#123; mutableStateOf(<span class="literal">true</span>) &#125;</span><br><span class="line">  <span class="keyword">val</span> green = remember &#123; mutableStateOf(<span class="literal">true</span>) &#125;</span><br><span class="line">  <span class="keyword">val</span> blue = remember &#123; mutableStateOf(<span class="literal">true</span>) &#125;</span><br><span class="line">  ConstraintLayout(</span><br><span class="line">    modifier = Modifier</span><br><span class="line">      .fillMaxSize()</span><br><span class="line">      .padding(<span class="number">16.</span>dp)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">val</span> (cbRed, cbGreen, cbBlue, boxRed, boxGreen, boxBlue) = createRefs()  <span class="comment">// 여기서 제약조건의 참조가 될 값들을 선언/초기화 </span></span><br><span class="line">    CheckboxWithLabel(</span><br><span class="line">      label = stringResource(id = R.string.red),</span><br><span class="line">      state = red,</span><br><span class="line">      modifier = Modifier.constrainAs(cbRed) &#123;</span><br><span class="line">        top.linkTo(parent.top)  <span class="comment">// 맨 위에 위치</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    CheckboxWithLabel(</span><br><span class="line">      label = stringResource(id = R.string.green),</span><br><span class="line">      state = green,</span><br><span class="line">      modifier = Modifier.constrainAs(cbGreen) &#123;</span><br><span class="line">        top.linkTo(cbRed.bottom)    <span class="comment">// cbRed의 아래에 위치</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    CheckboxWithLabel(</span><br><span class="line">      label = stringResource(id = R.string.blue),</span><br><span class="line">      state = blue,</span><br><span class="line">      modifier = Modifier.constrainAs(cbBlue) &#123;</span><br><span class="line">        top.linkTo(cbGreen.bottom)  <span class="comment">// cbGreen의 아래에 위치</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// Dimension.fillToConstraints</span></span><br><span class="line">    <span class="keyword">if</span> (red.value) &#123;</span><br><span class="line">      Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">          .background(Color.Red)</span><br><span class="line">          .constrainAs(boxRed) &#123;</span><br><span class="line">            start.linkTo(parent.start)</span><br><span class="line">            end.linkTo(parent.end)</span><br><span class="line">            top.linkTo(cbBlue.bottom, margin = <span class="number">16.</span>dp)</span><br><span class="line">            bottom.linkTo(parent.bottom)</span><br><span class="line">            width = Dimension.fillToConstraints</span><br><span class="line">            height = Dimension.fillToConstraints</span><br><span class="line">          &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (green.value) &#123;</span><br><span class="line">      Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">          .background(Color.Green)</span><br><span class="line">          .constrainAs(boxGreen) &#123;</span><br><span class="line">            start.linkTo(parent.start, margin = <span class="number">32.</span>dp)</span><br><span class="line">            end.linkTo(parent.end, margin = <span class="number">32.</span>dp)</span><br><span class="line">            top.linkTo(cbBlue.bottom, margin = (<span class="number">16</span> + <span class="number">32</span>).dp)</span><br><span class="line">            bottom.linkTo(parent.bottom, margin = <span class="number">32.</span>dp)</span><br><span class="line">            width = Dimension.fillToConstraints</span><br><span class="line">            height = Dimension.fillToConstraints</span><br><span class="line">          &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (blue.value) &#123;</span><br><span class="line">      Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">          .background(Color.Blue)</span><br><span class="line">          .constrainAs(boxBlue) &#123;</span><br><span class="line">            start.linkTo(parent.start, margin = <span class="number">64.</span>dp)</span><br><span class="line">            end.linkTo(parent.end, margin = <span class="number">64.</span>dp)</span><br><span class="line">            top.linkTo(cbBlue.bottom, margin = (<span class="number">16</span> + <span class="number">64</span>).dp)</span><br><span class="line">            bottom.linkTo(parent.bottom, margin = <span class="number">64.</span>dp)</span><br><span class="line">            width = Dimension.fillToConstraints</span><br><span class="line">            height = Dimension.fillToConstraints</span><br><span class="line">          &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="단일-측정-단계의-이해"><a href="#단일-측정-단계의-이해" class="headerlink" title="단일 측정 단계의 이해"></a>단일 측정 단계의 이해</h2><p>Column()에서 2개의 Text를 넣으면, 첫 번째 Text의 길이에 따라 Column의 최대 길이가 달라지는 영향이 생긴다. -&gt; <strong>제약조건</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">Column</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="params"><span class="function">  verticalArrangement: <span class="type">Arrangement</span>.<span class="type">Vertical</span> = Arrangement.Top,</span></span></span><br><span class="line"><span class="params"><span class="function">  horizontalAlignment: <span class="type">Alignment</span>.<span class="type">Horizontal</span> = Alignment.Start,</span></span></span><br><span class="line"><span class="params"><span class="function">  content: @<span class="type">Composable</span> <span class="type">ColumnScope</span>.() -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> measurePolicy = columnMeasurePolicy(verticalArrangement, horizontalAlignment)</span><br><span class="line">  Layout(</span><br><span class="line">    content = &#123; ColumnScopeInstance.content() &#125;,</span><br><span class="line">    measurePolicy = measurePolicy,</span><br><span class="line">    modifier = modifier</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>여기서 measurePolicy 변수의 값에 따라 길이가 바뀐다.</li></ul><h3 id="측정-정책-정의"><a href="#측정-정책-정의" class="headerlink" title="측정 정책 정의"></a>측정 정책 정의</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PublishedApi</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">columnMeasurePolicy</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  verticalArrangement: <span class="type">Arrangement</span>.<span class="type">Vertical</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  horizontalAlignment: <span class="type">Alignment</span>.<span class="type">Horizontal</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> = remember(verticalArrangement, horizontalAlignment) &#123;</span><br><span class="line">  <span class="comment">// DefaultColumnMeasurePolicy 혹은 rowColumnMeasurePolicy</span></span><br><span class="line">  <span class="keyword">if</span> (verticalArrangement == Arrangement.Top &amp;&amp; horizontalAlignment == Alignment.Start) &#123;</span><br><span class="line">    DefaultColumnMeasurePolicy</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    rowColumnMeasurePolicy(</span><br><span class="line">      orientation = LayoutOrientation.Vertical,</span><br><span class="line">      arrangement = &#123; totalSize, size, _, density, outPosition -&gt;</span><br><span class="line">        with(verticalArrangement) &#123; density.arrange(totalSize, size, outPosition) &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      arrangementSpacing = verticalArrangement.spacing,</span><br><span class="line">      crossAxisAlignment = CrossAxisAlignment.horizontal(horizontalAlignment),</span><br><span class="line">      crossAxisSize = SizeMode.Wrap</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서 MeasurePolicy 인터페이스가 레이아웃을 어떻게 측정하고 배치할지 정의하기 때문에<br>미리 정의된 레이아웃(Row, Column, Box)과 커스텀 레이아웃의 기본 구성 요소가 된다.</p><figure class="highlight plaintext"><figcaption><span>```MeasureResult``` 인스턴스를 반환한다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 레이아웃의 크기 (width, height)</span><br><span class="line">- 정렬선 (alignmentLines)</span><br><span class="line">- 자식 요소를 배치하기 위한 로직 (placeChildren())</span><br><span class="line"></span><br><span class="line">기존 Android View 시스템에서는 자식 레이아웃을 다시 측정하면 성능 저하 때문에 한 번만 측정하고 있었다.</span><br><span class="line"></span><br><span class="line">하지만 Compose에서 Layout은 자식 Layout의 intrinsic size(고유 크기)를 query(질의)할 수 있으며, 이를 사용해 크기나 위치를 지정한다.</span><br><span class="line"></span><br><span class="line">- minIntrinsicWidth()</span><br><span class="line">- maxIntrinsicWidth()</span><br><span class="line">- minIntrinsicHeight()</span><br><span class="line">- maxIntrinsicHeight()</span><br><span class="line"></span><br><span class="line">```kotlin</span><br><span class="line">fun IntrinsicMeasureScope.minIntrinsicWidth(</span><br><span class="line">  measurables: List&lt;IntrinsicMeasurable&gt;,</span><br><span class="line">  height: Int</span><br><span class="line">): Int &#123;</span><br><span class="line">  // measurables에서 DefaultIntrinsicMeasurable() 값에 해당되는 값들로 변경 List&lt;Measurable&gt;</span><br><span class="line">  val mapped = measurables.fastMap &#123;</span><br><span class="line">    DefaultIntrinsicMeasurable(it, IntrinsicMinMax.Min, IntrinsicWidthHeight.Width)</span><br><span class="line">  &#125;</span><br><span class="line">  val constraints = Constraints(maxHeight = height)</span><br><span class="line">  val layoutReceiver = IntrinsicsMeasureScope(this, layoutDirection)  // 크기 측정</span><br><span class="line">  val layoutResult = layoutReceiver.measure(mapped, constraints)</span><br><span class="line">  return layoutResult.width</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Layout.kt</span></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultIntrinsicMeasurable</span></span>(</span><br><span class="line">  <span class="keyword">val</span> measurable: IntrinsicMeasurable,</span><br><span class="line">  <span class="keyword">val</span> minMax: IntrinsicMinMax,</span><br><span class="line">  <span class="keyword">val</span> widthHeight: IntrinsicWidthHeight</span><br><span class="line">) : Measurable &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> parentData: Any?</span><br><span class="line">    <span class="keyword">get</span>() = measurable.parentData</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">measure</span><span class="params">(constraints: <span class="type">Constraints</span>)</span></span>: Placeable &#123; <span class="comment">// Constraints에서 minWidth, minHeight, maxWidth, maxHeight</span></span><br><span class="line">    <span class="keyword">if</span> (widthHeight == IntrinsicWidthHeight.Width) &#123;</span><br><span class="line">      <span class="keyword">val</span> width = <span class="keyword">if</span> (minMax == IntrinsicMinMax.Max) &#123;</span><br><span class="line">        measurable.maxIntrinsicWidth(constraints.maxHeight)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        measurable.minIntrinsicWidth(constraints.maxHeight)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> FixedSizeIntrinsicsPlaceable(width, constraints.maxHeight)   <span class="comment">// 가장 작은 너비 제공</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> height = <span class="keyword">if</span> (minMax == IntrinsicMinMax.Max) &#123;</span><br><span class="line">      measurable.maxIntrinsicHeight(constraints.maxWidth)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      measurable.minIntrinsicHeight(constraints.maxWidth)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FixedSizeIntrinsicsPlaceable(constraints.maxWidth, height) <span class="comment">// 가장 작은 너비 제공</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">minIntrinsicWidth</span><span class="params">(height: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> measurable.minIntrinsicWidth(height)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">maxIntrinsicWidth</span><span class="params">(height: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> measurable.maxIntrinsicWidth(height)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">minIntrinsicHeight</span><span class="params">(width: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> measurable.minIntrinsicHeight(width)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">maxIntrinsicHeight</span><span class="params">(width: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> measurable.maxIntrinsicHeight(width)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Layout() Composable 함수는 컨텐츠, MeasurePolicy, Modifier 이 3개의 parameter를 받는다.</li><li>MeasurePolicy는 Layout을 어떻게 측정(measure)하고 위치시킬지 정의한다.</li><li>Layout의 고유 크기는 해당 입력값의 최소 또는 최대 크기를 결정한다.</li><li><strong>Jetpack Compose에서는 자식 뷰를 화면에 배치하기 전에 딱 한 번만 측정되기를 요구한다. 이는 측정성을 향상하는 결과를 불러온다.</strong></li></ul><h2 id="커스텀-레이아웃-작성"><a href="#커스텀-레이아웃-작성" class="headerlink" title="커스텀 레이아웃 작성"></a>커스텀 레이아웃 작성</h2><ul><li>커스텀 레이아웃은 적어도 2개의 매개변수를 받는데, content와 Modifier를 기본값으로 갖는 modifier다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CustomLayoutDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    SimpleFlexBox &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.42</span>) &#123;</span><br><span class="line">            ColoredBox()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ColoredBox</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .border(</span><br><span class="line">                width = <span class="number">2.</span>dp,</span><br><span class="line">                color = Color.Black</span><br><span class="line">            )</span><br><span class="line">            .background(randomColor())</span><br><span class="line">            .width((<span class="number">40</span> * randomInt123()).dp)</span><br><span class="line">            .height((<span class="number">10</span> * randomInt123()).dp)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Layout()을 만드는데 modifier, content 필요</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SimpleFlexBox</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="params"><span class="function">    content: @<span class="type">Composable</span> () -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    Layout(</span><br><span class="line">        modifier = modifier,</span><br><span class="line">        content = content,</span><br><span class="line">        measurePolicy = simpleFlexboxMeasurePolicy()</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="커스텀-측정-정책-구현"><a href="#커스텀-측정-정책-구현" class="headerlink" title="커스텀 측정 정책 구현"></a>커스텀 측정 정책 구현</h3><figure class="highlight plaintext"><figcaption><span>구현체는 MeasureScope.measure() 구현체를 제공해야만 한다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">이유는 MeasurePolicy interface 안에 MeasureScope.measure()가 선언되어 있으니까</span><br><span class="line"></span><br><span class="line">```kotlin</span><br><span class="line">// MeasurePolicy.kt</span><br><span class="line">fun MeasureScope.measure(</span><br><span class="line">    measurables: List&lt;Measurable&gt;,</span><br><span class="line">    constraints: Constraints</span><br><span class="line">): MeasureResult</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">```kotlin</span><br><span class="line">private fun simpleFlexboxMeasurePolicy(): MeasurePolicy =</span><br><span class="line">    MeasurePolicy &#123; measurables, constraints -&gt;</span><br><span class="line">        val placeables = measurables.map &#123; measurable -&gt;</span><br><span class="line">            measurable.measure(constraints)</span><br><span class="line">        &#125;</span><br><span class="line">// MeasureScope.measure() 구현체를 제공하는 대신 layout() 호출 -&gt; MeasurePolicy 인터페이스의 구현체함수 호출 -&gt; MeasureResult 리턴함</span><br><span class="line">        layout(</span><br><span class="line">            constraints.maxWidth,</span><br><span class="line">            constraints.maxHeight</span><br><span class="line">        ) &#123;</span><br><span class="line">        // placementBlock: Placeable.PlacementScope.() -&gt; Unit</span><br><span class="line">            var yPos = 0</span><br><span class="line">            var xPos = 0</span><br><span class="line">            var maxY = 0</span><br><span class="line">            // placementBlock은 placeables를 반복하면서 xPos와 yPos를 증가시켜 placeable의 위치를 계산한다.</span><br><span class="line">            placeables.forEach &#123; placeable -&gt;</span><br><span class="line">            // placeable이 현재 열에 완벽히 맞는지 판단 및 xPos, yPos 값 조절</span><br><span class="line">                if (xPos + placeable.width &gt;</span><br><span class="line">                    constraints.maxWidth</span><br><span class="line">                ) &#123;</span><br><span class="line">                    xPos = 0</span><br><span class="line">                    yPos += maxY</span><br><span class="line">                    maxY = 0</span><br><span class="line">                &#125;</span><br><span class="line">                placeable.placeRelative(</span><br><span class="line">                    x = xPos,</span><br><span class="line">                    y = yPos</span><br><span class="line">                )</span><br><span class="line">                xPos += placeable.width</span><br><span class="line">                if (maxY &lt; placeable.height) &#123;</span><br><span class="line">                    maxY = placeable.height</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>placementBlock 람다식 안에서 Placeable.PlacementScope 클래스 내 선언된 함수들을 사용 가능하다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Placeable.<span class="title">placeRelative</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>, zIndex: <span class="type">Float</span> = <span class="number">0</span>f)</span></span> =</span><br><span class="line">            placeAutoMirrored(IntOffset(x, y), zIndex, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><ul><li>코드에서 layout을 잠시 지우면 이런 에러가 뜬다.</li></ul><p><img src="/images/jetpack_compose/chapter04/MeasureResult.png" alt="layout"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">layout</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    width: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    height: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    alignmentLines: <span class="type">Map</span>&lt;<span class="type">AlignmentLine</span>, <span class="built_in">Int</span>&gt; = emptyMap()</span></span>,</span><br><span class="line">    placementBlock: Placeable.PlacementScope.() -&gt; <span class="built_in">Unit</span></span><br><span class="line">) = <span class="keyword">object</span> : MeasureResult &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> width = width</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> height = height</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> alignmentLines = alignmentLines</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">placeChildren</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Placeable.PlacementScope.executeWithRtlMirroringValues(</span><br><span class="line">            width,</span><br><span class="line">            layoutDirection,</span><br><span class="line">            <span class="keyword">this</span><span class="symbol">@MeasureScope</span> <span class="keyword">as</span>? LookaheadCapablePlaceable,</span><br><span class="line">            placementBlock</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MeasureScope.measure()에서 리턴해야할 MeasureResult 구현체를 리턴함을 알 수 있다.</li></ul><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><ul><li>미리 정의되어 있는 레이아웃 Row(), Column(), Box() 살펴보기</li><li>ConstraintLayout UI 요소 계층 구조 평탄화</li><li>Jetpack Compose에서 Layout</li><li>커스텀 레이아웃으로 자식 레이아웃의 렌더링을 정밀하게 제어하는 방법 알아보기</li></ul>]]></content>
      
      
      <categories>
          
          <category> jetpack-compose-study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3장 컴포즈 핵심 원칙 자세히 알아보기</title>
      <link href="/2023/02/14/jetpack_compose/chapter03/"/>
      <url>/2023/02/14/jetpack_compose/chapter03/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Just-Android-Compose-Study/JetpackComposeStudy/tree/master/Chapter03">Source Code</a></p><h2 id="컴포저블-함수-자세히-살펴보기"><a href="#컴포저블-함수-자세히-살펴보기" class="headerlink" title="컴포저블 함수 자세히 살펴보기"></a>컴포저블 함수 자세히 살펴보기</h2><h3 id="컴포저블-함수의-구성-요소"><a href="#컴포저블-함수의-구성-요소" class="headerlink" title="컴포저블 함수의 구성 요소"></a>컴포저블 함수의 구성 요소</h3><ul><li>가시성 변경자: 용도에 따라 접근 범위를 정하면 되겠다.</li><li>fun</li><li>함수명: <strong>파스칼 표기법</strong>으로 작성</li><li>매개변수: 선택적</li><li>반환 타입: 선택적 -&gt; 값을 리턴하지 않아도 Composable 함수가 화면에 표현된다.</li><li>코드 블록</li></ul><h3 id="UI-요소-내보내기"><a href="#UI-요소-내보내기" class="headerlink" title="UI 요소 내보내기"></a>UI 요소 내보내기</h3><ul><li>IDE를 이용해 직접 확인해보기</li></ul><h4 id="androidx-compose-material-Text"><a href="#androidx-compose-material-Text" class="headerlink" title="androidx.compose.material.Text()"></a>androidx.compose.material.Text()</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> textColor = color.takeOrElse &#123;</span><br><span class="line">  style.color.takeOrElse &#123;</span><br><span class="line">    LocalContentColor.current</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// NOTE(text-perf-review): It might be worthwhile writing a bespoke merge implementation that</span></span><br><span class="line"><span class="comment">// will avoid reallocating if all of the options here are the defaults</span></span><br><span class="line"><span class="keyword">val</span> mergedStyle = style.merge(</span><br><span class="line">  TextStyle(</span><br><span class="line">    color = textColor,</span><br><span class="line">    fontSize = fontSize,</span><br><span class="line">    fontWeight = fontWeight,</span><br><span class="line">    textAlign = textAlign,</span><br><span class="line">    lineHeight = lineHeight,</span><br><span class="line">    fontFamily = fontFamily,</span><br><span class="line">    textDecoration = textDecoration,</span><br><span class="line">    fontStyle = fontStyle,</span><br><span class="line">    letterSpacing = letterSpacing</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line">BasicText(</span><br><span class="line">  text,</span><br><span class="line">  modifier,</span><br><span class="line">  mergedStyle,</span><br><span class="line">  onTextLayout,</span><br><span class="line">  overflow,</span><br><span class="line">  softWrap,</span><br><span class="line">  maxLines,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="BasicText"><a href="#BasicText" class="headerlink" title="BasicText()"></a>BasicText()</h4><blockquote><p><strong>BasicText</strong>에서 찾은 CoreText 관련 주석</p><p>The ID used to identify this CoreText. If this CoreText is removed from the composition tree and then added back, this ID should stay the same.</p><p>Notice that we need to update selectable ID when the input text or selectionRegistrar has been updated.</p><p>When text is updated, the selection on this CoreText becomes invalid. It can be treated as a brand new CoreText.</p><p>When SelectionRegistrar is updated, CoreText have to request a new ID to avoid ID collision.</p></blockquote><p><img src="/images/jetpack_compose/chapter03/CoreText.png" alt="CoreText"></p><ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.0.0-alpha12">https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.0.0-alpha12</a></li><li>CoreText는 public API에서 사용 불가</li><li>BasicText() 하단부에서 Layout()을 호출하고 있다.</li></ul><h4 id="Layout"><a href="#Layout" class="headerlink" title="Layout()"></a>Layout()</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Suppress(<span class="string">&quot;NOTHING_TO_INLINE&quot;</span>)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="meta">@UiComposable</span></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">Layout</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="params"><span class="function">    measurePolicy: <span class="type">MeasurePolicy</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> density = LocalDensity.current</span><br><span class="line">    <span class="keyword">val</span> layoutDirection = LocalLayoutDirection.current</span><br><span class="line">    <span class="keyword">val</span> viewConfiguration = LocalViewConfiguration.current</span><br><span class="line">    <span class="keyword">val</span> materialized = currentComposer.materialize(modifier)</span><br><span class="line">    ReusableComposeNode&lt;ComposeUiNode, Applier&lt;Any&gt;&gt;(</span><br><span class="line">        factory = ComposeUiNode.Constructor,</span><br><span class="line">        update = &#123;</span><br><span class="line">            <span class="keyword">set</span>(measurePolicy, ComposeUiNode.SetMeasurePolicy)</span><br><span class="line">            <span class="keyword">set</span>(density, ComposeUiNode.SetDensity)</span><br><span class="line">            <span class="keyword">set</span>(layoutDirection, ComposeUiNode.SetLayoutDirection)</span><br><span class="line">            <span class="keyword">set</span>(viewConfiguration, ComposeUiNode.SetViewConfiguration)</span><br><span class="line">            <span class="keyword">set</span>(materialized, ComposeUiNode.SetModifier)</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ReusableComposeNode()</code>를 호출한다.</li><li>Node라고 하는 UI 요소 계층 구조를 내보낸다.</li><li>노드는 factory를 통해 생성된다.</li><li><code>update</code>: 업데이트를 수행하는 코드 작성</li><li><code>skippableUpdate</code>: 변경자를 조작하는 코드 작성 -&gt; <code>materialized</code>로 바뀜</li></ul><h4 id="ReusableComposeNode"><a href="#ReusableComposeNode" class="headerlink" title="ReusableComposeNode()"></a>ReusableComposeNode()</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Emits a recyclable node into the composition of type [T].</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This function will throw a runtime exception if [E] is not a subtype of the applier of the</span></span><br><span class="line"><span class="comment"> * [currentComposer].</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@sample</span> androidx.compose.runtime.samples.CustomTreeComposition</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> factory A function which will create a new instance of [T]. This function is NOT</span></span><br><span class="line"><span class="comment"> * guaranteed to be called in place.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> update A function to perform updates on the node. This will run every time emit is</span></span><br><span class="line"><span class="comment"> * executed. This function is called in place and will be inlined.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Updater</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Applier</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Composition</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// ComposeNode is a special case of readonly composable and handles creating its own groups, so</span></span><br><span class="line"><span class="comment">// it is okay to use.</span></span><br><span class="line"><span class="meta">@Suppress(<span class="string">&quot;NONREADONLY_CALL_IN_READONLY_COMPOSABLE&quot;</span>, <span class="string">&quot;UnnecessaryLambdaCreation&quot;</span>)</span></span><br><span class="line"><span class="meta">@Composable</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Any, <span class="keyword">reified</span> E : Applier&lt;*&gt;</span>&gt; <span class="title">ReusableComposeNode</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">noinline</span> factory: () -&gt; <span class="type">T</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    update: @<span class="type">DisallowComposableCalls</span> <span class="type">Updater</span>&lt;<span class="type">T</span>&gt;.() -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentComposer.applier !<span class="keyword">is</span> E) invalidApplier()</span><br><span class="line">    currentComposer.startReusableNode()</span><br><span class="line">    <span class="keyword">if</span> (currentComposer.inserting) &#123;</span><br><span class="line">        currentComposer.createNode &#123; factory() &#125;    <span class="comment">// 여기서 노드를 생성한다.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        currentComposer.useNode()   <span class="comment">// 기존 노드 사용</span></span><br><span class="line">    &#125;</span><br><span class="line">    currentComposer.disableReusing()</span><br><span class="line">    Updater&lt;T&gt;(currentComposer).update()</span><br><span class="line">    currentComposer.enableReusing()</span><br><span class="line">    currentComposer.endNode()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ReusableComposeNode</code>는 <strong>새로운 노드가 생성돼야 할지 또는 기존 노드를 재사용해야 할지를 결정한다.</strong></li><li><code>currentComposer</code>는 androidx.compose.runtime.Composables.kt에 있는 최상위 Composer 변수</li></ul><h4 id="ComposableUiNode"><a href="#ComposableUiNode" class="headerlink" title="ComposableUiNode"></a>ComposableUiNode</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface extracted from LayoutNode to not mark the whole LayoutNode class as <span class="doctag">@PublishedApi</span>.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PublishedApi</span></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComposeUiNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> measurePolicy: MeasurePolicy</span><br><span class="line">    <span class="keyword">var</span> layoutDirection: LayoutDirection</span><br><span class="line">    <span class="keyword">var</span> density: Density</span><br><span class="line">    <span class="keyword">var</span> modifier: Modifier</span><br><span class="line">    <span class="keyword">var</span> viewConfiguration: ViewConfiguration</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Object of pre-allocated lambdas used to make use with ComposeNode allocation-less.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> Constructor: () -&gt; ComposeUiNode = LayoutNode.Constructor</span><br><span class="line">        <span class="keyword">val</span> VirtualConstructor: () -&gt; ComposeUiNode = &#123; LayoutNode(isVirtual = <span class="literal">true</span>) &#125;</span><br><span class="line">        <span class="keyword">val</span> SetModifier: ComposeUiNode.(Modifier) -&gt; <span class="built_in">Unit</span> = &#123; <span class="keyword">this</span>.modifier = it &#125;</span><br><span class="line">        <span class="keyword">val</span> SetDensity: ComposeUiNode.(Density) -&gt; <span class="built_in">Unit</span> = &#123; <span class="keyword">this</span>.density = it &#125;</span><br><span class="line">        <span class="keyword">val</span> SetMeasurePolicy: ComposeUiNode.(MeasurePolicy) -&gt; <span class="built_in">Unit</span> =</span><br><span class="line">            &#123; <span class="keyword">this</span>.measurePolicy = it &#125;</span><br><span class="line">        <span class="keyword">val</span> SetLayoutDirection: ComposeUiNode.(LayoutDirection) -&gt; <span class="built_in">Unit</span> =</span><br><span class="line">            &#123; <span class="keyword">this</span>.layoutDirection = it &#125;</span><br><span class="line">        <span class="keyword">val</span> SetViewConfiguration: ComposeUiNode.(ViewConfiguration) -&gt; <span class="built_in">Unit</span> =</span><br><span class="line">            &#123; <span class="keyword">this</span>.viewConfiguration = it &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Modifier</li><li>Density</li><li>MeasurePolicy</li><li>LayoutDirection</li><li>VirtualConstructor (새로 생김)</li><li>ViewConfiguration (새로 생김)</li></ul><h3 id="값-반환"><a href="#값-반환" class="headerlink" title="값 반환"></a>값 반환</h3><ul><li>Composable 함수의 주목적은 UI 구성이기 때문에 대부분 반환 타입을 명시하지 않는다.</li><li>Composition이나 Recomposition의 일부인 무언가를 반환해야 한다면 반드시 Composable 함수여야 한다.</li><li>반환된 데이터가 Compose와 아무 관련이 없더 상태를 유지하기 위한 값으로 사용한다면 Composable 함수로 만들어야 한다.<ul><li><strong>이런 경우에는 함수명을 CamelCase로 작성</strong></li></ul></li></ul><h2 id="UI-구성과-재구성"><a href="#UI-구성과-재구성" class="headerlink" title="UI 구성과 재구성"></a>UI 구성과 재구성</h2><ul><li>Jetpack Compose는 앱 데이터가 변경되어 UI가 변경되어야 하는 경우 개발자가 선제적으로 컴포넌트 트리를 변경하는 행위에 의존하지 않는다.</li><li>대신 이러한 변화를 자체적으로 감지하고 영향을 받는 부분만 갱신한다.</li></ul><h3 id="Composable-함수-간-상태-공유"><a href="#Composable-함수-간-상태-공유" class="headerlink" title="Composable 함수 간 상태 공유"></a>Composable 함수 간 상태 공유</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ColorPicker</span><span class="params">(color: <span class="type">MutableState</span>&lt;<span class="type">Color</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> red = color.value.red</span><br><span class="line">    <span class="keyword">val</span> green = color.value.green</span><br><span class="line">    <span class="keyword">val</span> blue = color.value.blue</span><br><span class="line">    Column &#123;</span><br><span class="line">        Slider(</span><br><span class="line">            value = red,</span><br><span class="line">            onValueChange = &#123; color.value = Color(it, green, blue) &#125;)</span><br><span class="line">        Slider(</span><br><span class="line">            value = green,</span><br><span class="line">            onValueChange = &#123; color.value = Color(red, it, blue) &#125;)</span><br><span class="line">        Slider(</span><br><span class="line">            value = blue,</span><br><span class="line">            onValueChange = &#123; color.value = Color(red, green, it) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>ColorPicker()</code> 함수가 <code>Color</code>가 아닌 <code>MutableState&lt;Color&gt;</code> 를 파라미터로 받는 이유</p><ul><li>color의 값이 ColorPicker 안에서만 변경될 것이기 때문에 상위 Composable 함수에서 해당 변화에 대해 알 수 있어야 한다.</li></ul></li><li><p>전역 프로퍼티를 사용하는 방식도 있겠지만 이는 권고하지 않는 방식이며, 되도록 Composable 함수의 모습과 행위에 영향을 주는 모든 데이터는 매개변수(parameter)로 전달하는 것이 좋다.</p></li><li><p>state hoisting(상태 호이스팅): 상태를 전달받아 Composable 함수를 호출한 곳으로 상태를 옮기는 것</p></li></ul><blockquote><h3 id="중요-사항"><a href="#중요-사항" class="headerlink" title="중요 사항"></a>중요 사항</h3><p>Composable을 SideEffect가 없게 만들자. (동일한 인자로 함수를 반복적으로 호출해도 항상 동일한 결과를 생산함)</p><p>호출자로부터 모든 관련 데이터를 얻는 것 이외에도 전역프로퍼티에 의존하거나 예측 불가능한 값을 반환하는 함수 호출하는 것도 금지된다. -&gt; 보통 IDE에서 경고해주는 것 같다.</p></blockquote><ul><li>Compose UI는 Composable 함수의 중첩 호출로 정의된다.</li><li>Composable 함수는 UI 요소 또는 UI 요소 계층 구조를 발행한다.</li><li>UI를 처음 구성하는 것을 Composition이라고 부른다.</li><li>앱 데이터 변경 시 UI를 재구성하는 것을 Recomposition이라 부른다.</li><li>Recomposition은 자동으로 발생한다.</li></ul><h3 id="크기-제어"><a href="#크기-제어" class="headerlink" title="크기 제어"></a>크기 제어</h3><ul><li><code>fillMaxSize()</code>, <code>fillMAxWidth()</code>, <code>BoxWidthConstraints()</code> 등을 잘 활용해보기</li></ul><h3 id="액티비티-내에서-Composable-계층-구조-나타내기"><a href="#액티비티-내에서-Composable-계층-구조-나타내기" class="headerlink" title="액티비티 내에서 Composable 계층 구조 나타내기"></a>액티비티 내에서 Composable 계층 구조 나타내기</h3><blockquote><h4 id="setContent"><a href="#setContent" class="headerlink" title="setContent"></a>setContent</h4><p><strong>parent</strong>: null 값이 가능한 CompositionContext<br><strong>content</strong>: 선언하는 UI를 위한 Composable function</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ComponentActivity.kt</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> ComponentActivity.<span class="title">setContent</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    parent: <span class="type">CompositionContext</span>? = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    content: @<span class="type">Composable</span> () -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line"><span class="comment">// 액티비티가 이미 ComposeView의 인스턴스를 포함하는지 알아내기 위해 사용된다.</span></span><br><span class="line">    <span class="keyword">val</span> existingComposeView = window.decorView</span><br><span class="line">        .findViewById&lt;ViewGroup&gt;(android.R.id.content)</span><br><span class="line">        .getChildAt(<span class="number">0</span>) <span class="keyword">as</span>? ComposeView</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (existingComposeView != <span class="literal">null</span>) with(existingComposeView) &#123;</span><br><span class="line">        setParentCompositionContext(parent)</span><br><span class="line">        setContent(content)</span><br><span class="line">    &#125; <span class="keyword">else</span> ComposeView(<span class="keyword">this</span>).apply &#123; <span class="comment">// findViewById 실패 시 새로운 인스턴스 생성: ComposeView</span></span><br><span class="line">        <span class="comment">// Set content and parent **before** setContentView</span></span><br><span class="line">        <span class="comment">// to have ComposeView create the composition on attach</span></span><br><span class="line">        setParentCompositionContext(parent)</span><br><span class="line">        setContent(content)</span><br><span class="line">        <span class="comment">// Set the view tree owners before setting the content view so that the inflation process</span></span><br><span class="line">        <span class="comment">// and attach listeners will see them already present</span></span><br><span class="line">        setOwners()</span><br><span class="line">        setContentView(<span class="keyword">this</span>, DefaultActivityContentLayoutParams)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ComposeView.android.kt AbstractComposeView</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> parentContext: CompositionContext? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">set</span>(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (field !== value) &#123;</span><br><span class="line">            field = value</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">                cachedViewTreeCompositionContext = <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">val</span> old = composition</span><br><span class="line">            <span class="keyword">if</span> (old !== <span class="literal">null</span>) &#123;</span><br><span class="line">                old.dispose()</span><br><span class="line">                composition = <span class="literal">null</span></span><br><span class="line">                <span class="comment">// Recreate the composition now if we are attached.</span></span><br><span class="line">                <span class="keyword">if</span> (isAttachedToWindow) &#123;</span><br><span class="line">                    ensureCompositionCreated()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ComposeView.android.kt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parentContext 대체재 찾기 </span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">resolveParentCompositionContext</span><span class="params">()</span></span> = parentContext</span><br><span class="line">    ?: findViewTreeCompositionContext()?.cacheIfAlive()</span><br><span class="line">    ?: cachedViewTreeCompositionContext?.<span class="keyword">get</span>()?.takeIf &#123; it.isAlive &#125;</span><br><span class="line">    ?: windowRecomposer.cacheIfAlive()</span><br><span class="line"></span><br><span class="line"><span class="meta">@Suppress(<span class="string">&quot;DEPRECATION&quot;</span>)</span> <span class="comment">// Still using ViewGroup.setContent for now</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">ensureCompositionCreated</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (composition == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            creatingComposition = <span class="literal">true</span></span><br><span class="line">            composition = setContent(resolveParentCompositionContext()) &#123;</span><br><span class="line">                Content()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            creatingComposition = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Composable-함수의-행위-수정"><a href="#Composable-함수의-행위-수정" class="headerlink" title="Composable 함수의 행위 수정"></a>Composable 함수의 행위 수정</h2><ul><li><p>컴포넌트의 프로퍼티와 달리 Modifier는 전적으로 개발자의 판단에 따라 사용될 수 있다.</p></li><li><p>Modifier는 행동이나 정렬, 그리기와 같은 여러 범주 중 하나에 할당될 수 있다. <a href="https://developer.android.com/jetpack/compose/modifiers-list">Modifier 목록 링크</a></p></li><li><p>Modifier Chaining: 빌더 패턴처럼 Modifier의 속성을 정의</p></li></ul><h3 id="Modifier-동작-이해"><a href="#Modifier-동작-이해" class="headerlink" title="Modifier 동작 이해"></a>Modifier 동작 이해</h3><p>Modifier를 올바르게 사용하지 않으면, IDE에서는 다음과 같은 안내를 해준다.</p><p><img src="/images/jetpack_compose/chapter03/modifier.png" alt="Modifier parameter shouble be the first optional parameter"></p><p>어떤 경우에 이런 경고가 나오는 지 예시 코드를 보자</p><ul><li>modifier는 첫 번째로 오는 nullable parameter가 되어야 한다. 말이 어려우니까 예시를 보자</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TextWithWarning1</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="type">String</span> = <span class="string">&quot;Default&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="params"><span class="function">    callback: () -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    Text(text = <span class="string">&quot;TextWithWarning1 <span class="variable">$name</span>!&quot;</span>, modifier = modifier</span><br><span class="line">        .background(Color.Yellow)</span><br><span class="line">        .clickable &#123; callback.invoke() &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TextWithWarning2</span><span class="params">(test: <span class="type">Modifier</span> = Modifier, name: <span class="type">String</span> = <span class="string">&quot;&quot;</span>, callback: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    Text(text = <span class="string">&quot;TextWithWarning2 <span class="variable">$name</span>!&quot;</span>, modifier = test</span><br><span class="line">        .background(Color.Yellow)</span><br><span class="line">        .clickable &#123; callback.invoke() &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TextWithoutWarning</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="params"><span class="function">    buttonModifier: <span class="type">Modifier</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="type">String</span> = <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    callback: () -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    Column(horizontalAlignment = Alignment.CenterHorizontally) &#123;</span><br><span class="line">        Text(text = <span class="string">&quot;TextWithoutWarning <span class="variable">$name</span>!&quot;</span>, modifier = modifier</span><br><span class="line">            .padding(<span class="number">10.</span>dp) <span class="comment">// margin concept</span></span><br><span class="line">            .background(Color.Yellow)</span><br><span class="line">            .padding(<span class="number">10.</span>dp) <span class="comment">// real padding</span></span><br><span class="line">            .clickable &#123; callback.invoke() &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> context = LocalContext.current</span><br><span class="line">        Button(</span><br><span class="line">            modifier = buttonModifier.clickable &#123;</span><br><span class="line">                Toast.makeText(context, <span class="string">&quot;버튼에 clickable을 넣으면?&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">            &#125;,</span><br><span class="line">            onClick = &#123; Toast.makeText(context, <span class="string">&quot;버튼 클릭됨&quot;</span>, Toast.LENGTH_SHORT).show() &#125;) &#123;</span><br><span class="line">            Text(<span class="string">&quot;버튼&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위의 예시 코드에서 보듯이 nullable한 parameter가 먼저 오게 되면, Composable 함수를 사용할 때 굳이 정의하지 않아도 되는 parameter값의 초기화를 강제받게 된다.</li><li>부모 Composable 함수에서 정의한 Modifier를 자식 Composable 함수에서 추가로 설정하기 위해 Modifier를 반드시 받는 구조이기 때문에 NonNull인 Modifier를 맨 앞으로 가져오는 것이 경제적이라고 보면 되겠다.</li><li>그리고 잘 보면 변수의 naming도 modifier 이거나 modifier를 사용할 Composable 함수의 이름을 접두사로 사용하면서 camelCase형식으로 적혀있기를 원한다.</li><li>그리고 Modifier는 <strong>Modifier 요소의 순서가 있고</strong> 한번 정의하면 재정의할 수 없는 <strong>변경 불가능한 컬렉션</strong>이다.</li></ul><h4 id="Modifier-then"><a href="#Modifier-then" class="headerlink" title="Modifier.then()"></a>Modifier.then()</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Background.kt</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Modifier.<span class="title">background</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    color: <span class="type">Color</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    shape: <span class="type">Shape</span> = RectangleShape</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> = <span class="keyword">this</span>.then(<span class="comment">// other parameter에 Background 인스턴스가 들어감</span></span><br><span class="line">    Background(</span><br><span class="line">        color = color,</span><br><span class="line">        shape = shape,</span><br><span class="line">        inspectorInfo = debugInspectorInfo &#123;</span><br><span class="line">            name = <span class="string">&quot;background&quot;</span></span><br><span class="line">            value = color</span><br><span class="line">            properties[<span class="string">&quot;color&quot;</span>] = color</span><br><span class="line">            properties[<span class="string">&quot;shape&quot;</span>] = shape</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Modifier.kt</span></span><br><span class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="title">then</span><span class="params">(other: <span class="type">Modifier</span>)</span></span>: Modifier =</span><br><span class="line">    <span class="keyword">if</span> (other === Modifier) <span class="keyword">this</span> <span class="keyword">else</span> CombinedModifier(<span class="keyword">this</span>, other)</span><br></pre></td></tr></table></figure><ul><li>Background 클래스를 내부적으로 사용하고 있고, 최종적으로 Modifier.Element라는 인터페이스를 implement하고 있다.</li><li>이 Modifier.Element 구현체로 UI요소의 공간에 그림을 그릴 수 있다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Background.kt</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Background</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> color: Color? = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> brush: Brush? = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> alpha: <span class="built_in">Float</span> = <span class="number">1.0f</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> shape: Shape,</span><br><span class="line">    inspectorInfo: InspectorInfo.() -&gt; <span class="built_in">Unit</span></span><br><span class="line">) : DrawModifier, InspectorValueInfo(inspectorInfo) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DrawModifier.kt</span></span><br><span class="line"><span class="meta">@JvmDefaultWithCompatibility</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DrawModifier</span> : <span class="type">Modifier.Element &#123;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> ContentDrawScope.<span class="title">draw</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="커스텀-Modifier-구현"><a href="#커스텀-Modifier-구현" class="headerlink" title="커스텀 Modifier 구현"></a>커스텀 Modifier 구현</h3><ul><li>kotlin 문법을 사용해 쉽게 Extension을 구현할 수 있었다.</li><li>위에서 봤던 then() 함수에 DrawModifier만 잘 만들면 된다. (마치 View를 확장해서 만들었던 Custom View와 유사해 보인다.)</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Modifier.<span class="title">drawWhiteCross</span><span class="params">()</span></span> = then(</span><br><span class="line">    <span class="keyword">object</span> : DrawModifier &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ContentDrawScope.<span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">            drawLine(</span><br><span class="line">                color = Color.White,</span><br><span class="line">                start = Offset(<span class="number">0F</span>, <span class="number">0F</span>),</span><br><span class="line">                end = Offset(size.width - <span class="number">1</span>, size.height - <span class="number">1</span>),</span><br><span class="line">                strokeWidth = <span class="number">10F</span></span><br><span class="line">            )</span><br><span class="line">            drawLine(</span><br><span class="line">                color = Color.White,</span><br><span class="line">                start = Offset(<span class="number">0F</span>, size.height - <span class="number">1</span>),</span><br><span class="line">                end = Offset(size.width - <span class="number">1</span>, <span class="number">0F</span>),</span><br><span class="line">                strokeWidth = <span class="number">10F</span></span><br><span class="line">            )</span><br><span class="line">            drawContent()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Modifier.<span class="title">drawHiddenCross</span><span class="params">()</span></span> = then(</span><br><span class="line">    <span class="keyword">object</span> : DrawModifier &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ContentDrawScope.<span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">            drawContent()</span><br><span class="line">            drawBehind &#123;</span><br><span class="line">                drawLine(</span><br><span class="line">                    color = Color.Blue,</span><br><span class="line">                    start = Offset(<span class="number">0F</span>, <span class="number">0F</span>),</span><br><span class="line">                    end = Offset(size.width - <span class="number">1</span>, size.height - <span class="number">1</span>),</span><br><span class="line">                    strokeWidth = <span class="number">10F</span></span><br><span class="line">                )</span><br><span class="line">                drawLine(</span><br><span class="line">                    color = Color.Blue,</span><br><span class="line">                    start = Offset(<span class="number">0F</span>, size.height - <span class="number">1</span>),</span><br><span class="line">                    end = Offset(size.width - <span class="number">1</span>, <span class="number">0F</span>),</span><br><span class="line">                    strokeWidth = <span class="number">10F</span></span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><ul><li>Composable 함수가 어떻게 작성되었고, UI를 그리고 사용되었는지 배웠다.</li><li>Modifier가 무엇이고 어떻게 사용하는 것인지 알아보았다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> jetpack-compose-study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2장 선언적 패러다임 이해</title>
      <link href="/2023/02/08/jetpack_compose/chapter02/"/>
      <url>/2023/02/08/jetpack_compose/chapter02/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Just-Android-Compose-Study/JetpackComposeStudy/tree/master/Chapter02">Source Code</a></p><h2 id="안드로이드-뷰-시스템-살펴보기-xml-방식"><a href="#안드로이드-뷰-시스템-살펴보기-xml-방식" class="headerlink" title="안드로이드 뷰 시스템 살펴보기 (xml 방식)"></a>안드로이드 뷰 시스템 살펴보기 (xml 방식)</h2><ul><li>layout 파일에서 xml 계층 구조를 통해 기본 UI를 작성해왔다.</li><li>…Layout 태그로 감싸게 되면 자식 노드의 크기와 위치를 지정해야 하는 책임이 생긴다.</li><li>layout과 non-layout 요소를 통틀어서 컴포넌트라고 한다.</li></ul><h3 id="layout-file-inflating"><a href="#layout-file-inflating" class="headerlink" title="layout file inflating"></a>layout file inflating</h3><ul><li>layout 파일의 id를 직접 참조하여 UI요소를 정의하는 방식 (<em>findViewById</em>)</li><li>ViewBinding: 컴포넌트의 참조를 계속 유지하지 않아도 binding 변수에 참조를 유지시켜 사용하는 방식</li></ul><blockquote><p>UI를 XML 파일로 정의</p><p>UI를 런타임 단계에서 컴포넌트 트리로 인플레이트된다.</p><p>UI를 변경하려면 연관된 모든 컴포넌트의 속성을 수정해야만 한다.</p><p>UI 요소가 화면에서 보이지 않더라도 컴포넌트 트리의 요소로 남아있다.</p></blockquote><ul><li>위의 내용을 이유로 xml 방식의 일반적 UI 프레임워크를 명령적(<em>imperative</em>)인 방법이라고 한다.</li><li>앱에 UI 요소가 많아질수록 변경 사항을 추적하는 부담도 점점 커진다.</li><li>개발자는 도메인 데이터의 변경이 일어나면, 도메인 데이터의 어느 부분이 어떤 UI 요소와 관련이 있는지 알아야 하며, 컴포넌트 트리를 적절히 수정해야만 한다.</li></ul><h2 id="컴포넌트에서-컴포저블-함수로-이동"><a href="#컴포넌트에서-컴포저블-함수로-이동" class="headerlink" title="컴포넌트에서 컴포저블 함수로 이동"></a>컴포넌트에서 컴포저블 함수로 이동</h2><ul><li>컴포넌트는 메시지를 주고받는 방식을 사용해 시스템의 다른 부분과 통신한다.</li><li>컴포넌트의 모습이나 행위는 일련의 속성이나 프로퍼티로 제어한다.</li><li>layout 파일은 xml 문법을 사용해 Java&#x2F;Kotlin 파일 외부에 있는 컴포넌트 트리를 서술한다. (현재 상태와 무관하게 UI를 정의함)</li><li>android.view.View가 최상의 Android UI 요소이고, 여기서부터 상속하여 다양한 UI 클래스가 만들어졌다.</li></ul><h3 id="컴포넌트-계층-구조의-한계"><a href="#컴포넌트-계층-구조의-한계" class="headerlink" title="컴포넌트 계층 구조의 한계"></a>컴포넌트 계층 구조의 한계</h3><blockquote><p><strong>이미지와 텍스트를 모두 보여주는 버튼을 만드는 케이스</strong></p></blockquote><ul><li>Java의 단일 상속 기반 속성을 가지고 있기 때문이다.</li><li>하나 이상의 컴포넌트의 개별 기능을 조합하는 것이 불가능 -&gt; 개별 기능을 분리할 수 없기 때문에, 재활용이 컴포넌트 단계에서 발생하기 때문</li><li>결론적으로 UI를 확장시켜 개발하는 데에 한계가 있다.</li></ul><h3 id="함수를-통한-UI-구성"><a href="#함수를-통한-UI-구성" class="headerlink" title="함수를 통한 UI 구성"></a>함수를 통한 UI 구성</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Factorial</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> expanded <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="literal">false</span>) &#125;  <span class="comment">// 상태 값 -&gt; Composable 함수에서 parameter로 사용되면 이 값이 변경될 때 마다 Recomposition이 발생한다.</span></span><br><span class="line">    <span class="keyword">var</span> text <span class="keyword">by</span> remember &#123; mutableStateOf(factorialAsString(<span class="number">0</span>)) &#125; <span class="comment">// 상태 값</span></span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier.fillMaxSize(),</span><br><span class="line">        contentAlignment = Alignment.Center</span><br><span class="line">    ) &#123;</span><br><span class="line">        Text(</span><br><span class="line">            modifier = Modifier.clickable &#123;</span><br><span class="line">                expanded = <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            text = text,</span><br><span class="line">            style = MaterialTheme.typography.h2</span><br><span class="line">        )</span><br><span class="line">        DropdownMenu(</span><br><span class="line">            expanded = expanded,    <span class="comment">// expanded 값에 따라 dropdown이 열리고 닫힌다.</span></span><br><span class="line">            onDismissRequest = &#123;</span><br><span class="line">                expanded = <span class="literal">false</span></span><br><span class="line">            &#125;) &#123;</span><br><span class="line">            <span class="keyword">for</span> (n <span class="keyword">in</span> <span class="number">0</span> until <span class="number">10</span>) &#123;</span><br><span class="line">                DropdownMenuItem(onClick = &#123;</span><br><span class="line">                    expanded = <span class="literal">false</span></span><br><span class="line">                    text = factorialAsString(n)</span><br><span class="line">                &#125;) &#123;</span><br><span class="line">                    Text(<span class="string">&quot;<span class="subst">$&#123;n.toString()&#125;</span>!&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Compose UI의 진입점은 Composable 함수다.</li><li>Composable 함수는 주로 content parameter를 전달받는데, 이는 다른 Composable 함수다.</li><li>호출 순서는 다른 UI 요소와 비교해 UI 요소가 위치할 곳을 제어한다.</li><li><strong>Android layout 파일은 초기 상태로 컴포넌트 트리를 정의하는 반면 Composable UI는 항상 실제 데이터를 사용해 정의된다.</strong></li><li>recomposition(재구성): Compose UI 업데이트 과정, Composable 함수가 업데이트 되어야 할 때마다 자동으로 발생한다.</li><li>state: 시간이 지나면서 변경되는 값, **mutableStateOf()**를 사용해 상태를 생성했었다. (1장에서)</li></ul><h2 id="아키텍처-관점에서-설명"><a href="#아키텍처-관점에서-설명" class="headerlink" title="아키텍처 관점에서 설명"></a>아키텍처 관점에서 설명</h2><ul><li>Composable 함수는 공유되는 일련의 property가 존재하지 않는다.</li><li>@Composable Annotation을 함수에 추가하는 것으로 Jetpack Compose의 특정 부분에서 함수를 인지하게 할 수 있다.</li></ul><h3 id="클릭-동작에-반응"><a href="#클릭-동작에-반응" class="headerlink" title="클릭 동작에 반응"></a>클릭 동작에 반응</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ButtonDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Box &#123;</span><br><span class="line">        Button(</span><br><span class="line">            onClick = &#123; println(<span class="string">&quot;clicked&quot;</span>) &#125;,</span><br><span class="line">            enabled = <span class="literal">false</span></span><br><span class="line">        ) &#123;</span><br><span class="line">            Text(</span><br><span class="line">                <span class="string">&quot;Click me!&quot;</span>,</span><br><span class="line">                modifier = Modifier.clickable &#123; <span class="comment">// 개별 기능만 추가한 사례</span></span><br><span class="line">                    println(<span class="string">&quot;text clicked&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UI-요소-크기-조절과-배치"><a href="#UI-요소-크기-조절과-배치" class="headerlink" title="UI 요소 크기 조절과 배치"></a>UI 요소 크기 조절과 배치</h3><p>컴포넌트 중심의 UI 프레임워크에서는 크기와 위치를 화면에 나타내는 프로퍼티가 핵심이다.<br>…Layout으로 이름이 끝나는 노드들은 자식 컴포넌트의 크기와 위치를 조정하는 능력을 갖는 컨테이너이다.</p><blockquote><p>그래서 Compose는?</p></blockquote><p>Row(), Column(), Box() 등을 사용하고, Modifier를 통해 위치 재정의를 한다.</p><h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><ul><li>컴포넌트 중심의 UI 프레임워크의 핵심 요소<ul><li>UI를 런타임 단계에서 컴포넌트 트리로 인플레이트된다.</li><li>UI를 변경하려면 연관된 모든 컴포넌트의 속성을 수정해야만 한다.</li><li>UI 요소가 화면에서 보이지 않더라도 컴포넌트 트리의 요소로 남아있다.</li></ul></li><li>이 핵심 요소들의 한계점과 이를 Compose가 극복하는 방법<ul><li>Modifier 매커니즘을 사용</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> jetpack-compose-study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1장 Compose App 첫 빌드</title>
      <link href="/2023/02/05/jetpack_compose/chapter01/"/>
      <url>/2023/02/05/jetpack_compose/chapter01/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Just-Android-Compose-Study/JetpackComposeStudy/tree/master/Chapter01">Source Code</a></p><h3 id="환영-인사-나타내기"><a href="#환영-인사-나타내기" class="headerlink" title="환영 인사 나타내기"></a>환영 인사 나타내기</h3><ul><li>xml에 있는 ui가 아닌 compose.material3에 있는 UI 객체 사용한다.</li><li>compose.ui.res.stringResource() 사용해서 strings.xml의 값 참조한다.</li></ul><h3 id="열-텍스트-필드-버튼-사용"><a href="#열-텍스트-필드-버튼-사용" class="headerlink" title="열, 텍스트 필드, 버튼 사용"></a>열, 텍스트 필드, 버튼 사용</h3><ul><li><strong>Row()</strong>: 가로로 UI 배치한다.</li><li><strong>Modifier(변경자)</strong>: Composable 함수의 외형과 행위에 영향을 준다. -&gt; 3장에 이어서</li><li><strong>padding</strong>: 원하는 dp(density-independent pixels) 만큼 공간 생성</li><li><strong>MutableState</strong>: 변경할 수 있는 값, MutableState 타입의 값을 변경하면 컴포저블 함수는 다시 그려지거나 다시 채색된다.</li></ul><h3 id="인사말-출력"><a href="#인사말-출력" class="headerlink" title="인사말 출력"></a>인사말 출력</h3><ul><li><strong>mutableStateOf</strong>: 변경될 수 있는 상태 값 생성</li><li><strong>remember</strong>: 변경될 수 있는 상태를 기록(기억)</li><li><strong>Column()</strong>: 세로로 UI 배치한다.</li></ul><h3 id="Preview-사용"><a href="#Preview-사용" class="headerlink" title="Preview 사용"></a>Preview 사용</h3><ul><li>preview group 설정 가능</li><li>showSystemUi 사용해 시스템 UI 프리뷰에 표현 가능</li></ul><h3 id="컴포저블-함수"><a href="#컴포저블-함수" class="headerlink" title="컴포저블 함수"></a>컴포저블 함수</h3><ul><li>컴포저블 함수는 클래스의 일부가 될 필요가 없다.</li><li>가능하다면 최상위 함수로 구현해야 한다.</li><li>Jetpack Compose는 Context에 접근할 수 있는 대체 수단을 제공한다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> jetpack-compose-study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 개발부터 출시까지 (LINKPOOL) - 1</title>
      <link href="/2023/01/25/flutter/linkpool/2/"/>
      <url>/2023/01/25/flutter/linkpool/2/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/flutter/linkpool/title.png"></p><h3 id="Flutter-상태-관리-소개"><a href="#Flutter-상태-관리-소개" class="headerlink" title="Flutter 상태 관리 소개"></a>Flutter 상태 관리 소개</h3><p>Flutter가 나날이 인기가 늘어가면서 상태 관리를 도와주는 플러그인도 많이 생겨났다.<br>내가 사용해본건 getx, provider, bloc 정도이고, 그 외에 riverpod이라는 것도 있다고 한다.</p><p><a href="https://pub.dev/packages/get">getx 링크</a><br><a href="https://pub.dev/packages/provider">provider 링크</a><br><a href="https://pub.dev/packages/bloc">bloc 링크</a><br><a href="https://pub.dev/packages/flutter_bloc">flutter_bloc 링크</a><br><a href="https://pub.dev/packages/flutter_riverpod">flutter_riverpod 링크</a></p><p>pub.dev의 좋아요 순은 <strong>getx &gt; provider &gt; flutter_bloc &gt; flutter_riverpod</strong> 이지만, github star를 받은 Repository 순서는 좀 달랐다.</p><p><em><strong>flutter_bloc &gt; getx &gt; provider &gt; flutter_riverpod</strong></em> 순서로 flutter_bloc이 제일 많았다.</p><blockquote><p><img src="/images/flutter/linkpool/2/1.png" alt="flutter_bloc"><br><img src="/images/flutter/linkpool/2/2.png" alt="getx"><br><img src="/images/flutter/linkpool/2/3.png" alt="provider"><br><img src="/images/flutter/linkpool/2/4.png" alt="flutter_riverpod"></p></blockquote><p>각각의 상태관리 플러그인마다 당연히 장단점이 존재하는데, 이걸 자세히 분석해 준 글도 있으니 비교 글을 검색하여 참고해보자 (전에 누가 표로 정리해놓은 블로그 글을 봤었는데 지금 찾아보니 안보인다 ㅠㅠ)</p><h3 id="flutter-bloc를-선택한-이유"><a href="#flutter-bloc를-선택한-이유" class="headerlink" title="flutter_bloc를 선택한 이유"></a>flutter_bloc를 선택한 이유</h3><p>먼저 flutter_bloc 문서에 있는 그림을 보자</p><p><img src="/images/flutter/linkpool/2/5.png" alt="bloc"></p><p>이 cubit이라는 개념이 선택을 하게 된 중요한 이유가 되었는데, MVVM의 ViewModel 개념과 달리 하나의 객체를 지정하여 상태관리를 하는 Cubit을 생성하여 자칫 잘못 사용하면 하나의 View에 대해 모든 로직을 처리해야 하는 ViewModel이 생기는 것을 막아주어서 좋다고 생각했다.</p><p>작은 프로젝트에서 사용하기에는 부정적인 시각도 좀 있는 것 같지만, 정확하게 구별된 상태관리를 하려는 관점에서는 좋았던 것 같다.</p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
            <tag> linkpool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 개발부터 출시까지 (LINKPOOL) - 0</title>
      <link href="/2023/01/11/flutter/linkpool/1/"/>
      <url>/2023/01/11/flutter/linkpool/1/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/flutter/linkpool/title.png"></p><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p>2022년 9월부터 <strong>사이드</strong> 프로젝트를 시작해 현재는 <strong>베타 테스트</strong> 단계까지 도달한 프로젝트의 개발 과정에 대해서 천천히 글을 써보려고 한다.</p><p>앱 이름은 <strong>LINKPOOL</strong>이고, 웹 브라우저나 기타 유튜브, 인스타그램 등의 앱에서 공유하기 기능을 통해 링크를 수집하고, 타인과 공유할 수 있다.</p><p>현재(2023년 1월)까지 약 4개월 간의 기간 동안 낮에는 회사 업무하고 밤에는 이 앱을 개발하느라 고생좀 했다.</p><p>이 프로젝트에 대한 기록이 언제 끝날지 모르겠지만 개발하면서 새로 알게 된 지식이나 공유할 만한 정보들을 꾸준히 적어보고자 한다.</p><p>Flutter 개발에 대한 내용도 있고, AOS&#x2F;iOS 네이티브 개발, Firebase, CI&#x2F;CD 등 짚고 넘어갈만한 경험들이 많았어서 나 자신의 기억력 보존을 위해서도 이 글쓰기가 꽤 도움이 될 것 같다.</p><p>마지막으로 PlayStore와 AppStore에 각각 베타 테스트 통과한 인증샷 ㅎㅎ</p><h3 id="PlayStore-공개-테스트"><a href="#PlayStore-공개-테스트" class="headerlink" title="PlayStore 공개 테스트"></a>PlayStore 공개 테스트</h3><p><img src="/images/flutter/linkpool/1/1.png" alt="1"></p><h3 id="AppStore-TestFlight-Beta-테스트"><a href="#AppStore-TestFlight-Beta-테스트" class="headerlink" title="AppStore TestFlight Beta 테스트"></a>AppStore TestFlight Beta 테스트</h3><p><img src="/images/flutter/linkpool/1/2.png" alt="2"></p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
            <tag> linkpool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter Clean Architecture</title>
      <link href="/2022/03/18/flutter/data/flutter-clean-architecture/"/>
      <url>/2022/03/18/flutter/data/flutter-clean-architecture/</url>
      
        <content type="html"><![CDATA[<ul><li>오준석님의 “Flutter 중급 - 클린 아키텍처” 강의 내용을 인용하여 작성합니다.</li><li><a href="https://www.inflearn.com/course/%ED%94%8C%EB%9F%AC%ED%84%B0-%EC%A4%91%EA%B8%89">강의 링크</a></li></ul><p><img src="/images/flutter/data/img.png" alt="클린 아키텍처"></p><ul><li>사람마다 프로젝트를 설계하는 방식에 차이는 있겠지만, 최근 Flutter로 프로젝트를 수행해보면서 위와 같은 MVVM 모델의 구조가 앱 개발을 위한 프로젝트 구조에 있어서 나름 괜찮다고 생각합니다.</li></ul><h3 id="노트-앱-예제-프로젝트-구조"><a href="#노트-앱-예제-프로젝트-구조" class="headerlink" title="노트 앱 예제 프로젝트 구조"></a>노트 앱 예제 프로젝트 구조</h3><p>&#x2F;lib 아래에서 코드 작성</p><h4 id="entity-data-layer"><a href="#entity-data-layer" class="headerlink" title="entity(data) layer"></a>entity(data) layer</h4><ul><li>&#x2F;lib&#x2F;data&#x2F;data_source: 로컬 DB와 접근</li><li>&#x2F;lib&#x2F;data&#x2F;repository: domain layer의 repository를 구현</li></ul><blockquote><p>data_source 영역에 로컬 DB나 서버 API 등 데이터 제공자가 되는 영역을 구현하면 되겠습니다.</p><p>domain layer에서 추상적으로 작성되어 있는 코드들을 구체적으로 구현해야 합니다. </p></blockquote><h4 id="domain-layer"><a href="#domain-layer" class="headerlink" title="domain layer"></a>domain layer</h4><ul><li>&#x2F;lib&#x2F;domain&#x2F;model: 데이터 모델</li><li>&#x2F;lib&#x2F;domain&#x2F;repository: 기능 선언</li><li>&#x2F;lib&#x2F;domain&#x2F;use_case: 비즈니스 로직 구현부</li></ul><blockquote><p>구현에 대한 상세 내용을 data layer에서 가져오면 use_case 영역에서 해당 기능별 비즈니스 로직을 작성합니다.</p></blockquote><h4 id="presentation-layer"><a href="#presentation-layer" class="headerlink" title="presentation layer"></a>presentation layer</h4><ul><li>&#x2F;lib&#x2F;presentation&#x2F;notes: 노트 화면</li><li>&#x2F;lib&#x2F;presentation&#x2F;add_edit_note: 추가 화면</li></ul><blockquote><p>ViewModel: UI에 표현될 데이터들을 use_case를 통해 가져와 화면에 데이터를 표현할 수 있도록 도와줍니다.<br>use_case에서 딱히 처리하는 로직이 영원히 없을거라면 domain layer의 repository를 바로 참조하는 것도 괜찮습니다.<br><strong>처음 프로젝트 할 때에는 use_case를 만들지 않고 호출해보다가 ViewModel에 구현되어 있는 비즈니스 로직이 보이면 그 때 리팩토링 하면 되겠습니다.</strong></p><p>View: 데이터를 처리해야 할 로직이 있다면 ViewModel에게 요청합니다.</p></blockquote><h4 id="기타"><a href="#기타" class="headerlink" title="기타"></a>기타</h4><ul><li>&#x2F;lib&#x2F;core: 프로젝트 전역에서 사용할 공용 함수 정의<ul><li>logging이나 원하는 Time String을 만들어주는 함수 등 필요한 공용 함수를 작성하면 되겠습니다.</li></ul></li><li>&#x2F;lib&#x2F;ui: UI에서 공통으로 쓰일 위젯들 정의<ul><li>공통으로 사용할 dialog, button, text의 디자인적인 부분을 정의하면 좋을 것 같습니다.</li></ul></li><li>&#x2F;lib&#x2F;di: 의존성 주입 관리<ul><li>GetX, provider 등을 사용할 때 유용했습니다.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dart 문법 사용 시 주의사항</title>
      <link href="/2022/03/18/flutter/data/flutter-dart/"/>
      <url>/2022/03/18/flutter/data/flutter-dart/</url>
      
        <content type="html"><![CDATA[<ul><li>Flutter 앱을 개발하면서 Dart 언어를 사용할 때 몇가지 주의해야 할 내용들에 대해 다루겠습니다.</li><li>Dart 문법 관련 문서: <a href="https://dart.dev/guides/language/language-tour#a-basic-dart-program">https://dart.dev/guides/language/language-tour#a-basic-dart-program</a></li></ul><h3 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a>dynamic</h3><ul><li>Dart에서 method 선언 시 리턴 타입을 입력하지 않으면 기본적으로 dynamic 타입으로 리턴하게 됩니다.</li><li>dynamic은 null 여부를 확인해야 할 뿐만 아니라 어떤 데이터 타입이 반환될 지 알 수 없는 상황에서는 사용을 피하는 것이 좋겠습니다.<br>(개인적으로 여러 데이터 타입으로 반환해야 하는 경우라면 설계를 변경하거나 객체화하는 것이 좋겠습니다.)</li><li>IDE의 code snippet 기능을 활용하기에도 타입이 지정되어 있는 편이 개발이 편합니다.</li></ul><h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><ul><li>문서: <a href="https://dart.dev/guides/language/language-tour#implicit-interfaces">https://dart.dev/guides/language/language-tour#implicit-interfaces</a></li><li>class를 interface처럼 사용할 수 있습니다.</li><li>abstract class를 사용해도 좋습니다.</li></ul><h3 id="null-safety"><a href="#null-safety" class="headerlink" title="null-safety"></a>null-safety</h3><ul><li>문서: <a href="https://dart.dev/null-safety/understanding-null-safety">https://dart.dev/null-safety/understanding-null-safety</a></li><li>간혹 사용하고자 하는 라이브러리가 오래되어 null-safety 지원이 안 될 수 있습니다.</li><li>flutter 실행 시 ‘–no-sound-null-safety’ 옵션을 추가해주세요.</li></ul><h3 id="late"><a href="#late" class="headerlink" title="late"></a>late</h3><ul><li>late 키워드로 선언한 변수는 적어도 객체 생성이 끝나기 전에 초기화 해야 합니다.</li><li>만약 비동기로 초기화 될 데이터가 있다면 ‘Future&lt;타입&gt;’ 으로 선언하거나 ‘?’ 키워드를 사용해 먼저 null로 초기화 해주세요.</li></ul><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><ul><li>과거 flutter 코드를 찾아보면 new 키워드를 사용하는 코드가 있는데, 현재는 사용할 필요 없이 객체 생성을 해도 아무 문제가 없습니다.</li></ul><h3 id="문자열"><a href="#문자열" class="headerlink" title="문자열"></a>문자열</h3><ul><li>dart linter에서는 기본적으로 문자열 초기화 시 작은 따옴표를 권장합니다.</li></ul><h3 id="try-catch-stacktrace"><a href="#try-catch-stacktrace" class="headerlink" title="try-catch stacktrace"></a>try-catch stacktrace</h3><ul><li>어쩔 수 없이 try-catch를 사용해야 하는 상황에서 에러 코드의 stacktrace를 얻으려면 ‘catch(error, stacktrace)’를 통해 두 번째 파라미터에 오는 값을 사용하면 됩니다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 의존성 주입 - GetX</title>
      <link href="/2022/03/18/flutter/data/flutter-getx/"/>
      <url>/2022/03/18/flutter/data/flutter-getx/</url>
      
        <content type="html"><![CDATA[<ul><li>문서: <a href="https://pub.dev/packages/get">https://pub.dev/packages/get</a></li><li>의존성 주입 플러그인이고, 다음에 설명할 ‘provider’ 플러그인보다 간편한 코드 작성이 장점입니다.<ul><li>예를 들어, 프로젝트 전역에서 현재 context를 손쉽게 호출할 수도 있습니다.</li></ul></li><li>왜 Getx를 사용해야 하는가에 대해 문서에도 잘 나와있습니다. <a href="https://pub.dev/packages/get#why-getx">링크</a></li></ul><h3 id="Why-Getx-요약"><a href="#Why-Getx-요약" class="headerlink" title="Why Getx? 요약"></a>Why Getx? 요약</h3><ol><li>Flutter 업데이트에 따른 패키지 종속성&#x2F;호환성 이슈 해결</li><li>개발자들이 싫어하는 상용구를 간소화</li><li>상태 값이 바뀔 때 편리하게(변수 뒤에 .obs 붙여서) 화면을 자동 업데이트</li><li>최소한의 리소스를 사용하게 하여 성능 향상</li><li>뷰의 비즈니스 로직에 의존하지 않도록 분리</li></ol><h3 id="구현-순서"><a href="#구현-순서" class="headerlink" title="구현 순서"></a>구현 순서</h3><ul><li>확립되어 있는 개발 방식이랄게 없는 단계이지만, 제가 구현한 방식 위주로 소개해보겠습니다.</li></ul><ol><li>main() 안에 엡 화면 라우팅을 위한 페이지 선언을 하면서, 바인딩할 객체를 지정합니다. (Bindings)</li><li>바인딩 클래스들을 한 파일에 넣어놓고, 나중에 화면 내부에서 필요한 의존성이 생길 때마다 이 파일에 ‘Get.put()’을 이용해 GetxController 및 기타 세부 구현체에 대한 의존성을 추가해줍니다.</li><li>기본적으로 1개의 화면 당 하나의 <strong>GetxController</strong> 상속 클래스를 매칭하여 UI 클래스를 **GetView&lt;GetxController 상속 클래스&gt;**로 정의합니다.</li><li>데이터 로직에 대한 부분은 최대한 <strong>GetxController</strong> 상속 클래스에 ViewModel 형태로 구현합니다.</li><li>이 후로는 자유롭게 본인의 스타일로 프로젝트를 만들어나가면서 자신만의 노하우가 생길 것입니다.</li></ol><h3 id="사용-팁…"><a href="#사용-팁…" class="headerlink" title="사용 팁…?"></a>사용 팁…?</h3><ul><li>UI를 그릴 위젯을 StatelessWidget&#x2F;StatefulWidget이 아닌 <strong>GetView</strong>를 상속하면, 상태관리가 훨씬 쉽습니다.<ul><li><strong>GetView</strong>는 내부적으로 각 ViewModel 영역을 담당할 <strong>GetxController</strong> 클래스의 구현 클래스를 <strong>Generic Type</strong>으로 받습니다.</li><li>내부에서 <strong>StatelessWidget</strong> 형태를 띄고 있기 때문에 <strong>StatefulWidget</strong>을 더이상 쓰지 않아도 된다고 문서에 써있긴 한데,<br><strong>StatefulWidget</strong>으로 구현하면 더 쉽게 그려질 UI를 굳이 번거롭게 <strong>GetView</strong>로 구현하지는 않아도 될 것 같습니다.</li></ul></li><li>화면 업데이트를 .obs 값으로 관리하기가 불편하다면, update() 함수를 호출해서 원하는 시점에 build() 메서드를 실행해줍니다.<ul><li>update()는 GetxController 클래스에 선언된 메서드입니다.</li><li>update() 사용 시 controller에서 View를 따로 지정하여 업데이트 한 것이 아니므로, UI 코드에서 <strong>GetxController</strong>의 update() 실행 시 업데이트 될 영역을 GetBuilder 위젯으로 wrapping하면 됩니다.</li></ul></li><li><a href="https://pub.dev/packages/get#other-advanced-apis">이 링크</a>에 자주 쓰일만한 메서드가 모여 있어서 참고하면 좋겠습니다.</li><li>Unit Test에서도 getx 플러그인을 자유롭게 사용할 수 있습니다.</li><li>GetConnect 클래스를 통해 HTTP 메서드 통신이 가능합니다. 다만, http 통신에 대해 좀더 직접적으로 개입하고 싶다면 <a href="https://pub.dev/packages/http">http 플러그인</a>을 사용하세요.</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 의존성 주입 - provider</title>
      <link href="/2022/03/18/flutter/data/flutter-provider/"/>
      <url>/2022/03/18/flutter/data/flutter-provider/</url>
      
        <content type="html"><![CDATA[<ul><li>문서: <a href="https://pub.dev/packages/provider">https://pub.dev/packages/provider</a></li><li>GetX를 사용해보고 나서 provider가 좀더 형식적인 코드 작성이 많다는 것을 깨달았습니다.</li><li>그래도 Flutter 앱 개발에 있어서 좀더 라이브러리에 덜 의존적인 원형의 형태를 사용하는 것에 초점을 둔다면 좋을 것 같습니다.</li><li>Google I&#x2F;O 2019 구글의 공식 추천 픽 -&gt; <a href="https://www.youtube.com/watch?v=HrBiNHEqSYU">https://www.youtube.com/watch?v=HrBiNHEqSYU</a><ul><li>나름 그때 시점으로는 provider가 좀더 안정적이어서 그런 것 같습니다.</li></ul></li></ul><h3 id="구현-순서"><a href="#구현-순서" class="headerlink" title="구현 순서"></a>구현 순서</h3><ul><li>확립되어 있는 개발 방식이랄게 없는 단계이지만, 제가 구현한 방식 위주로 소개해보겠습니다.</li></ul><ol><li>main() 안에서 MaterialApp 객체를 리턴하고 있는 App 클래스를 MultiProvider 객체의 child 영역 안에서 선언되도록 합니다.</li><li>그리고 providers 필드에 사용하고자 하는 의존성 주입 모델들을 추가하면 됩니다.</li><li>의존성이 추가하기 위해 <strong>ChangeNotifier</strong> 클래스를 mixin하는 <strong>ViewModel</strong> 클래스를 생성합니다.</li><li><strong>View</strong>에서 필요로 하는 함수들을 <strong>ViewModel</strong> 클래스의 인스턴스를 provider를 통해 제공받습니다.</li></ol>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter pubspec.yaml</title>
      <link href="/2022/03/18/flutter/data/flutter-pubspec/"/>
      <url>/2022/03/18/flutter/data/flutter-pubspec/</url>
      
        <content type="html"><![CDATA[<ul><li>문서: <a href="https://docs.flutter.dev/development/tools/pubspec">https://docs.flutter.dev/development/tools/pubspec</a></li><li>기본적인 작성법은 문서만 보아도 거의 이해할 수 있습니다.</li><li>몇 가지 추가 팁에 대해서만 작성하겠습니다.</li></ul><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><ul><li><strong>pubspec.yaml</strong>에서 변경한 버전은 Android, iOS 앱 버전에도 함께 반영되어 release 빌드 시 변경된 버전으로 배포가 가능합니다.</li></ul><h3 id="assets-추가-팁"><a href="#assets-추가-팁" class="headerlink" title="assets 추가 팁"></a>assets 추가 팁</h3><ul><li>Flutter에서 참조할 파일들을 assets에 명시할 때 폴더 전체를 명시할 수 있습니다.</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flutter:</span></span><br><span class="line">  <span class="attr">assets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">images/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">videos/</span></span><br></pre></td></tr></table></figure><h3 id="plugin-관련-팁"><a href="#plugin-관련-팁" class="headerlink" title="plugin 관련 팁"></a>plugin 관련 팁</h3><ul><li><strong>dependencies</strong>와 <strong>dev_dependencies</strong>에서 외부 모듈에 대한 의존성 추가를 합니다.<ul><li><strong>dev_dependencies</strong> 의존성은 앱 실행에 직접적인 도움을 주지는 않고, 테스트 코드 작성, 코드 자동 생성 등 부가적인 역할에 도움을 줍니다.</li></ul></li><li>플러그인의 버전을 작성하지 않으면 <strong>‘pub get’</strong> 명령 수행 시, 가장 최근 버전을 가져옵니다.</li><li><strong>‘pub upgrade’</strong> 명령을 통해 작성되어 있는 버전이더라도 최신 버전을 찾아와 업그레이드 할 수 있습니다.</li><li>플러그인에 대한 더 자세한 내용은 문서를 참고해보세요.<ul><li><a href="https://docs.flutter.dev/development/packages-and-plugins/using-packages">https://docs.flutter.dev/development/packages-and-plugins/using-packages</a></li><li><a href="https://dart.dev/tools/pub/dependencies">https://dart.dev/tools/pub/dependencies</a></li><li>git repository에 있는 dart 프로젝트를 plugin처럼 사용하는 것도 가능합니다.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 단위 테스트 작성</title>
      <link href="/2022/03/18/flutter/data/flutter-test/"/>
      <url>/2022/03/18/flutter/data/flutter-test/</url>
      
        <content type="html"><![CDATA[<ul><li>Flutter 앱에서 단위 테스트를 하는 방법에 대해 간단하게 소개합니다.</li><li>UI 테스트에 대해서는 좀 더 익숙해진 다음에 따로 글을 작성해야겠습니다.</li></ul><h2 id="테스트-코드-작성-및-실행"><a href="#테스트-코드-작성-및-실행" class="headerlink" title="테스트 코드 작성 및 실행"></a>테스트 코드 작성 및 실행</h2><ul><li>&#x2F;test 경로에 dart 파일을 생성합니다.</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_test/flutter_test.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 초기화 코드 작성</span></span><br><span class="line">  </span><br><span class="line">  test(<span class="string">&#x27;테스트 이름&#x27;</span>, () &#123;</span><br><span class="line">    <span class="comment">// 테스트 할 코드 작성</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>기본적인 코드 형태는 이렇습니다.</li><li>main() 에서 ‘async-await’ 문법을 사용해 초기화 코드가 비동기 코드여도 동기적으로 실행이 가능합니다.</li><li>test() 메서드 내 코드 작성할 때도 마찬가지로 ‘async-await’ 사용이 가능합니다.</li><li>테스트를 IDE에서 실행하게 되면 ‘flutter test’ 로 시작하는 flutter test 명령이 실행됩니다.</li><li><strong>‘flutter test’ 명령만 입력하면 현재 작성된 모든 테스트 코드를 한번에 실행할 수 있습니다.</strong></li></ul><h3 id="테스트-코드-예시"><a href="#테스트-코드-예시" class="headerlink" title="테스트 코드 예시"></a>테스트 코드 예시</h3><ul><li>다음은 파일을 저장할 수 있는 CDN 서버에 파일을 업로드 시키는 단위 테스트 코드 예시입니다.</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import 생략...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line"></span><br><span class="line">  CdnApi api = CdnApi();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">앱에서 테스트 실행 시 명령어: flutter run .\test\api\cdn<span class="emphasis">_api_</span>test.dart</span></span></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">android path: &#x27;/data/user/0/&#123;앱 패키지 이름&#125;/app<span class="emphasis">_flutter/&#x27;</span></span></span></span><br><span class="line">  test(<span class="string">&#x27;CDN Data 업로드 테스트&#x27;</span>, () <span class="keyword">async</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> cdnData = CdnData(</span><br><span class="line">      cdnPath: <span class="string">&#x27;CDN 서버 내 저장할 경로&#x27;</span>,</span><br><span class="line">      filePath: <span class="string">&#x27;현재 파일이 저장 되어 있는 경로&#x27;</span>,</span><br><span class="line">      fileName: <span class="string">&#x27;파일 이름.확장자&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Result&lt;<span class="built_in">bool</span>&gt; result = <span class="keyword">await</span> api.uploadFiles([cdnData]);</span><br><span class="line"></span><br><span class="line">    expect(result, <span class="keyword">const</span> Result.success(<span class="keyword">true</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>단위 테스트의 GWT(Given-When-Then)에 따라 업로드하는 행위에 맞춰 작성했습니다.</li><li>해당 테스트는 테스트 코드를 로컬 환경에서 실행하는 <strong>PC와 모바일 App 두 가지 환경에서 모두 테스트가 가능</strong>합니다.</li><li>모바일 App에서 테스트 코드를 실행하고 검증하고 싶다면, 터미널에 ‘flutter run 테스트_할_파일_경로’를 입력하여 실행이 가능합니다.</li></ul><h3 id="Mocking"><a href="#Mocking" class="headerlink" title="Mocking"></a>Mocking</h3><ul><li>사용할 라이브러리 문서: <a href="https://pub.dev/packages/mockito">https://pub.dev/packages/mockito</a></li><li>위의 문서에서 자세하게 나와 있지만, 간단한 설명과 예시를 덧붙이겠습니다.</li><li>mockito를 사용하기 위해 ‘build_runner’ 라는 라이브러리가 추가로 필요합니다. <a href="https://pub.dev/packages/build_runner">링크</a></li><li>2가지 라이브러리를 모두 pubspec.yaml에 추가했다면 코드를 작성하면 됩니다.</li><li>해당 코드는 오준석 님의 <a href="https://www.inflearn.com/course/%ED%94%8C%EB%9F%AC%ED%84%B0-%EC%A4%91%EA%B8%89">‘Flutter 중급 - 클린 아키텍처’</a> 강의에서 따라해본 예제입니다.</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import 생략...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GenerateMocks</span>([http.Client])</span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  test(<span class="string">&#x27;Pixabay Api에서 iphone 데이터를 잘 가져와야 한다.&#x27;</span>, () <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> query = <span class="string">&#x27;iphone&#x27;</span>;</span><br><span class="line">    <span class="keyword">final</span> client = MockClient();</span><br><span class="line">    <span class="keyword">final</span> api = PhotoApiRepositoryImpl(PixabayApi(client));</span><br><span class="line"></span><br><span class="line">    when(client.<span class="keyword">get</span>(<span class="built_in">Uri</span>.parse(</span><br><span class="line">        <span class="string">&#x27;<span class="subst">$&#123;PixabayApi.baseUrl&#125;</span>?key=<span class="subst">$&#123;PixabayApi.key&#125;</span>&amp;q=<span class="subst">$query</span>&amp;image_type=photo&amp;pretty=true&#x27;</span>)))</span><br><span class="line">        .thenAnswer((_) <span class="keyword">async</span> =&gt; http.Response(fakeJsonBody, <span class="number">200</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Result&lt;<span class="built_in">List</span>&lt;Photo&gt;&gt; result = <span class="keyword">await</span> api.fetch(<span class="string">&#x27;iphone&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    expect((result <span class="keyword">as</span> Success&lt;<span class="built_in">List</span>&lt;Photo&gt;&gt;).data.length, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    verify(client.<span class="keyword">get</span>(<span class="built_in">Uri</span>.parse(</span><br><span class="line">      <span class="string">&#x27;<span class="subst">$&#123;PixabayApi.baseUrl&#125;</span>?key=<span class="subst">$&#123;PixabayApi.key&#125;</span>&amp;q=<span class="subst">$query</span>&amp;image_type=photo&amp;pretty=true&#x27;</span>,)));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> fakeJsonBody = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  api 데이터가 너무 많아서 생략...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><ol><li>@GenerateMocks([http.Client]) annotation을 이용해 mocking할 객체를 먼저 선언합니다.</li><li>터미널에 ‘flutter pub run build_runner build’ 명령을 실행하면 http.Client 객체에 대한 Mock 객체를 생성할 수 있는 코드가 같은 파일 경로에 자동생성 됩니다.</li><li>MockClient 객체를 선언하게 되면 해당 객체를 http.Client 객체와 같이 코드 작성이 가능합니다.</li><li>http.Client 객체가 수행해야 했을 작업을 <strong>when()</strong> 안에서 수행시킵니다.</li><li><strong>thenAnswer()</strong> 안에서 테스트 코드가 Mock 객체에 기대하는 결과 값을 반환하도록 합니다.</li><li>이제 api를 테스트하면 실제 http 통신이 아닌 Mock 객체에서 전달하는 결과를 받게 됩니다.</li></ol><ul><li>verify() 메서드는 해당 테스트를 수행하면서 verify() 내에 선언한 함수가 정말 실행이 되었는지 확인합니다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter Hot Reload, Hot Restart</title>
      <link href="/2022/03/18/flutter/ui/flutter-fast-rerun/"/>
      <url>/2022/03/18/flutter/ui/flutter-fast-rerun/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>실행 중인 Flutter 앱을 빠르게 재실행 해주는 기능입니다.</strong></li><li>Flutter에는 Android 개발할 때에도 잠깐 있었던 Hot Reload 기능을 제공합니다.</li></ul><h2 id="Hot-Reload-vs-Hot-Restart"><a href="#Hot-Reload-vs-Hot-Restart" class="headerlink" title="Hot Reload vs Hot Restart"></a>Hot Reload vs Hot Restart</h2><h3 id="Hot-Reload"><a href="#Hot-Reload" class="headerlink" title="Hot Reload"></a>Hot Reload</h3><ul><li>IntelliJ(Android Studio)는 번개 그림의 아이콘 버튼으로도 제공하고 있습니다. (단축키 Windows: Ctrl+s, Mac: Cmd+s)</li><li>Hot Reload는 현재 화면에 보이는 위젯을 기준으로 변경된 코드를 반영합니다.<ul><li>현재 화면에 있는 Widget의 build() 메서드가 실행됩니다.</li><li>현재 화면에 있지 않은 소스 코드가 런타임에서 반영이 됩니다.</li></ul></li></ul><h3 id="Hot-Restart"><a href="#Hot-Restart" class="headerlink" title="Hot Restart"></a>Hot Restart</h3><ul><li>IntelliJ(Android Studio)는 실행 상태에서 다시 Run 실행하면 Hot Restart 동작</li><li>Hot Restart는 처음 코드가 동작하는 main 함수부터 다시 실행됩니다.</li></ul><h3 id="자주-실수했던-예외-상황"><a href="#자주-실수했던-예외-상황" class="headerlink" title="자주 실수했던 예외 상황"></a>자주 실수했던 예외 상황</h3><ul><li>Native Plugin을 사용하거나 새로운 Resource(image, font…)를 추가하는 등 몇가지 상황에서는 실행 상태의 앱을 종료 시키고 Run 해야 적용되는 경우가 있습니다.</li><li>Hot Reload 사용 시 현재 변경한 위젯에서 아직 초기화되지 않은 값을 쓰려고 하면서 에러가 발생할 수 있습니다.<ul><li>이전 화면이 존재한다면 이전 화면에서 Hot Reload 후 변경된 화면으로 이동으로 해결하거나 Hot Restart 사용</li></ul></li></ul><h3 id="편리했던-상황"><a href="#편리했던-상황" class="headerlink" title="편리했던 상황"></a>편리했던 상황</h3><ul><li>UI 코드를 작성하면서 변경된 코드에 대한 피드백을 바로 확인이 되어서 개발이 편리했습니다.</li><li>API를 변경하면서 실행할 때도 앱 종료 없이 재실행이 가능해서 편리했습니다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StatefulWidget vs StatelessWidget</title>
      <link href="/2022/03/18/flutter/ui/flutter-stateful-stateless/"/>
      <url>/2022/03/18/flutter/ui/flutter-stateful-stateless/</url>
      
        <content type="html"><![CDATA[<ul><li>각각이 어떤 위젯이었는지 까먹었으면 <a href="https://boring-km.github.io/2022/02/08/flutter/ui/flutter-ui1/#StatefulWidget-StatelessWidget-Scaffold">이쪽</a></li><li>구글링하면서 찾은 다른 포스팅<ul><li><a href="https://here4you.tistory.com/220">https://here4you.tistory.com/220</a></li><li><a href="https://velog.io/@dosilv/Flutter-StatelessWidget-StatefulWidget">https://velog.io/@dosilv/Flutter-StatelessWidget-StatefulWidget</a></li><li><a href="https://security-nanglam.tistory.com/478">https://security-nanglam.tistory.com/478</a></li></ul></li></ul><h3 id="개인적인-생각"><a href="#개인적인-생각" class="headerlink" title="개인적인 생각"></a>개인적인 생각</h3><ul><li>외부에 의해서만 변경되는 위젯이면 StatelessWidget이 깔끔하다고 생각합니다.</li><li>내부에서도 스스로 UI 변경이 자주 일어나는 위젯이면 StatefulWidget이 적합합니다.</li><li>의존성 주입 플러그인을 사용하다보면 StatefulWidget을 사용할 경우가 거의 없었습니다.<ul><li>웬만하면 StatelessWidget으로 거의 가능한 것 같습니다.</li></ul></li><li>다만 모든 위젯을 StatelessWidget으로 만들려고만 하지 않으면 되겠습니다. (Stateful이 적합한 위젯은 분명히 있습니다.)</li><li>UI를 그리다가 너무 코드가 길어져서 코드를 다시 찾아가기가 힘들어질때 UI를 별도의 StatelessWidget으로 분리시키는 리팩토링을 고려해보면 좋을 것 같습니다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 위젯 에러</title>
      <link href="/2022/03/18/flutter/ui/flutter-ui-error/"/>
      <url>/2022/03/18/flutter/ui/flutter-ui-error/</url>
      
        <content type="html"><![CDATA[<ul><li>에러 상황이야 엄청 다양하게 있겠지만, 기존 Native에서 UI를 그리는 방식이랑 많이 달라서 겪었던 상황들을 정리해보았습니다.</li><li>Flutter에서 대표적으로 당황하게 되는 에러화면은 2가지가 있습니다.<ul><li>에러 메시지와 함께 화면 전체가 빨간 배경으로 덮이는 현상 발생</li><li>화면에서 Overflow 된 모서리에 사선으로 노란색&#x2F;검정색이 그어진 그림 발생</li></ul></li><li>관련 문서<ul><li><a href="https://docs.flutter.dev/testing/common-errors">https://docs.flutter.dev/testing/common-errors</a></li><li><a href="https://docs.flutter.dev/testing/errors">https://docs.flutter.dev/testing/errors</a></li></ul></li></ul><h2 id="red-screen-of-death"><a href="#red-screen-of-death" class="headerlink" title="red screen of death"></a>red screen of death</h2><ul><li>관련 포스트: <a href="https://medium.com/nonstopio/flutter-kill-the-red-screen-of-death-f5e0601d1cdc">https://medium.com/nonstopio/flutter-kill-the-red-screen-of-death-f5e0601d1cdc</a></li><li>UI를 런타임에서 그리다가 생긴 에러로 인해 화면 전체가 빨간색으로 덮일 수 있습니다. (아예 화면에 그릴 수 없는 치명적 상태)</li><li>에러를 해결하는 게 먼저이고, 빨간 화면 대신 다른 방식으로 표현하도록 Error Handling도 가능합니다. <a href="https://stackoverflow.com/questions/53903928/disable-flutters-red-screen-of-death">링크</a></li></ul><h2 id="RenderFlex-Overflow-에러"><a href="#RenderFlex-Overflow-에러" class="headerlink" title="RenderFlex Overflow 에러"></a>RenderFlex Overflow 에러</h2><ul><li>제한된 영역보다 크게 위젯을 그리려고 할 때 주로 나타납니다.</li></ul><p><img src="https://i.stack.imgur.com/0slE0.png" alt="예시"></p><ul><li><a href="https://stackoverflow.com/questions/54178816/row-renderflex-overflowed-by-76-pixels-on-the-right">그림 출처</a></li><li>화면 상에서 에러가 발생한 상하좌우 방향의 모서리에 따라 몇 pixel이 넘쳤는지 에러가 표시됩니다.</li><li>해당 에러를 발생시키지 않기 위한 방법은 매우 많겠지만 생각나는 것들을 나열해보겠습니다.</li></ul><h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><ul><li>Text 위젯을 사용하면서 길이가 가로나 세로로 계속 길어지면서 overflow 발생<ul><li><strong>해결:</strong> maxLines 값을 정하거나 일부만 보여주기 위해 TextStyle 내 overflow 필드를 이용하는 방법이 있습니다.</li></ul></li><li>TextField 위젯과 같이 키보드가 아래로 올라오며 화면에 표현될 때, 예상치 않게 구현한 UI가 화면 밖 위로 당겨지면서 bottom overflow<ul><li><strong>해결:</strong> 구현되어 있는 화면의 위젯에 따라 다양하겠지만, 보통의 경우는 움직이게 되는 위젯을 ListView 안에 넣어서 스크롤 될 수 있게 하여 에러를 방지했습니다.</li></ul></li></ul><h3 id="화면-밖으로-나가는-위젯"><a href="#화면-밖으로-나가는-위젯" class="headerlink" title="화면 밖으로 나가는 위젯"></a>화면 밖으로 나가는 위젯</h3><ul><li>화면 사이즈보다 가로나 세로 길이가 긴 위젯이 그려지면 overflow 발생</li></ul><blockquote><p>물론 화면 사이즈보다 작게 그리면 해결됩니다.<br>하지만 반응형으로 UI를 그리는 상황이 많기 때문에 제한된 크기의 위젯을 사용하기에도 애매하고,<br>크기를 제한하지 않았다가 overflow가 발생할 수도 있습니다.</p></blockquote><ul><li><strong>해결:</strong> Padding 위젯 안에 크기가 동적인 위젯을 넣으면 overflow를 방지하는데 유용합니다.</li></ul><h2 id="setState-에러"><a href="#setState-에러" class="headerlink" title="setState 에러"></a>setState 에러</h2><ul><li>주로 화면 시작될 때 UI 업데이트를 시도하다가 많이 발생합니다.</li><li>자체 UI 업데이트가 가능한 <strong>StatefulWidget</strong>의 경우에서 예시를 들겠습니다.</li><li>위젯이 시작하는 StatefulWidget 내 State 클래스에서 <strong>initState()</strong> 메서드를 오버라이드해서 코드를 작성하게 됩니다.</li><li>아직 위젯이 그려지기 전 상황이기 때문에 setState() 메서드를 사용하게 되면 에러가 발생합니다.</li><li><strong>해결:</strong> 일반적인 Flutter 개발자들의 편법과도 같은 해결방법은 initState 내 동작할 UI 업데이트 코드를 비동기로 실행합니다.</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">  Future.microtask(() &#123;</span><br><span class="line">    <span class="comment">// 코드 작성</span></span><br><span class="line">    <span class="comment">// UI 업데이트</span></span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">super</span>.initState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>제가 선호하는 방법은 Future를 이용한 방식입니다. 상황에 따라서 딜레이 시간을 줄 수도 있어서 좋은 것 같습니다.</li><li>build() 메서드가 실행되는 도중에 setState() 메서드가 실행되어서 build() 메서드가 또다시 실행되지 않게 하는 것이 핵심입니다.</li><li></li></ul><h3 id="주의할-점"><a href="#주의할-점" class="headerlink" title="주의할 점"></a>주의할 점</h3><ul><li>예를 들어 서버에서 초기값을 가져와 UI에 바로 보여줘야하는 경우에 값을 가져오지 않은 초기 화면이 나왔다가 이후에 UI가 업데이트 되는 상황이 나올 수 있습니다.</li><li>당연한 얘기이지만, 데이터가 없을 때의 UI를 잘 고려해서 기본값을 설정해주어야 자연스럽습니다.</li><li>초기값을 가져오기 전에는 나중에 그릴 UI를 아예 build() 메서드 내에서 런타임으로 실행되지 않도록 <strong>분기를 하는 방법</strong>도 있습니다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter의 다양한 Widget(3)</title>
      <link href="/2022/03/18/flutter/ui/flutter-ui3/"/>
      <url>/2022/03/18/flutter/ui/flutter-ui3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>자주 사용하는 기본적인 Widget에 대해서만 소개합니다.</p><p>자세한 사용 방법을 제시하기 보다는 이 상황에선 이것을 사용했었다는 정도의 설명입니다.</p></blockquote><ul><li>GestureDetector</li><li>다이얼로그</li></ul><h2 id="GestureDetector"><a href="#GestureDetector" class="headerlink" title="GestureDetector"></a>GestureDetector</h2><ul><li>문서: <a href="https://api.flutter.dev/flutter/widgets/GestureDetector-class.html">https://api.flutter.dev/flutter/widgets/GestureDetector-class.html</a></li><li>모든 위젯에 제스처(터치) 동작을 추가해주는 위젯</li><li>보통 터치 영역을 특정 위젯으로 잡아줄 때 많이 사용했습니다. (대표적으로 버튼 동작)</li><li>onTap, onDoubleTap, onLongPress 등 다양한 터치 동작에 대해 인식할 때 동작하는 코드를 작성할 수 있습니다.</li></ul><h2 id="다이얼로그"><a href="#다이얼로그" class="headerlink" title="다이얼로그"></a>다이얼로그</h2><ul><li>문서: <a href="https://api.flutter.dev/flutter/material/Dialog-class.html">https://api.flutter.dev/flutter/material/Dialog-class.html</a></li><li>팝업 알림창을 띄울 때 대표적으로 사용하는 위젯</li><li>다이얼로그를 띄우기 위해선 context 인스턴스가 무조건 필요하다.</li><li><a href="https://api.flutter.dev/flutter/material/showDialog.html">showDialog</a> 메서드를 기본으로 사용하여 Dialog 위젯을 화면에 띄웁니다.</li></ul><h3 id="투명-배경-다이얼로그"><a href="#투명-배경-다이얼로그" class="headerlink" title="투명 배경 다이얼로그"></a>투명 배경 다이얼로그</h3><ul><li>개발하면서 유용하게 사용한 코드를 가져와봤다.</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> showTransparentDialog(BuildContext context, Widget child, &#123;FutureOr <span class="built_in">Function</span>(<span class="built_in">Object?</span> value)? onValue&#125;) &#123;</span><br><span class="line">  showGeneralDialog(</span><br><span class="line">    context: context,</span><br><span class="line">    barrierLabel: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    barrierDismissible: <span class="keyword">true</span>,</span><br><span class="line">    barrierColor: Colors.white.withOpacity(<span class="number">0</span>),  <span class="comment">// Colors.transparent로 입력하면 완벽한 투명이 되지 않는다.</span></span><br><span class="line">    pageBuilder: (context, _, __) &#123;</span><br><span class="line">      <span class="keyword">return</span> Material(</span><br><span class="line">        type: MaterialType.transparency,</span><br><span class="line">        child: child,</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  ).then(onValue ?? (_) =&gt; &#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>onValue 함수는 다이얼로그가 닫힌 이후의 동작을 작성하는 콜백함수이다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter tear-off</title>
      <link href="/2022/03/18/flutter/data/flutter_tear-off/"/>
      <url>/2022/03/18/flutter/data/flutter_tear-off/</url>
      
        <content type="html"><![CDATA[<ul><li>youtube link: <a href="https://www.youtube.com/watch?v=OmCaloD7sis">!https://www.youtube.com/watch?v=OmCaloD7sis</a></li><li>핵심은 UI 코드에 람다식 표현이 꼭 필요하지 않으면 아예 메서드에서 함수를 리턴해버리라는 내용</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code 17장 - 냄새와 휴리스틱</title>
      <link href="/2022/03/17/clean_code/chapter17/"/>
      <url>/2022/03/17/clean_code/chapter17/</url>
      
        <content type="html"><![CDATA[<ul><li>주석</li><li>환경</li><li>함수</li><li>일반</li><li>자바</li><li>이름</li><li>테스트</li><li>결론</li></ul><hr><ul><li>코드를 읽으면서 기록한 나쁜 냄새들의 목록</li></ul><h2 id="주석"><a href="#주석" class="headerlink" title="주석"></a>주석</h2><h3 id="C1-부적절한-정보"><a href="#C1-부적절한-정보" class="headerlink" title="C1: 부적절한 정보"></a>C1: 부적절한 정보</h3><ul><li>다른 시스템에 (소스 코드 관리 시스템, 버그 추적 시스템, 이슈 추적 시스템, 기타 기록 관리 시스템) 저장할 정보는 주석으로 적절하지 못하다.</li><li>변경 이력은 장황한 날짜와 따분한 내용으로 소스 코드만 번잡하게 만든다.</li><li><strong>주석은 코드와 설계에 기술적인 설명을 부연하는 수단이다.</strong></li></ul><h3 id="C2-쓸모-없는-주석"><a href="#C2-쓸모-없는-주석" class="headerlink" title="C2: 쓸모 없는 주석"></a>C2: 쓸모 없는 주석</h3><ul><li>오래된 주석, 엉뚱한 주석, 잘못된 주석은 더 이상 쓸모가 없다.</li><li>코드와 무관하게 혼자서 따로 놀며 코드를 그릇된 방향으로 이끈다.</li></ul><h3 id="C3-중복된-주석"><a href="#C3-중복된-주석" class="headerlink" title="C3: 중복된 주석"></a>C3: 중복된 주석</h3><ul><li>코드만으로 충분한데 구구절절 설명하는 주석이 중복된 주석이다.</li><li>함수 서명(signature)만 달랑 기술하는 javadoc 예시를 보자.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sellRequest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ManagedComponentException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> SellResponse <span class="title function_">beginSellItem</span><span class="params">(SellRequest sellRequest)</span> <span class="keyword">throws</span> ManagedComponentException</span><br></pre></td></tr></table></figure><h3 id="C4-성의-없는-주석"><a href="#C4-성의-없는-주석" class="headerlink" title="C4: 성의 없는 주석"></a>C4: 성의 없는 주석</h3><ul><li>작성할 가치가 있는 주석은 잘 작성할 가치도 있다.</li><li>단어를 신중하게 선택하고 주절대지 않으며 당연한 소리를 반복하지 않고 간결&#x2F;명료하게 작성하자</li></ul><h3 id="C5-주석-처리된-코드"><a href="#C5-주석-처리된-코드" class="headerlink" title="C5: 주석 처리된 코드"></a>C5: 주석 처리된 코드</h3><ul><li>얼마나 오래된 코드인지, 중요한 코드인지 아닌지, 알 길이 없다.</li><li>누군가에게 필요한 코드라 생각하기에 아무도 삭제하지 않는다.</li><li>주석으로 처리된 코드를 발견하면 즉각 지워버리자!</li><li>소스 코드 관리 시스템이 기억할 것이다.</li></ul><h2 id="환경"><a href="#환경" class="headerlink" title="환경"></a>환경</h2><h3 id="E1-여러-단계로-빌드해야-한다"><a href="#E1-여러-단계로-빌드해야-한다" class="headerlink" title="E1: 여러 단계로 빌드해야 한다"></a>E1: 여러 단계로 빌드해야 한다</h3><ul><li>빌드는 간단히 한 단계로 끝나야 한다.</li><li>한 명령으로 전체를 체크아웃해서 빌드할 수 있어야 한다.</li></ul><h3 id="E2-여러-단계로-테스트해야-한다"><a href="#E2-여러-단계로-테스트해야-한다" class="headerlink" title="E2: 여러 단계로 테스트해야 한다"></a>E2: 여러 단계로 테스트해야 한다</h3><ul><li>모든 단위 테스트는 한 명령으로 돌려야 한다.</li><li>모든 테스트를 한 번에 실행하는 능력은 아주 근본적이고 아주 중요하다.</li></ul><h2 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h2><h3 id="F1-너무-많은-인수"><a href="#F1-너무-많은-인수" class="headerlink" title="F1: 너무 많은 인수"></a>F1: 너무 많은 인수</h3><ul><li>함수에서 인수 갯수는 작을수록 좋다.</li><li>아예 없으면 가장 좋다.</li></ul><h3 id="F2-출력-인수"><a href="#F2-출력-인수" class="headerlink" title="F2: 출력 인수"></a>F2: 출력 인수</h3><ul><li>출력 인수는 직관성을 정면으로 위배한다.</li><li>독자는 인수를 입력으로 간주하기 때문에 함수에서 뭔가의 상태를 변경해야 한다면 함수가 속한 객체의 상태를 변경하라</li></ul><h3 id="F3-플래그-인수"><a href="#F3-플래그-인수" class="headerlink" title="F3: 플래그 인수"></a>F3: 플래그 인수</h3><ul><li>boolean 인수는 함수가 여러 기능을 수행한다는 명백한 증거다. 플래그 인수는 혼란을 초래하므로 피해야 마땅하다.</li></ul><h3 id="F4-죽은-함수"><a href="#F4-죽은-함수" class="headerlink" title="F4: 죽은 함수"></a>F4: 죽은 함수</h3><ul><li>아무도 호출하지 않는 함수는 삭제한다.</li><li>죽은 코드는 낭비다.</li></ul><h2 id="일반"><a href="#일반" class="headerlink" title="일반"></a>일반</h2><h3 id="G1-한-소스-파일에-여러-언어를-사용한다"><a href="#G1-한-소스-파일에-여러-언어를-사용한다" class="headerlink" title="G1: 한 소스 파일에 여러 언어를 사용한다"></a>G1: 한 소스 파일에 여러 언어를 사용한다</h3><ul><li>오늘날 프로그래밍 환경은 한 소스 파일 내에서 다양한 언어를 지원한다.</li><li>이상적으로는 소스 파일 하나에 언어 하나만 사용하는 방식이 가장 좋다.</li></ul><h3 id="G2-당연한-동작을-구현하지-않는다"><a href="#G2-당연한-동작을-구현하지-않는다" class="headerlink" title="G2: 당연한 동작을 구현하지 않는다"></a>G2: 당연한 동작을 구현하지 않는다</h3><ul><li>함수나 클래스는 다른 프로그래머가 당연하게 여길 만한 동작과 기능을 제공해야 한다.</li><li>당연한 동작을 구현하지 않으면 코드를 읽거나 사용하는 사람이 더 이상 함수 이름만으로 함수 기능을 직관적으로 예상하기 어렵다.</li><li>저자를 신뢰하지 못하므로 코드를 일일이 살피게 된다.</li></ul><h3 id="G3-경계를-올바로-처리하지-않는다"><a href="#G3-경계를-올바로-처리하지-않는다" class="headerlink" title="G3: 경계를 올바로 처리하지 않는다"></a>G3: 경계를 올바로 처리하지 않는다</h3><ul><li>스스로의 직관에 의존하지 말라.</li><li>모든 경계 조건을 찾아내고, 모든 경계 조건을 테스트하는 테스트 케이스를 작성하라.</li></ul><h3 id="G4-안전-절차-무시"><a href="#G4-안전-절차-무시" class="headerlink" title="G4: 안전 절차 무시"></a>G4: 안전 절차 무시</h3><ul><li>실패하는 테스트 케이스를 일단 제껴두고 나중으로 미루는 태도는 신용카드가 공짜 돈이라는 생각만큼 위험하다.</li></ul><h3 id="G5-중복"><a href="#G5-중복" class="headerlink" title="G5: 중복"></a>G5: 중복</h3><ul><li>코드에서 중복을 발견할 때마다 추상화할 기회로 간주하라.</li><li>중복된 코드를 하위 루틴이나 다른 클래스로 분리하라.</li><li>switch&#x2F;case 문이나, if&#x2F;else 문으로 똑같은 조건을 거듭 확인하는 중복에 대해서는 <strong>다형성</strong>으로 대체하라</li><li>알고리즘이 유사하나 코드가 서로 다른 중복에 대해서는 <strong>템플릿 메서드 패턴이나 전략 패턴</strong>으로 대체하라</li></ul><h3 id="G6-추상화-수준이-올바르지-못하다"><a href="#G6-추상화-수준이-올바르지-못하다" class="headerlink" title="G6: 추상화 수준이 올바르지 못하다"></a>G6: 추상화 수준이 올바르지 못하다</h3><ul><li>추상화는 소프트웨어 개발자에게 가장 어려운 작업 중 하나다.</li><li>추상화로 개념을 분리할 때는 철저해야 한다.</li><li>모든 저차원 개념은 파생 클래스에 넣고, 모든 고차원 개념은 기초 클래스에 넣는다.</li><li>세부 구현과 관련한 상수, 변수, 유틸리티 함수는 기초 클래스에 넣으면 안 된다. 소스 파일, 컴포넌트, 모듈도 마찬가지다.</li><li>개념을 다양한 차원으로 분리해 다른 컨테이너에 넣자.</li><li>고차원 개념과 저차원 개념을 섞어서는 안 된다.</li></ul><h3 id="G7-기초-클래스가-파생-클래스에-의존한다"><a href="#G7-기초-클래스가-파생-클래스에-의존한다" class="headerlink" title="G7: 기초 클래스가 파생 클래스에 의존한다"></a>G7: 기초 클래스가 파생 클래스에 의존한다</h3><ul><li>일반적으로 기초 클래스는 파생 클래스를 아예 몰라야 마땅하다.</li><li>파생 클래스 개념으로부터 분리해 독립성을 보장해야 한다.</li></ul><h3 id="G8-과도한-정보"><a href="#G8-과도한-정보" class="headerlink" title="G8: 과도한 정보"></a>G8: 과도한 정보</h3><ul><li>잘 정의된 모듈은 인터페이스가 아주 작다.</li><li>클래스나 모듈 인터페이스에 노출할 함수를 제한할 줄 알아야 한다.</li><li>클래스가 제공하는 메서드 수는 작을수록 좋다.</li><li>함수가 아는 변수 수도 작을수록 좋다.</li><li>클래스에 들어있던 인스턴스 변수 수도 작을수록 좋다.</li><li>인터페이스를 매우 작게 그리고 매우 깐깐하게 만들어라.</li><li><strong>정보를 제한해 결합도를 낮춰라</strong></li></ul><h3 id="G9-죽은-코드"><a href="#G9-죽은-코드" class="headerlink" title="G9: 죽은 코드"></a>G9: 죽은 코드</h3><ul><li>죽은 코드란 실행 되지 않는 코드를 가리킨다.</li><li>옛날옛적 시스템의 모양새가 다른 시절에 짜놓은 코드다.</li><li>시스템에서 제거하라.</li></ul><h3 id="G10-수직-분리"><a href="#G10-수직-분리" class="headerlink" title="G10: 수직 분리"></a>G10: 수직 분리</h3><ul><li>변수와 함수는 사용되는 위치에 가깝게 정의한다.</li><li>지역 변수는 처음으로 사용하기 직전에 선언하며, 수직으로 가까운 곳에 위치해야 한다.</li><li>비공개 함수는 처음으로 호출한 직후에 정의한다. 그래야 쉽게 눈에 띈다.</li></ul><h3 id="G11-일관성-부족"><a href="#G11-일관성-부족" class="headerlink" title="G11: 일관성 부족"></a>G11: 일관성 부족</h3><ul><li>최소 놀람의 원칙(The Principle of Least Surprise)</li><li>어떤 개념을 특정 방식으로 구현했다면, 유사한 개념도 같은 방식으로 구현한다.</li><li>명명법을 통일한다던가…</li></ul><h3 id="G12-잡동사니"><a href="#G12-잡동사니" class="headerlink" title="G12: 잡동사니"></a>G12: 잡동사니</h3><ul><li>아무도 사용하지 않는 변수, 아무도 호출하지 않는 함수, 정보를 제공하지 못하는 주석 등이 좋은 예다.</li><li>모두가 코드만 복잡하게 만들 뿐이니 제거해야 마땅하다.</li></ul><h3 id="G13-인위적-결합"><a href="#G13-인위적-결합" class="headerlink" title="G13: 인위적 결합"></a>G13: 인위적 결합</h3><ul><li>서로 무관한 개념을 인위적으로 결합하지 안흔다.</li><li>함수, 상수, 변수를 선언할 때는 시간을 들여 올바른 위치를 고민한다.</li><li>그저 당장 편한 곳에 선언하고 내버려두면 안 된다.</li></ul><h3 id="G14-기능-욕심"><a href="#G14-기능-욕심" class="headerlink" title="G14: 기능 욕심"></a>G14: 기능 욕심</h3><ul><li>클래스 메서드는 자기 클래스의 변수와 함수에 관심을 가져야지 다른 클래스의 변수와 함수에 관심을 가져서는 안 된다.</li><li>다른 객체의 참조자와 변경자를 이용해 객체 내용을 조작한다면 욕심이다.</li></ul><h3 id="G15-선택자-인수"><a href="#G15-선택자-인수" class="headerlink" title="G15: 선택자 인수"></a>G15: 선택자 인수</h3><ul><li>선택자 인수는 큰 함수를 작은 함수 여럿으로 쪼개지 않으려는 게으름의 소산이다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculateWeeklyPay</span><span class="params">(<span class="type">boolean</span> overtime)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tenthRate</span> <span class="operator">=</span> getTenthRate();</span><br><span class="line">        <span class="type">int</span> <span class="variable">tenthWorked</span> <span class="operator">=</span> getTenthsWorked();</span><br><span class="line">        <span class="type">int</span> <span class="variable">straightTime</span> <span class="operator">=</span> Math.min(<span class="number">400</span>, tenthWorked);</span><br><span class="line">        <span class="type">int</span> <span class="variable">overTime</span> <span class="operator">=</span> Math.max(<span class="number">0</span>, tenthWorked - straightTime);</span><br><span class="line">        <span class="type">int</span> <span class="variable">straightPay</span> <span class="operator">=</span> straightTime * tenthRate;</span><br><span class="line">        <span class="type">double</span> <span class="variable">overtimeRate</span> <span class="operator">=</span> overTime ? <span class="number">1.5</span> : <span class="number">1.0</span> * tenthRate;</span><br><span class="line">        <span class="type">int</span> <span class="variable">overtimePay</span> <span class="operator">=</span> (<span class="type">int</span>)Math.round(overTime * overtimeRate);</span><br><span class="line">        <span class="keyword">return</span> straightPay + overtimePay;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>초과근무 수당을 1.5배로 지급하면 true고 아니면 false다.</li><li>독자는 calculateWeeklyPay(false)라는 코드를 발견할 때마다 의미를 떠올려야 한다.</li><li>이렇게 구현했다면?</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">straightPay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getTenthsWorked() * getTenthRate();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">overTimePay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">overTimeTenths</span> <span class="operator">=</span> Math.max(<span class="number">0</span>, getTenthsWorked() - <span class="number">400</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">overTimePay</span> <span class="operator">=</span> overTimeBonus(overTimeTenths);</span><br><span class="line">        <span class="keyword">return</span> straightPay() + overTimePay;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">overTimeBonus</span><span class="params">(<span class="type">int</span> overTimeTenths)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">bonus</span> <span class="operator">=</span> <span class="number">0.5</span> * getTenthRate() * overTimeTenths;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) Math.round(bonus);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>일반적으로, 인수를 넘겨 동작을 선택하려는 대신 새로운 함수를 만드는 것이 좋다.</strong> <strong>(나도 너무 공감하고, 어서 회사 코드를 고쳐봐야겠다.)</strong></li></ul><h3 id="G16-모호한-의도"><a href="#G16-모호한-의도" class="headerlink" title="G16: 모호한 의도"></a>G16: 모호한 의도</h3><ul><li>코드를 짤 때는 의도를 최대한 분명히 밝힌다.</li><li>행을 바꾸지 않고 표현한 수식, 헝가리식 표기법, 매직 번호 등은 모두 저자의 의도를 흐린다.</li></ul><h3 id="G17-잘못-배치한-책임"><a href="#G17-잘못-배치한-책임" class="headerlink" title="G17: 잘못 배치한 책임"></a>G17: 잘못 배치한 책임</h3><ul><li>코드를 배치하는 위치를 결정하는 것은 중요하다.</li><li>영리하게 독자에게 직관적인 위치가 아닌 개발자에게 편한 함수에 배치한다면, 그 함수의 이름을 정확히 짓자.</li></ul><h3 id="G18-부적절한-static-함수"><a href="#G18-부적절한-static-함수" class="headerlink" title="G18: 부적절한 static 함수"></a>G18: 부적절한 static 함수</h3><ul><li>간혹 우리는 static으로 정의하면 안 되는 함수를 static으로 정의하는 실수를 범할 수 있다.</li><li>일반적으로 static 함수보다 인스턴스 함수가 더 좋다.</li><li>반드시 static으로 정의해야겠다면, 재정의할 가능성이 없는지 꼼꼼히 따져본다.</li></ul><h3 id="G19-서술적-변수"><a href="#G19-서술적-변수" class="headerlink" title="G19: 서술적 변수"></a>G19: 서술적 변수</h3><ul><li>서술적인 변수 이름은 많이 써도 괜찮다. 일반적으로 많을수록 더 좋다.</li><li>계산을 몇 단계로 나누고 중간값에 좋은 변수 이름만 붙여도 해독하기 어렵던 모듈이 순식간에 읽기 쉬운 모듈로 탈바꿈한다.</li></ul><h3 id="G20-이름과-기능이-일치하는-함수"><a href="#G20-이름과-기능이-일치하는-함수" class="headerlink" title="G20: 이름과 기능이 일치하는 함수"></a>G20: 이름과 기능이 일치하는 함수</h3><ul><li>이름만으로 분명하지 않기에 구현을 살피거나 문서를 뒤적여야 한다면 더 좋은 이름으로 바꾸거나 아니면 더 좋은 이름을 붙이기 쉽도록 기능을 정리해야 한다.</li></ul><h3 id="G21-알고리즘을-이해하라"><a href="#G21-알고리즘을-이해하라" class="headerlink" title="G21: 알고리즘을 이해하라"></a>G21: 알고리즘을 이해하라</h3><ul><li>구현이 끝났다고 선언하기 전에 함수가 돌아가는 방식을 확실히 이해하는지 확인하라.</li><li>테스트 케이스를 모두 통과한다는 사실만으로 부족하다.</li><li>작성자가 알고리즘이 올바르다는 사실을 알아야 한다.</li></ul><h3 id="G22-논리적-의존성은-물리적으로-드러내라"><a href="#G22-논리적-의존성은-물리적으로-드러내라" class="headerlink" title="G22: 논리적 의존성은 물리적으로 드러내라"></a>G22: 논리적 의존성은 물리적으로 드러내라</h3><ul><li>한 모듈이 다른 모듈에 의존한다면 물리적인 의존성도 있어야 한다.</li><li>논리적인 의존성만으로는 부족하다.</li><li>의존하는 모듈이 상대 모듈에 대해 뭔가를 가정하면 안 된다. (논리적으로 의존하면 안 된다.)</li><li><strong>의존하는 모든 정보를 명시적으로 요청하는 편이 좋다.</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HourlyReporter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HourlyReporterFormatter formatter;</span><br><span class="line">    <span class="keyword">private</span> List&lt;LineItem&gt; page;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PAGE_SIZE</span> <span class="operator">=</span> <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HourlyReporter</span><span class="params">(HourlyReporterFormatter formatter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.formatter = formatter;</span><br><span class="line">        page = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;LineItem&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateReport</span><span class="params">(List&lt;HourlyEmployee&gt; employees)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (HourlyEmployee e: employees) &#123;</span><br><span class="line">            addLineItemToPage(e);</span><br><span class="line">            <span class="keyword">if</span> (page.size() == PAGE_SIZE)</span><br><span class="line">                printAndClearItemList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (page.size() &gt; <span class="number">0</span>)</span><br><span class="line">            printAndClearItemList();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printAndClearItemList</span><span class="params">()</span> &#123;</span><br><span class="line">        formatter.format(page);</span><br><span class="line">        page.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addLineItemToPage</span><span class="params">(HourlyEmployee e)</span> &#123;</span><br><span class="line">        <span class="type">LineItem</span> <span class="variable">item</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LineItem</span>();</span><br><span class="line">        item.name = e.getName();</span><br><span class="line">        item.hours = e.getTenthsWorked() / <span class="number">10</span>;</span><br><span class="line">        item.tenths = e.getTenthWorked() % <span class="number">10</span>;</span><br><span class="line">        page.add(item);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LineItem</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> hours;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> tenths;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>PAGE_SIZE 상수에 대한 논리적인 의존성이 존재한다.</li><li>HourlyReporter 클래스는 HourlyReportFormatter 클래스가 페이지 크기를 알 거라고 가정하고 있다.</li><li>페이지 크기 55를 처리할 줄 안다는 사실에 의존한다.</li><li>만약 HourlyReportFormatter 구현 중 하나가 페이지 크기 55를 제대로 처리하지 못한다면 <strong>오류가 생긴다.</strong></li><li>HourlyReportFormatter 클레스에 getMaxPageSize()라는 메서드를 추가해 논리적인 의존성이 물리적인 의존성으로 변하도록 사용하면 된다.</li></ul><h3 id="G23-If-x2F-Else-혹은-Switch-x2F-Case-문보다-다형성을-사용하라"><a href="#G23-If-x2F-Else-혹은-Switch-x2F-Case-문보다-다형성을-사용하라" class="headerlink" title="G23: If&#x2F;Else 혹은 Switch&#x2F;Case 문보다 다형성을 사용하라"></a>G23: If&#x2F;Else 혹은 Switch&#x2F;Case 문보다 다형성을 사용하라</h3><ol><li>switch를 선택하기 전에 다형성을 먼저 고려해보라</li><li>유형보다 함수가 더 쉽게 변하는 경우는 극히 드물다. 그러므로 모든 switch 문을 의심해보라</li></ol><h3 id="G24-표준-표기법을-따르라"><a href="#G24-표준-표기법을-따르라" class="headerlink" title="G24: 표준 표기법을 따르라"></a>G24: 표준 표기법을 따르라</h3><ul><li>팀은 업계 표준에 기반한 구현 표준을 따라야 한다.</li><li>구현 표준은 인스턴스 변수 이름을 선언하는 위치, 클래스&#x2F;메서드&#x2F;변수 이름을 정하는 방법, 괄호를 넣는 위치 등을 명시해야 한다.</li><li>표준을 설명하는 문서는 코드 자체로 충분해야 하며 별도 문서를 만들 필요는 없어야 한다.</li></ul><h3 id="G25-매직-숫자는-명명된-상수로-교체하라"><a href="#G25-매직-숫자는-명명된-상수로-교체하라" class="headerlink" title="G25: 매직 숫자는 명명된 상수로 교체하라"></a>G25: 매직 숫자는 명명된 상수로 교체하라</h3><ul><li>의미가 분명하지 않은 토큰 값에 대해 상수로 선언하라</li></ul><h3 id="G26-정확하라"><a href="#G26-정확하라" class="headerlink" title="G26: 정확하라"></a>G26: 정확하라</h3><ul><li>검색 결과 중 첫 번째 결과만 유일한 결과로 간주하는 행동은 순진하다.</li><li>코드에서 뭔가를 결정할 때는 정확히 결정한다.</li><li>결정을 내리는 이유와 예외를 처리할 방법을 분명히 알아야 한다.</li></ul><h3 id="G27-관례보다-구조를-사용하라"><a href="#G27-관례보다-구조를-사용하라" class="headerlink" title="G27: 관례보다 구조를 사용하라"></a>G27: 관례보다 구조를 사용하라</h3><ul><li>설계 결정을 강요할 때는 규칙보다 관례를 사용한다.</li><li>명명 관례도 좋지만 구조 자체로 강제하면 더 좋다.</li><li>예를 들어, enum 변수가 멋진 switch&#x2F;case 문보다 추상 메서드가 있는 기초 클래스가 더 좋다.<ul><li>파생 클래스는 추상 메서드를 모두 구현해야 하는 강제성이 생기기 때문이다.</li></ul></li></ul><h3 id="G28-조건을-캡슐화하라"><a href="#G28-조건을-캡슐화하라" class="headerlink" title="G28: 조건을 캡슐화하라"></a>G28: 조건을 캡슐화하라</h3><ul><li>부울 논리는 조건의 의도를 분명히 밝히는 함수로 표현하라.</li></ul><h3 id="G29-부정-조건은-피하라"><a href="#G29-부정-조건은-피하라" class="headerlink" title="G29: 부정 조건은 피하라"></a>G29: 부정 조건은 피하라</h3><ul><li>부정 조건은 긍정 조건보다 이해하기 어렵다. 가능하면 긍정 조건으로 표현하라.</li></ul><h3 id="G30-함수는-한-가지만-해야-한다"><a href="#G30-함수는-한-가지만-해야-한다" class="headerlink" title="G30: 함수는 한 가지만 해야 한다"></a>G30: 함수는 한 가지만 해야 한다</h3><ul><li>한 가지만 수행하는 좀 더 작은 함수 여럿으로 나눠야 마땅하다.</li></ul><h3 id="G31-숨겨진-시간적인-결합"><a href="#G31-숨겨진-시간적인-결합" class="headerlink" title="G31: 숨겨진 시간적인 결합"></a>G31: 숨겨진 시간적인 결합</h3><ul><li>순서가 정해진 코드에서 시간 결합이 감춰져 있으면 실행 순서가 드러나지 않아, 잘못된 순서로 호출하게 되면 오류를 유발한다.</li><li>시간 순서로 흘러야 하는 코드에선 여러 함수라면, 함수의 결과 값이 그 다음 함수의 인수로 들어가는 방식으로 결합을 드러내보자.</li></ul><h3 id="G32-일관성을-유지하라"><a href="#G32-일관성을-유지하라" class="headerlink" title="G32: 일관성을 유지하라"></a>G32: 일관성을 유지하라</h3><ul><li>코드 구조를 잡을 때는 이유를 고민하라.</li><li>구조에 일관성이 없어 보이면 남들이 마음대로 바꿔도 괜찮다고 생각하게 된다.</li></ul><h3 id="G33-경계-조건을-캡슐화하라"><a href="#G33-경계-조건을-캡슐화하라" class="headerlink" title="G33: 경계 조건을 캡슐화하라"></a>G33: 경계 조건을 캡슐화하라</h3><ul><li>경계 조건은 if문에서만 사용하지 말고 변수로 캡슐화해라</li></ul><h3 id="G34-함수는-추상화-수준을-한-단계만-내려가야-한다"><a href="#G34-함수는-추상화-수준을-한-단계만-내려가야-한다" class="headerlink" title="G34: 함수는 추상화 수준을 한 단계만 내려가야 한다"></a>G34: 함수는 추상화 수준을 한 단계만 내려가야 한다</h3><ul><li>함수 내 모든 문장은 추상화 수준이 동일해야 한다.</li><li>인간은 추상화 수준을 뒤섞는 능력이 너무나도 뛰어나다. (ㅋㅋㅋㅋ)</li><li>어렵겠지만, 결국 핵심은 SRP를 지켜내면서 함수 안에 담긴 추상화의 내용이 하나이면 해결될 것 같다.</li></ul><h3 id="G35-설정-정보는-최상위-단계에-둬라"><a href="#G35-설정-정보는-최상위-단계에-둬라" class="headerlink" title="G35: 설정 정보는 최상위 단계에 둬라"></a>G35: 설정 정보는 최상위 단계에 둬라</h3><ul><li>그래야 나중에 변경하기도 쉽다.</li><li>저차원 함수에 상수 값을 정의하지 말자.</li></ul><h3 id="G36-추이적-탐색을-피하라"><a href="#G36-추이적-탐색을-피하라" class="headerlink" title="G36: 추이적 탐색을 피하라"></a>G36: 추이적 탐색을 피하라</h3><ul><li>디미터 법칙을 지키자</li><li>자신이 직접 사용할 모듈만 알도록 구현하자</li></ul><blockquote><p>myCollaborator.doSomething();</p></blockquote><h2 id="자바"><a href="#자바" class="headerlink" title="자바"></a>자바</h2><h3 id="J1-긴-import-목록을-피하고-와일드카드를-사용하라"><a href="#J1-긴-import-목록을-피하고-와일드카드를-사용하라" class="headerlink" title="J1: 긴 import 목록을 피하고 와일드카드를 사용하라"></a>J1: 긴 import 목록을 피하고 와일드카드를 사용하라</h3><ul><li>패키지에서 클래스를 둘 이상 사용한다면 와일드카드 사용하라</li></ul><h3 id="J2-상수는-상속하지-않는다"><a href="#J2-상수는-상속하지-않는다" class="headerlink" title="J2: 상수는 상속하지 않는다."></a>J2: 상수는 상속하지 않는다.</h3><ul><li>언어의 범위 규칙을 속이는 행위다.</li><li>대신 <strong>static import</strong>를 사용해라</li></ul><h3 id="J3-상수-vs-Enum"><a href="#J3-상수-vs-Enum" class="headerlink" title="J3: 상수 vs Enum"></a>J3: 상수 vs Enum</h3><ul><li>static final로 상수를 사용하기 보다 훨씬 더 유연하고 서술적인 enum을 사용하자</li><li>메서드와 필드도 사용할 수 있다.</li></ul><h2 id="이름"><a href="#이름" class="headerlink" title="이름"></a>이름</h2><h3 id="N1-서술적인-이름을-사용하라"><a href="#N1-서술적인-이름을-사용하라" class="headerlink" title="N1: 서술적인 이름을 사용하라"></a>N1: 서술적인 이름을 사용하라</h3><ul><li>이름은 성급하게 정하지 않는다.</li><li>소프트웨어가 진화하면 의미도 변하므로 선택한 이름이 적합한지 자주 되돌아본다.</li><li><strong>소프트웨어 가독성의 90%는 이름이 결정한다.</strong></li><li>시간을 들여 현명한 이름을 선택하고 유효한 상태로 유지한다.</li><li>대충 정하기에 이름은 너무나도 중요하다.</li></ul><h3 id="N2-적절한-추상화-수준에서-이름을-선택하라"><a href="#N2-적절한-추상화-수준에서-이름을-선택하라" class="headerlink" title="N2: 적절한 추상화 수준에서 이름을 선택하라"></a>N2: 적절한 추상화 수준에서 이름을 선택하라</h3><ul><li>구현을 드러내는 이름은 피하라</li><li>작업 대상 클래스나 함수가 위치하는 추상화 수준을 반영하는 이름을 선택하라</li><li>발견할 때마다 기회를 잡아 바꿔놓으며 안정적인 코드를 만들기 위한 지속적인 개선과 노력이 필요하다.</li></ul><h3 id="N3-가능하다면-표준-명명법을-사용하라"><a href="#N3-가능하다면-표준-명명법을-사용하라" class="headerlink" title="N3: 가능하다면 표준 명명법을 사용하라"></a>N3: 가능하다면 표준 명명법을 사용하라</h3><ul><li>데코레이터 패턴을 사용한다면, 클래스 이름에 Decorator 라는 단어를 사용해야 한다.</li><li>자바에서 객체를 문자열로 변환하는 toString()은 관례이기 때문에 따르는 것이 좋다.</li><li>프로젝트에 유효한 의미가 담긴 이름을 많이 사용할수록 독자가 코드를 이해하기 쉬워진다.</li></ul><h3 id="N4-명확한-이름"><a href="#N4-명확한-이름" class="headerlink" title="N4: 명확한 이름"></a>N4: 명확한 이름</h3><ul><li>함수나 변수의 목적을 명확히 밝히는 이름을 선택한다.</li><li>아주 긴 이름이어도 모듈에서 한 번만 호출되고, 그 이름이 확실하다면 사용하자</li></ul><h3 id="N5-긴-범위는-긴-이름을-사용하라"><a href="#N5-긴-범위는-긴-이름을-사용하라" class="headerlink" title="N5: 긴 범위는 긴 이름을 사용하라"></a>N5: 긴 범위는 긴 이름을 사용하라</h3><ul><li>이름 길이는 범위 길이에 비례해야 한다.</li><li>범위가 작으면 아주 짧은 이름을 사용해도 괜찮다.</li><li>하지만 범위가 길어지면 긴 이름을 사용한다.</li><li>이름 범위가 길수록 이름을 정확하고 길게 짓자</li></ul><h3 id="N6-인코딩을-피하라"><a href="#N6-인코딩을-피하라" class="headerlink" title="N6: 인코딩을 피하라"></a>N6: 인코딩을 피하라</h3><ul><li>이름에 유형 정보나 범위 정보를 넣어서는 안 된다.</li><li>접두어도 필요없다.</li></ul><h3 id="N7-이름으로-부수-효과를-설명하라"><a href="#N7-이름으로-부수-효과를-설명하라" class="headerlink" title="N7: 이름으로 부수 효과를 설명하라"></a>N7: 이름으로 부수 효과를 설명하라</h3><ul><li>함수, 변수, 클래스가 하는 일을 모두 기술하는 이름을 사용한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> ObjectOutputStream <span class="title function_">getOos</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (m_oos == <span class="literal">null</span>) &#123;</span><br><span class="line">      m_oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(m_socket.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m_oos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위의 코드에서 메서드 명이 단순이 oos를 가져오는 것이 아니라 oos가 없으면 생성한다.</li><li><strong>createOrReturnOos</strong>라는 이름이 더 좋다.</li></ul><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><h3 id="T1-불충분한-테스트"><a href="#T1-불충분한-테스트" class="headerlink" title="T1: 불충분한 테스트"></a>T1: 불충분한 테스트</h3><ul><li>테스트 케이스는 잠재적으로 깨질 만한 부분을 모두 테스트해야 한다.</li><li>테스트 케이스가 확인하지 않는 조건이나 검증하지 않는 계산이 있다면 그 테스트는 불완전하다.</li></ul><h3 id="T2-커버리지-도구를-사용하라"><a href="#T2-커버리지-도구를-사용하라" class="headerlink" title="T2: 커버리지 도구를 사용하라!"></a>T2: 커버리지 도구를 사용하라!</h3><ul><li>커버리지 도구는 테스트가 빠뜨리는 공백을 알려준다.</li><li>커버리지 도구를 사용하면 테스트가 불충분한 모듈, 클래스, 함수를 찾기 쉬워진다.</li></ul><h3 id="T3-사소한-테스트를-건너뛰지-마라"><a href="#T3-사소한-테스트를-건너뛰지-마라" class="headerlink" title="T3: 사소한 테스트를 건너뛰지 마라"></a>T3: 사소한 테스트를 건너뛰지 마라</h3><ul><li>사소한 테스트가 제공하는 문서적 가치는 구현에 드는 비용을 넘어선다.</li></ul><h3 id="T4-무시한-테스트는-모호함을-뜻한다"><a href="#T4-무시한-테스트는-모호함을-뜻한다" class="headerlink" title="T4: 무시한 테스트는 모호함을 뜻한다"></a>T4: 무시한 테스트는 모호함을 뜻한다</h3><ul><li>때로는 요구사항이 불분명하기에 프로그램이 돌아가는 방식을 확신하기 어렵다.</li><li>불분명한 요구사항은 테스트 케이스를 주석으로 처리하거나 @Ignore 붙이기</li></ul><h3 id="T5-경계-조건을-테스트하라"><a href="#T5-경계-조건을-테스트하라" class="headerlink" title="T5: 경계 조건을 테스트하라"></a>T5: 경계 조건을 테스트하라</h3><ul><li>알고리즘의 중앙 조건은 올바로 짜놓고 경계 조건에서 실수하는 경우가 흔하다.</li></ul><h3 id="T6-버그-주변은-철저히-테스트하라"><a href="#T6-버그-주변은-철저히-테스트하라" class="headerlink" title="T6: 버그 주변은 철저히 테스트하라"></a>T6: 버그 주변은 철저히 테스트하라</h3><ul><li>버그는 서로 모이는 경향이 있다.</li><li>한 함수에서 버그를 발견했다면 그 함수를 철저히 테스트하는 편이 좋다.</li></ul><h3 id="T7-실패-패턴을-살펴라"><a href="#T7-실패-패턴을-살펴라" class="headerlink" title="T7: 실패 패턴을 살펴라"></a>T7: 실패 패턴을 살펴라</h3><ul><li>때로는 테스트 케이스가 실패하는 패턴으로 문제를 진단할 수 있다.</li><li>합리적인 순서로 정렬된 꼼꼼한 테스틑 케이스는 실패 패턴을 드러낸다.</li></ul><h3 id="T8-테스트-커버리지-패턴을-살펴라"><a href="#T8-테스트-커버리지-패턴을-살펴라" class="headerlink" title="T8: 테스트 커버리지 패턴을 살펴라"></a>T8: 테스트 커버리지 패턴을 살펴라</h3><ul><li>통과하는 테스트가 실행하거나 실행하지 않는 코드를 살펴보면 실패하는 테스트 케이스의 실패 원인이 드러난다.</li></ul><h3 id="T9-테스트는-빨라야-한다"><a href="#T9-테스트는-빨라야-한다" class="headerlink" title="T9: 테스트는 빨라야 한다"></a>T9: 테스트는 빨라야 한다</h3><ul><li>느린 테스트 케이스는 실행하지 않게 된다.</li><li>일정이 촉박하면 건너뛰게 되고, 그러지 않기 위해 테스트 케이스가 빨리 돌아가도록 최대한 노력하자</li></ul><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>일군의 규칙만 따른다고 깨끗한 코드가 얻어지지 않는다.</li><li>전문가 정신과 장인 정신은 가치에서 나온다.</li><li>그 가치에 기반한 규율과 절제가 필요하다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Clean_Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14. 프로젝트에서 테스트</title>
      <link href="/2022/02/27/junit/junit_14/"/>
      <url>/2022/02/27/junit/junit_14/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="https://github.com/boring-km/JunitPractice">https://github.com/boring-km/JunitPractice</a></p></li><li><p>빠른 도입</p></li><li><p>팀과 같은 편 되기</p></li><li><p>지속적 통합으로 수렴</p></li><li><p>코드 커버리지</p></li><li><p>마치며</p></li></ul><h2 id="14-1-빠른-도입"><a href="#14-1-빠른-도입" class="headerlink" title="14.1 빠른 도입"></a>14.1 빠른 도입</h2><ul><li>테스트 없이 코드를 만드는 것은 매우 단기간에만 생산적이다.</li><li>이것저것 문제를 안고 개발된 마지막 순간에서 할 수 있는 것은 협상만 남게 된다.</li><li>단위 테스트가 팀 문화(cadence)의 습관적인 일부가 될 수 있을지 토론해보자.</li></ul><h2 id="14-2-팀과-같은-편-되기"><a href="#14-2-팀과-같은-편-되기" class="headerlink" title="14.2 팀과 같은 편 되기"></a>14.2 팀과 같은 편 되기</h2><ul><li>개발자들이 단위 테스트에 접근하는 방식은 개인별로 매우 다르다.</li><li>적당한 타협을 통해 팀과 같은편이 되도록 하자</li></ul><h3 id="14-2-1-단위-테스트-표준-만들기"><a href="#14-2-1-단위-테스트-표준-만들기" class="headerlink" title="14.2.1 단위 테스트 표준 만들기"></a>14.2.1 단위 테스트 표준 만들기</h3><ul><li>어떻게 표준을 도출할 것인가?</li></ul><blockquote><p>개발자들은 어던 것이 모든 사람의 시간을 많이 낭비하게 만든다고 느끼나요?</p><p>모두가 빠르게 동의할 수 있는 단순한 표준은 무엇인가요?</p></blockquote><ul><li>표준을 세우고, 지속할 필요가 있으며, 필요할 때마다 다시 살펴보고 수정해야 한다.</li><li>특히 초창기에는 더욱 그러하다.</li></ul><h4 id="초창기에-표준화해야-하는-목록"><a href="#초창기에-표준화해야-하는-목록" class="headerlink" title="초창기에 표준화해야 하는 목록"></a>초창기에 표준화해야 하는 목록</h4><ul><li>코드를 체크인하기 전에 어떤 테스트를 실행해야 할지 여부</li><li>테스트 클래스와 메서드의 이름 짓는 방식</li><li>햄크레스트 혹은 전통적인 단언 사용 여부</li><li>AAA 사용 여부</li><li>선호하는 Mock 도구 선택</li><li>체크인 테스트를 실행할 때 콘솔에 출력을 허용할지 여부</li><li>단위 테스트 스위트에서 느린 테스트를 분명하게 식별하고 막을 방법</li></ul><h3 id="14-2-2-리뷰로-표준-준수-높이기"><a href="#14-2-2-리뷰로-표준-준수-높이기" class="headerlink" title="14.2.2 리뷰로 표준 준수 높이기"></a>14.2.2 리뷰로 표준 준수 높이기</h3><ul><li>“어떻게 코드 리뷰를 할 것인가?”</li><li>리뷰 세션을 통해 단위 테스트 작성자가 다른 팀원에게 피드백을 요청할 수 있다.</li><li>책에서는 ‘일부 팀들이 채택하는’이라고 했지만 최근에는 많은 팀에서 **’Pull Request’**를 활용하고 있는 것 같다.</li></ul><h3 id="14-2-3-짝-프로그래밍을-이용한-리뷰"><a href="#14-2-3-짝-프로그래밍을-이용한-리뷰" class="headerlink" title="14.2.3 짝 프로그래밍을 이용한 리뷰"></a>14.2.3 짝 프로그래밍을 이용한 리뷰</h3><ul><li>2명의 프로그래머가 함께 나란히 앉아서 소프트웨어를 개발하는 방법</li><li>최상의 리뷰는 코드를 깊이 이해한 사람에게서 나오지만, <strong>현실적으로 많은 회사에 시간적 여유가 없습니다.</strong></li><li>결과적으로 리뷰는 바라는 것보다 더 적은 결함을 찾게 된다.</li><li>사후 리뷰는 심각한 문제를 고치는 데 너무 늦는다.</li><li>짝 프로그래밍은 두 번째 사람의 눈으로 시작부터 품질이 좋은 코드를 만들 수 있따는 희망을 줄 수 있따.<ul><li>더 많고 좋은 단위 테스트를 지속해야 이뤄진다.</li><li>짝 프로그래밍을 하게 되면 단위 테스트의 가치는 더 높아진다.</li></ul></li></ul><blockquote><p>짝 프로그래밍이 불편한 사람도 있으니 짝 프로그래밍을 성공적으로 수행하는 노하우를 충분히 이해해야 한다.</p></blockquote><h2 id="14-3-지속적-통합으로-수렴-CI"><a href="#14-3-지속적-통합으로-수렴-CI" class="headerlink" title="14.3 지속적 통합으로 수렴 (CI)"></a>14.3 지속적 통합으로 수렴 (CI)</h2><ul><li>CI 서버는 소스 저장소를 모니터링 한다.</li><li>새로운 코드가 체크인 되면 CI 서버는 소스 저장소에서 코드를 가져와 빌드를 초기화한다.</li><li>빌드에 문제가 있다면 CI 서버는 개발 팀에 통지한다.</li><li>CI 서버가 어떤 가치를 제공하려면 빌드가 단위 테스트를 함께 수행해야 한다.</li><li>CI 서버는 나쁜 코드를 용납하지 않도록 건강한 동료 압박을 지원한다.</li><li>개발자들은 습관적으로 스스로에게 체크인하기 전에 단위 테스트를 먼저 돌려보아 CI 빌드가 실패해 다른 팀원들의 시간을 낭비하지 않게 한다.</li></ul><blockquote><p>CI 서버는 현대 개발 팀을 구성하는 최소 요건이다.</p></blockquote><h2 id="14-4-코드-커버리지"><a href="#14-4-코드-커버리지" class="headerlink" title="14.4 코드 커버리지"></a>14.4 코드 커버리지</h2><ul><li>단위 테스트가 실행한 코드의 전체 퍼센트를 측정</li><li>개발 환경에 맞는 커버리지 도구를 사요해보라</li></ul><h3 id="14-4-1-커버리지는-어느-정도여야-하는가"><a href="#14-4-1-커버리지는-어느-정도여야-하는가" class="headerlink" title="14.4.1 커버리지는 어느 정도여야 하는가?"></a>14.4.1 커버리지는 어느 정도여야 하는가?</h3><ul><li>대부분의 사람은 70% 이하의 커버리지는 불충분하다고 말한다.</li><li>코드를 작성하고 습관적으로 단위 테스트를 작서앟는 팀들은 비교적 쉽게 70%의 커버리지를 달성한다.<ul><li>보통 테스트되지 않은 부분은 나쁜 의존성 때문에 그 코드가 어렵거나 테스트하기 어렵기 때문이다.</li><li>정말 이상한 것은 코드 결함의 30%는 이러한 테스트 되지 않은 코드에 있다. (어려운 코드는 많은 결함을 숨기기 마련이다.)</li></ul></li></ul><blockquote><p><strong>제프의 코드 커버리지 이론:</strong> 낮은 커버리지의 영역에서 나쁜 코드의 양도 증가한다.</p></blockquote><h3 id="14-4-2-100-커버리지는-진짜-좋은가"><a href="#14-4-2-100-커버리지는-진짜-좋은가" class="headerlink" title="14.4.2 100% 커버리지는 진짜 좋은가?"></a>14.4.2 100% 커버리지는 진짜 좋은가?</h3><ul><li>TDD를 수행하는 개발자들은 일반적으로 정의상 90%를 초과 달성한다.</li><li>(많은 팀이 높은 커버리지만 달성하고 가치는 별로 없는 단위 테스트를 작성하느라 시간 낭비하는 것을 보았다고 한다.)</li></ul><h3 id="14-4-3-코드-커버리지의-가치"><a href="#14-4-3-코드-커버리지의-가치" class="headerlink" title="14.4.3 코드 커버리지의 가치"></a>14.4.3 코드 커버리지의 가치</h3><ul><li>테스트 작성을 완료했다고 생각할 때 커버리지 도구를 실행해라</li><li>아직 커버되지 않은 영역을 보라.</li><li>커버하지 않은 코드 영역을 염려한다면 더 많은 테스트를 작성해라</li><li>커버리지 도구를 주기적으로 바라보면 지속적으로 단위 테스트에 솔직해질 수 있다.</li><li>시간이 지나면서 커버리지 퍼센트가 높아져야 하고, 적어도 아래 방향으로 내려가면 안 된다.</li></ul><h2 id="14-5-마치며"><a href="#14-5-마치며" class="headerlink" title="14.5 마치며"></a>14.5 마치며</h2><ul><li>단위 테스트를 프로페셔널하게 사용해서 소프트웨어의 품질을 높일 수 있다.</li><li>계속 주시하고 단위 테스트와 TDD에 관해 조사해라.</li></ul>]]></content>
      
      
      <categories>
          
          <category> JUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
            <tag> test </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13. 까다로운 테스트</title>
      <link href="/2022/02/26/junit/junit_13/"/>
      <url>/2022/02/26/junit/junit_13/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="https://github.com/boring-km/JunitPractice">https://github.com/boring-km/JunitPractice</a></p></li><li><p>멀티스레드 코드 테스트</p></li><li><p>데이터베이스 코드 테스트</p></li><li><p>마치며</p></li></ul><blockquote><p>여기서 스레드와 영속성을 테스트하는 접근 방법은 2가지 주제에 기반을 둔다.</p><p>더 좋은 테스트 지원을 위한 ‘설계 다시 하기’, ‘stub과 mock을 사용해 의존성 끊기’</p></blockquote><h2 id="13-1-멀티스레드-코드-테스트"><a href="#13-1-멀티스레드-코드-테스트" class="headerlink" title="13.1 멀티스레드 코드 테스트"></a>13.1 멀티스레드 코드 테스트</h2><ul><li>동시성 처리가 필요한 애플리케이션 코드를 테스트하는 것은 기술적으로 단위 테스트가 아닌 통합 테스트 영역이다.</li><li>멀티스레드 코드를 테스트하는 예제를 통해 방법을 익혀보자</li></ul><h3 id="13-1-1-단순하고-똑똑하게-유지"><a href="#13-1-1-단순하고-똑똑하게-유지" class="headerlink" title="13.1.1 단순하고 똑똑하게 유지"></a>13.1.1 단순하고 똑똑하게 유지</h3><ul><li><strong>스레드 통제와 애플리케이션 코드 사이의 중첩을 최소화해라</strong><ul><li>스레드 없이 다량의 애플리케이션 코드를 단위 테스트할 수 있도록 설계를 변경해라</li><li>남은 작은 코드에 대해 스레드에 집중적인 테스트를 해라</li></ul></li><li><strong>다른 사람의 작업을 믿어라</strong><ul><li>너무 자바의 내용이라 패스</li><li>(다른 사람들이 잘 만들어놓은 util 클래스 사용하라는 얘기, BlockingQueue)</li></ul></li></ul><h3 id="13-1-2-모든-매칭-찾기"><a href="#13-1-2-모든-매칭-찾기" class="headerlink" title="13.1.2 모든 매칭 찾기"></a>13.1.2 모든 매칭 찾기</h3><ul><li>관련 있는 모든 프로파일을 수집하는 ProfileMatcher 클래스 예시</li><li>(12장의 코드에서 많은 변화가 있는 것 같음)</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileMatcher</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">val</span> profiles: MutableMap&lt;String, Profile&gt; = HashMap()</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(profile: <span class="type">Profile</span>)</span></span> &#123;</span><br><span class="line">      profiles[profile.getId()] = profile</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">findMatchingProfiles</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      criteria: <span class="type">Criteria</span>?, listener: <span class="type">MatchListener</span></span></span></span><br><span class="line"><span class="params"><span class="function">   )</span></span> &#123;</span><br><span class="line">      <span class="keyword">val</span> executor = Executors.newFixedThreadPool(DEFAULT_POOL_SIZE)</span><br><span class="line">      <span class="keyword">val</span> matchSets = profiles.values.stream()</span><br><span class="line">         .map &#123; profile: Profile -&gt;</span><br><span class="line">            profile.getMatchSet(criteria)</span><br><span class="line">         &#125;</span><br><span class="line">         .collect(Collectors.toList())</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">set</span> <span class="keyword">in</span> matchSets) &#123;</span><br><span class="line">         <span class="keyword">val</span> runnable = Runnable &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">set</span>.matches())</span><br><span class="line">               listener.foundMatch(profiles[<span class="keyword">set</span>.profileId], <span class="keyword">set</span>)</span><br><span class="line">         &#125;</span><br><span class="line">         executor.execute(runnable)</span><br><span class="line">      &#125;</span><br><span class="line">      executor.shutdown()</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> DEFAULT_POOL_SIZE = <span class="number">4</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>각 프로파일에 대해 MatchSet 인스턴스를 모으는 findMatchingProfiles()</li><li>각 MatchSet에 대해 메서드는 별도의 스레드를 생성해 MatchSet 객체의 matches() return 값이 true이면 프로파일과 그에 맞는 MatchSet 객체를 listener로 보낸다.</li></ul><h3 id="13-1-3-애플리케이션-로직-추출"><a href="#13-1-3-애플리케이션-로직-추출" class="headerlink" title="13.1.3 애플리케이션 로직 추출"></a>13.1.3 애플리케이션 로직 추출</h3><ul><li>findMatchingProfiles() 분리</li><li>분리한 collectMatchSets() 테스트 작성</li><li>매칭된 프로파일 정보를 listener로 넘기는 로직도 추출한다.</li><li>분리한 process() 테스트 작성<ul><li>모키토의 정적 mock() 메서드를 사용해 MatchListener 목 인스턴스를 생성한다.</li><li>매칭되는 프로파일(주어진 조건에 매칭될 것으로 기대되는 프로파일)을 matcher 변수에 추가한다.</li><li>주어진 조건 집합에 매칭되는 프로파일에 대한 MatchSet 객체를 요청한다.</li><li>mock listener와 MatchSet 객체를 넘겨 matcher 변수에 매칭 처리를 지시한다.</li><li>mockito를 활용해 mock으로 만든 listener 객체에 foundMatch() 메서드가 호출되었는지 확인한다.<br>이때 매칭 프로파일과 MatchSet 객체를 인수로 넘긴다. 기대 사항이 맞지 않으면 mockito에 의해 테스트는 실패한다.</li></ul></li></ul><h3 id="13-1-4-스레드-로직의-테스트-지원을-위해-재설계"><a href="#13-1-4-스레드-로직의-테스트-지원을-위해-재설계" class="headerlink" title="13.1.4 스레드 로직의 테스트 지원을 위해 재설계"></a>13.1.4 스레드 로직의 테스트 지원을 위해 재설계</h3><ul><li>남아있는 findMatchingProfiles() 메서드의 코드 대부분은 스레드 로직이다.</li><li>테스트를 위해 재설계를 해본다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiConsumer</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileMatcher</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">val</span> profiles: MutableMap&lt;String, Profile&gt; = HashMap()</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(profile: <span class="type">Profile</span>)</span></span> &#123;</span><br><span class="line">      profiles[profile.getId()] = profile</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">val</span> executor = Executors.newFixedThreadPool(DEFAULT_POOL_SIZE)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">findMatchingProfiles</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      listener: <span class="type">MatchListener</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">      matchSets: <span class="type">MutableList</span>&lt;<span class="type">MatchSet</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">      processFunction: <span class="type">BiConsumer</span>&lt;<span class="type">MatchListener</span>, MatchSet&gt;</span></span></span><br><span class="line"><span class="params"><span class="function">   )</span></span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">set</span> <span class="keyword">in</span> matchSets) &#123;</span><br><span class="line">         <span class="keyword">val</span> runnable = Runnable &#123; processFunction.accept(listener, <span class="keyword">set</span>) &#125;</span><br><span class="line">         executor.execute(runnable)</span><br><span class="line">      &#125;</span><br><span class="line">      executor.shutdown()</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">findMatchingProfiles</span><span class="params">(criteria: <span class="type">Criteria</span>, listener: <span class="type">MatchListener</span>)</span></span> &#123;</span><br><span class="line">      findMatchingProfiles(</span><br><span class="line">         listener, collectMatchSets(criteria), ::process</span><br><span class="line">      )</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 비동기로 실행할 코드</span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">process</span><span class="params">(listener: <span class="type">MatchListener</span>, <span class="keyword">set</span>: <span class="type">MatchSet</span>)</span></span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">set</span>.matches()) listener.foundMatch(profiles[<span class="keyword">set</span>.profileId], <span class="keyword">set</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">collectMatchSets</span><span class="params">(criteria: <span class="type">Criteria</span>?)</span></span>: MutableList&lt;MatchSet&gt; = profiles.values.stream()</span><br><span class="line">      .map &#123; profile: Profile -&gt;</span><br><span class="line">         profile.getMatchSet(</span><br><span class="line">            criteria</span><br><span class="line">         )</span><br><span class="line">      &#125;</span><br><span class="line">      .collect(Collectors.toList())</span><br><span class="line"></span><br><span class="line">   <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> DEFAULT_POOL_SIZE = <span class="number">4</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-1-5-스레드-로직을-위한-테스트-작성"><a href="#13-1-5-스레드-로직을-위한-테스트-작성" class="headerlink" title="13.1.5 스레드 로직을 위한 테스트 작성"></a>13.1.5 스레드 로직을 위한 테스트 작성</h3><ul><li>테스트 코드 수정</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hamcrest.CoreMatchers</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.CoreMatchers.equalTo</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.MatcherAssert.assertThat</span><br><span class="line"><span class="keyword">import</span> org.junit.Before</span><br><span class="line"><span class="keyword">import</span> org.junit.Test</span><br><span class="line"><span class="keyword">import</span> org.mockito.Mockito.mock</span><br><span class="line"><span class="keyword">import</span> org.mockito.Mockito.verify</span><br><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiConsumer</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileMatcherTest</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> question: BooleanQuestion</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> criteria: Criteria</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> matcher: ProfileMatcher</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> matchingProfile: Profile</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> nonMatchingProfile: Profile</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> listener: MatchListener</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">()</span></span> &#123;</span><br><span class="line">    question = BooleanQuestion(<span class="number">1</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    criteria = Criteria()</span><br><span class="line">    criteria.add(Criterion(matchingAnswer(), Weight.MustMatch))</span><br><span class="line">    matchingProfile = createMatchingProfile(<span class="string">&quot;matching&quot;</span>)</span><br><span class="line">    nonMatchingProfile = createNonMatchingProfile(<span class="string">&quot;nonMatching&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">createMatchingProfile</span><span class="params">(name: <span class="type">String</span>)</span></span>: Profile &#123;</span><br><span class="line">    <span class="keyword">val</span> profile = Profile(name)</span><br><span class="line">    profile.add(matchingAnswer())</span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">createNonMatchingProfile</span><span class="params">(name: <span class="type">String</span>)</span></span>: Profile &#123;</span><br><span class="line">    <span class="keyword">val</span> profile = Profile(name)</span><br><span class="line">    profile.add(nonMatchingAnswer())</span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">createMatcher</span><span class="params">()</span></span> &#123;</span><br><span class="line">    matcher = ProfileMatcher()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">createMatchListener</span><span class="params">()</span></span> &#123;</span><br><span class="line">    listener = mock(MatchListener::<span class="keyword">class</span>.java)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">processNotifiesListenerOnMatch</span><span class="params">()</span></span> &#123;</span><br><span class="line">    matcher.add(matchingProfile)</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">set</span> = matchingProfile.getMatchSet(criteria)</span><br><span class="line"></span><br><span class="line">    matcher.process(listener, <span class="keyword">set</span>)</span><br><span class="line"></span><br><span class="line">    verify(listener).foundMatch(matchingProfile, <span class="keyword">set</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">collectsMatchSets</span><span class="params">()</span></span> &#123;</span><br><span class="line">    matcher.add(matchingProfile)</span><br><span class="line">    matcher.add(nonMatchingProfile)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sets = matcher.collectMatchSets(criteria)</span><br><span class="line"></span><br><span class="line">    assertThat(</span><br><span class="line">      sets.stream()</span><br><span class="line">        .map &#123; <span class="keyword">set</span>: MatchSet -&gt; <span class="keyword">set</span>.profileId &#125;.collect(Collectors.toSet()),</span><br><span class="line">      CoreMatchers.equalTo(</span><br><span class="line">        HashSet(</span><br><span class="line">          listOf(</span><br><span class="line">            matchingProfile.getId(), nonMatchingProfile.getId()</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">matchingAnswer</span><span class="params">()</span></span>: Answer &#123;</span><br><span class="line">    <span class="keyword">return</span> Answer(question, Bool.TRUE)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">nonMatchingAnswer</span><span class="params">()</span></span>: Answer &#123;</span><br><span class="line">    <span class="keyword">return</span> Answer(question, Bool.FALSE)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">gathersMatchingProfiles</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 리스너가 수신하는 MatchSet 객체들의 프로파일 ID 목록을 저장할 문자열 Set 객체를 생성한다.</span></span><br><span class="line">    <span class="keyword">val</span> processedSets = Collections.synchronizedSet(HashSet&lt;String&gt;())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// process() 메서드의 프로덕션 버전을 대신하는 함수</span></span><br><span class="line">    <span class="keyword">val</span> processFunction = BiConsumer &#123; _: MatchListener, <span class="keyword">set</span>: MatchSet -&gt;</span><br><span class="line">      <span class="comment">// 각 콜백에서 MatchSet 객체의 프로파일 ID를 processedSets 변수에 추가</span></span><br><span class="line">      processedSets.add(<span class="keyword">set</span>.profileId)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 테스트용 MatchSet 객체 생성</span></span><br><span class="line">    <span class="keyword">val</span> matchSets = createMatchSets(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// processFunction() 구현을 넘긴다.</span></span><br><span class="line">    <span class="comment">// 실제로는 criteria로 테스트를 해야하지만, 내부의 로직은 matchSets의 내용을 그대로 MutableList&lt;MatchSet&gt;에 담아서 리턴한다.</span></span><br><span class="line">    matcher.findMatchingProfiles(criteria, listener, matchSets, processFunction)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ExecutorService 객체를 가져와 모든 스레드의 실행이 완료될 때까지 기다림</span></span><br><span class="line">    <span class="keyword">while</span> (!matcher.executor.isTerminated);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// processedSets 컬렉션이 테스트에서 생성된 모든 MatchSet 객체의 ID와 매칭되는지 검증한다.</span></span><br><span class="line">    assertThat(processedSets, equalTo(matchSets.stream().map(MatchSet::profileId).collect(Collectors.toSet())))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">createMatchSets</span><span class="params">(count: <span class="type">Int</span>)</span></span>: MutableList&lt;MatchSet&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> sets = arrayListOf&lt;MatchSet&gt;()</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until count) &#123;</span><br><span class="line">      sets.add(MatchSet(i.toString(), <span class="literal">null</span>, <span class="literal">null</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sets</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-2-데이터베이스-테스트"><a href="#13-2-데이터베이스-테스트" class="headerlink" title="13.2 데이터베이스 테스트"></a>13.2 데이터베이스 테스트</h2><ul><li>챕터 5에서 잠깐 소개된 StatCompiler 코드에서 QuestionController와 상호 작용하는 questionText() 메서드에 관한 테스트를 작성해보기</li><li>(5장 공부할 때도 따로 기록을 안해놔서 일단 아래에 적음)</li><li><a href="https://github.com/gilbutITbook/006814/blob/master/iloveyouboss_16-branch-persistence-redesign/src/iloveyouboss/domain/StatCompiler.java">StatCompiler.java</a></li></ul><h3 id="13-2-1-고마워-Controller"><a href="#13-2-1-고마워-Controller" class="headerlink" title="13.2.1 고마워, Controller"></a>13.2.1 고마워, Controller</h3><ul><li>questionText() 메서드에서 DB와 통신하는 <strong>controller</strong> 변수 때문에 테스트하기가 어려울 수 있다.</li><li><a href="https://github.com/gilbutITbook/006814/blob/03260ef4099f6e4efa0779a598c3b7fcd2565fcd/iloveyouboss_16-branch-persistence-redesign/src/iloveyouboss/controller/QuestionController.java#L17">QuestionController.java</a></li><li>해당 클래스에 대한 단위 테스트를 일일이 작성하는 것보다 진짜 DB와 성공적으로 상호 작용하는 QuestionController 클래스에 대한 테스트를 작성하는 것이 좋다.</li></ul><h3 id="13-2-2-데이터-문제"><a href="#13-2-2-데이터-문제" class="headerlink" title="13.2.2 데이터 문제"></a>13.2.2 데이터 문제</h3><ul><li>JUnit의 테스트 대다수는 속도가 빠르길 원하는데 DB 테스트가 느려지지 않도록, 영속적인 모든 상호 작용을 시스템의 한곳으로 고립시켜 통합 테스트의 대상을 줄이도록 하자</li></ul><blockquote><p>테스트 안에서 데이터를 생성하고 관리해라</p><p>매 테스트는 그다음 자기가 쓸 데이터를 추가하거나 그것으로 작업해라(테스트 간 의존성 문제가 생기지 않도록 하기 위함)</p><p>테스트마다 트랜잭션을 초기화하고, 테스트가 끝나면 롤백하는 방법을 선택하자</p></blockquote><ul><li>통합 테스트는 작성과 유지 보수가 어렵다. 자주 망가지고, 그들이 깨졌을 때 문제를 디버깅하는 것도 상당히 오래걸리지만 여전히 <strong>테스트 전략의 필수적인 부분이다.</strong></li></ul><h3 id="13-2-3-클린-룸-데이터베이스-테스트"><a href="#13-2-3-클린-룸-데이터베이스-테스트" class="headerlink" title="13.2.3 클린 룸 데이터베이스 테스트"></a>13.2.3 클린 룸 데이터베이스 테스트</h3><ul><li><a href="https://github.com/gilbutITbook/006814/blob/master/iloveyouboss_16-branch-persistence-redesign/test/iloveyouboss/controller/QuestionControllerTest.java">예제의 코드</a>를 그대로 가져왔다.</li><li>@Before, @After 메서드 모두에서 deleteAll() 메서드를 통해 매번 데이터를 초기화하고 있다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.CoreMatchers.*;</span><br><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.*;</span><br><span class="line"><span class="keyword">import</span> iloveyouboss.domain.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuestionControllerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> QuestionController controller;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Before</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">      controller = <span class="keyword">new</span> <span class="title class_">QuestionController</span>();</span><br><span class="line">      controller.deleteAll();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@After</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cleanup</span><span class="params">()</span> &#123;</span><br><span class="line">      controller.deleteAll();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findsPersistedQuestionById</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> controller.addBooleanQuestion(<span class="string">&quot;question text&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="type">Question</span> <span class="variable">question</span> <span class="operator">=</span> controller.find(id);</span><br><span class="line">      </span><br><span class="line">      assertThat(question.getText(), equalTo(<span class="string">&quot;question text&quot;</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">questionAnswersDateAdded</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">Instant</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>().toInstant();</span><br><span class="line">      controller.setClock(Clock.fixed(now, ZoneId.of(<span class="string">&quot;America/Denver&quot;</span>)));</span><br><span class="line">      <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> controller.addBooleanQuestion(<span class="string">&quot;text&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="type">Question</span> <span class="variable">question</span> <span class="operator">=</span> controller.find(id);</span><br><span class="line">      </span><br><span class="line">      assertThat(question.getCreateTimestamp(), equalTo(now));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">answersMultiplePersistedQuestions</span><span class="params">()</span> &#123;</span><br><span class="line">      controller.addBooleanQuestion(<span class="string">&quot;q1&quot;</span>);</span><br><span class="line">      controller.addBooleanQuestion(<span class="string">&quot;q2&quot;</span>);</span><br><span class="line">      controller.addPercentileQuestion(<span class="string">&quot;q3&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;a1&quot;</span>, <span class="string">&quot;a2&quot;</span>&#125;);</span><br><span class="line">      </span><br><span class="line">      List&lt;Question&gt; questions = controller.getAll();</span><br><span class="line">      </span><br><span class="line">      assertThat(questions.stream()</span><br><span class="line">            .map(Question::getText)</span><br><span class="line">            .collect(Collectors.toList()), </span><br><span class="line">         equalTo(Arrays.asList(<span class="string">&quot;q1&quot;</span>, <span class="string">&quot;q2&quot;</span>, <span class="string">&quot;q3&quot;</span>)));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findsMatchingEntries</span><span class="params">()</span> &#123;</span><br><span class="line">      controller.addBooleanQuestion(<span class="string">&quot;alpha 1&quot;</span>);</span><br><span class="line">      controller.addBooleanQuestion(<span class="string">&quot;alpha 2&quot;</span>);</span><br><span class="line">      controller.addBooleanQuestion(<span class="string">&quot;beta 1&quot;</span>);</span><br><span class="line"></span><br><span class="line">      List&lt;Question&gt; questions = controller.findWithMatchingText(<span class="string">&quot;alpha&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      assertThat(questions.stream()</span><br><span class="line">            .map(Question::getText)</span><br><span class="line">            .collect(Collectors.toList()),</span><br><span class="line">         equalTo(Arrays.asList(<span class="string">&quot;alpha 1&quot;</span>, <span class="string">&quot;alpha 2&quot;</span>)));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-2-4-controller를-목-처리"><a href="#13-2-4-controller를-목-처리" class="headerlink" title="13.2.4 controller를 목 처리"></a>13.2.4 controller를 목 처리</h3><ul><li>다시 questionText() 메서드의 테스트로 돌아가 QuestionController를 Mocking 해보는 것으로 마무리한다.</li><li><a href="https://github.com/gilbutITbook/006814/blob/master/iloveyouboss_16-branch-persistence-redesign/test/iloveyouboss/domain/StatCompilerTest.java">링크</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"><span class="keyword">import</span> iloveyouboss.controller.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"><span class="keyword">import</span> org.mockito.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.CoreMatchers.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StatCompilerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Mock</span> <span class="keyword">private</span> QuestionController controller;  <span class="comment">// Mocking할 객체 선언</span></span><br><span class="line">  <span class="meta">@InjectMocks</span> <span class="keyword">private</span> StatCompiler stats;  <span class="comment">// Mock 객체를 주입할 객체 선언</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line">    stats = <span class="keyword">new</span> <span class="title class_">StatCompiler</span>();</span><br><span class="line">    MockitoAnnotations.initMocks(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">questionTextDoesStuff</span><span class="params">()</span> &#123;</span><br><span class="line">    when(controller.find(<span class="number">1</span>)).thenReturn(<span class="keyword">new</span> <span class="title class_">BooleanQuestion</span>(<span class="string">&quot;text1&quot;</span>));</span><br><span class="line">    when(controller.find(<span class="number">2</span>)).thenReturn(<span class="keyword">new</span> <span class="title class_">BooleanQuestion</span>(<span class="string">&quot;text2&quot;</span>));</span><br><span class="line">    List&lt;BooleanAnswer&gt; answers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    answers.add(<span class="keyword">new</span> <span class="title class_">BooleanAnswer</span>(<span class="number">1</span>, <span class="literal">true</span>));</span><br><span class="line">    answers.add(<span class="keyword">new</span> <span class="title class_">BooleanAnswer</span>(<span class="number">2</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, String&gt; questionText = stats.questionText(answers);</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, String&gt; expected = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    expected.put(<span class="number">1</span>, <span class="string">&quot;text1&quot;</span>);</span><br><span class="line">    expected.put(<span class="number">2</span>, <span class="string">&quot;text2&quot;</span>);</span><br><span class="line">    assertThat(questionText, equalTo(expected));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>StatCompiler 내부에 있는 QuestionController 인스턴스를 mockito를 이용해 생성해주었다.</li><li>그리고 테스트 코드 내 ‘when().thenReturn()’을 통해 QuestionController 인스턴스가 가상으로 동작할 코드와 그 결과를 정의한다.</li><li>questionText()가 정상적으로 동작한다면 DB 의존성 없이 간단하게 테스트를 해볼 수 있게 된다.</li></ul><h2 id="13-3-마치며"><a href="#13-3-마치며" class="headerlink" title="13.3 마치며"></a>13.3 마치며</h2><ul><li>멀티스레드와 데이터베이스 상호 작용은 그 자체로 험난하며, 많은 결함이 이 영역에서 출몰한다.</li></ul><blockquote><p>관심사를 분리해라. 애플리케이션 로직은 ‘스레드, 데이터베이스 혹은 문제를 일으킬 수 있는 다른 의존성’과 분리해라.</p><p>느리거나 휘발적인 코드를 mock으로 대체해 단위 테스트의 의존성을 끊어라</p><p>필요한 경우에는 통합 테스트를 작성하되, 단순하고 집중적으로 만들어라.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
            <tag> test </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12. 테스트 주도 개발</title>
      <link href="/2022/02/22/junit/junit_12/"/>
      <url>/2022/02/22/junit/junit_12/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="https://github.com/boring-km/JunitPractice/commits/master/src/test/kotlin/chapter12">https://github.com/boring-km/JunitPractice/commits/master/src/test/kotlin/chapter12</a></p></li><li><p>TDD의 주된 이익</p></li><li><p>단순하게 시작</p></li><li><p>또 다른 증분 추가</p></li><li><p>테스트 정리</p></li><li><p>또 다른 작은 증분</p></li><li><p>다수의 응답 지원: 작은 설계 우회로</p></li><li><p>인터페이스 확장</p></li><li><p>마지막 테스트들</p></li><li><p>문서로서의 테스트</p></li><li><p>TDD의 리듬</p></li><li><p>마치며</p></li></ul><blockquote><p>TDD에서 단위 테스트를 시스템의 모양을 잡고 통제하는 도구로 활용해야 한다.</p><p>단위 테스트는 소프트웨어를 어떻게 만들어야 할지에 관한 잘 훈련된 사이클의 핵심적인 부분이다.</p></blockquote><h2 id="12-1-TDD의-주된-이익"><a href="#12-1-TDD의-주된-이익" class="headerlink" title="12.1 TDD의 주된 이익"></a>12.1 TDD의 주된 이익</h2><ul><li><strong>코드가 예상한 대로 동작한다는 자신감을 얻는 것</strong></li><li>TDD에서는 코드가 변경될 것이라는 두려움을 지울 수 있다.</li><li>(전에 공부한 TDD 책의 내용과 유사한 점이 많아 PASS)</li></ul><h2 id="12-2-단순하게-시작"><a href="#12-2-단순하게-시작" class="headerlink" title="12.2 단순하게 시작"></a>12.2 단순하게 시작</h2><ol><li>실패하는 테스트 코드 작성하기</li><li>테스트 통과시키기</li><li>이전 두 단계에서 추가되거나 변경된 코드 개선하기</li></ol><ul><li>(전에 읽었던 TDD 책의 3단계와 표현된 방식은 좀 달라도 이해는 하고 있다.)</li><li>일단 테스트 통과시키기까지 해보기</li></ul><h2 id="12-3-또-다른-증분-추가"><a href="#12-3-또-다른-증분-추가" class="headerlink" title="12.3 또 다른 증분 추가"></a>12.3 또 다른 증분 추가</h2><ul><li>실패하는 각 테스트에 대해 그 테스트를 통과할 수 있는 코드만 추가해라</li><li>가능한 가장 작은 증분을 추가하는 것이다.</li><li>프로파일이 매칭되는 경우를 찾는 테스트를 추가해보자.</li></ul><h2 id="12-4-테스트-정리"><a href="#12-4-테스트-정리" class="headerlink" title="12.4 테스트 정리"></a>12.4 테스트 정리</h2><ul><li>2번까지 진행한 코드에서 테스트 코드를 한번 정리해준다.</li></ul><h2 id="12-5-또-다른-작은-증분"><a href="#12-5-또-다른-작은-증분" class="headerlink" title="12.5 또 다른 작은 증분"></a>12.5 또 다른 작은 증분</h2><ul><li>Profile 인스턴스가 매칭되는 Answer 객체가 없을 때 matches() 메서드가 false를 반환하는 것이다.</li><li>TDD로 생각하는 부분의 일부는 작성할 필요가 있는 다음 테스트를 결정하는 것이다.</li><li>프로그래머로서의 임무는 코드가 다루어야 하는 모든 가능한 순열과 시나리오를 이해하는 것이다.</li><li><strong>TDD로 성공하려면 이들 시나리오를 테스트로 만들고 각 테스트를 통과하게 만드는 코드 증분을 최소화하는 순으로 코드를 작성하는 것이다.</strong></li></ul><h2 id="12-6-다수의-응답-지원-작은-설계-우회로"><a href="#12-6-다수의-응답-지원-작은-설계-우회로" class="headerlink" title="12.6 다수의 응답 지원: 작은 설계 우회로"></a>12.6 다수의 응답 지원: 작은 설계 우회로</h2><ul><li>다수의 응답을 포함하는 Profile에 대한 시나리오를 처리해본다.</li><li>TDD를 할 때 다른 코드를 전혀 건드리지 않고 Profile 클래스만 변경할 필요는 없다.</li><li>필요하다면 설계를 변경하여 다른 클래스로 넘어가도 된다.</li></ul><h2 id="12-7-인터페이스-확장"><a href="#12-7-인터페이스-확장" class="headerlink" title="12.7 인터페이스 확장"></a>12.7 인터페이스 확장</h2><ul><li>컬렉션 객체 Criteria를 matches()로 처리할 수 있도록 수정해본다.</li></ul><h2 id="12-8-마지막-테스트들"><a href="#12-8-마지막-테스트들" class="headerlink" title="12.8 마지막 테스트들"></a>12.8 마지막 테스트들</h2><ul><li>다른 특수 경우 추가해보기</li><li>조건이 “don’t care” 라면 matches() 메서드는 true 반환</li><li>점수 계산 요구사항 추가해보기</li><li>ProfileMatch 클래스로 책임 이동하여 Profile 클래스의 SRP 준수하자</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> answers: MutableMap&lt;String, Answer&gt; = HashMap()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(answer: <span class="type">Answer</span>)</span></span> &#123;</span><br><span class="line">        answers[answer.questionText] = answer</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">match</span><span class="params">(criteria: <span class="type">Criteria</span>)</span></span>: ProfileMatch &#123;</span><br><span class="line">        <span class="keyword">return</span> ProfileMatch(answers, criteria)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileMatch</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> answers: MutableMap&lt;String, Answer&gt;, <span class="keyword">private</span> <span class="keyword">val</span> criteria: Criteria) &#123;</span><br><span class="line">    <span class="keyword">var</span> score = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> isMatch = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">matches</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> matches = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> (criterion: Criterion <span class="keyword">in</span> criteria) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matches(criterion)) &#123;</span><br><span class="line">                matches = <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (criterion.weight == Weight.MustMatch) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (matches) score = <span class="number">100</span></span><br><span class="line">        <span class="keyword">return</span> matches</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        isMatch = matches()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">matches</span><span class="params">(criterion: <span class="type">Criterion</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> criterion.weight == Weight.DontCare ||</span><br><span class="line">                criterion.answer.match(getMatchingProfileAnswer(criterion))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getMatchingProfileAnswer</span><span class="params">(criterion: <span class="type">Criterion</span>)</span></span>: Answer? &#123;</span><br><span class="line">        <span class="keyword">return</span> answers[criterion.answer.questionText]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-9-문서로서의-테스트"><a href="#12-9-문서로서의-테스트" class="headerlink" title="12.9 문서로서의 테스트"></a>12.9 문서로서의 테스트</h2><ul><li>테스트 코드들을 하나의 클래스에 넣을 필요도 없다.</li><li>테스트 이름도 수정해보자</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 최종</span></span><br><span class="line"><span class="keyword">import</span> org.hamcrest.CoreMatchers.equalTo</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.MatcherAssert.assertThat</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert.assertFalse</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert.assertTrue</span><br><span class="line"><span class="keyword">import</span> org.junit.Before</span><br><span class="line"><span class="keyword">import</span> org.junit.Test</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfileTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> profile: Profile</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> questionIsThereRelocation: BooleanQuestion</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> answerThereIsRelocation: Answer</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> answerThereIsNotRelocation: Answer</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> questionReimbursesTuition: BooleanQuestion</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> answerDoesNotReimburseTuition: Answer</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> answerReimbursesTuition: Answer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> criteria: Criteria</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">createCriteria</span><span class="params">()</span></span> &#123;</span><br><span class="line">        criteria = Criteria()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">createProfile</span><span class="params">()</span></span> &#123;</span><br><span class="line">        profile = Profile()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">createQuestionAndAnswer</span><span class="params">()</span></span> &#123; <span class="comment">// 이렇게 2가지를 같이 생성하는 의미로 사용해도 되려나...?</span></span><br><span class="line">        questionIsThereRelocation = BooleanQuestion(<span class="number">1</span>, <span class="string">&quot;Relocation package?&quot;</span>)</span><br><span class="line">        answerThereIsRelocation = Answer(questionIsThereRelocation, Bool.TRUE)</span><br><span class="line">        answerThereIsNotRelocation = Answer(questionIsThereRelocation, Bool.FALSE)</span><br><span class="line">        questionReimbursesTuition = BooleanQuestion(<span class="number">1</span>, <span class="string">&quot;Reimburses tuition?&quot;</span>)</span><br><span class="line">        answerDoesNotReimburseTuition = Answer(questionReimbursesTuition, Bool.FALSE)</span><br><span class="line">        answerReimbursesTuition = Answer(questionReimbursesTuition, Bool.TRUE)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile_MatchesCriterionTest</span>: <span class="type">ProfileTest</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">trueWhenMatchesSoleAnswer</span><span class="params">()</span></span> &#123;</span><br><span class="line">        profile.add(answerThereIsRelocation)</span><br><span class="line">        <span class="keyword">val</span> criterion = Criterion(answerThereIsRelocation, Weight.Important)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> result = profile.match(criterion).isMatch</span><br><span class="line"></span><br><span class="line">        assertTrue(result)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">falseWhenNoMatchingAnswerContained</span><span class="params">()</span></span> &#123;</span><br><span class="line">        profile.add(answerThereIsNotRelocation)</span><br><span class="line">        <span class="keyword">val</span> criterion = Criterion(answerThereIsRelocation, Weight.Important)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> result = profile.match(criterion).isMatch</span><br><span class="line"></span><br><span class="line">        assertFalse(result)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">matchesWhenContainsMultipleAnswers</span><span class="params">()</span></span> &#123;</span><br><span class="line">        profile.add(answerThereIsRelocation)</span><br><span class="line">        profile.add(answerDoesNotReimburseTuition)</span><br><span class="line">        <span class="keyword">val</span> criterion = Criterion(answerThereIsRelocation, Weight.Important)</span><br><span class="line"></span><br><span class="line">        assertTrue(profile.match(criterion).isMatch)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">matchesWhenCriterionIsDontCare</span><span class="params">()</span></span> &#123;</span><br><span class="line">        profile.add(answerDoesNotReimburseTuition)</span><br><span class="line">        <span class="keyword">val</span> criterion = Criterion(answerReimbursesTuition, Weight.DontCare)</span><br><span class="line"></span><br><span class="line">        assertTrue(profile.match(criterion).isMatch)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile_MatchesCriteriaTest</span>: <span class="type">ProfileTest</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">falseWhenNoneOfMultipleCriteriaMatch</span><span class="params">()</span></span> &#123;</span><br><span class="line">        profile.add(answerDoesNotReimburseTuition)</span><br><span class="line">        <span class="keyword">val</span> criteria = Criteria()</span><br><span class="line">        criteria.add(Criterion(answerThereIsRelocation, Weight.Important))</span><br><span class="line">        criteria.add(Criterion(answerReimbursesTuition, Weight.Important))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> result = profile.match(criteria).isMatch</span><br><span class="line"></span><br><span class="line">        assertFalse(result)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">trueWhenAnyOfMultipleCriteriaMatch</span><span class="params">()</span></span> &#123;</span><br><span class="line">        profile.add(answerThereIsRelocation)</span><br><span class="line">        <span class="keyword">val</span> criteria = Criteria()</span><br><span class="line">        criteria.add(Criterion(answerThereIsRelocation, Weight.Important))</span><br><span class="line">        criteria.add(Criterion(answerReimbursesTuition, Weight.Important))</span><br><span class="line">        assertTrue(profile.match(criteria).isMatch)   <span class="comment">// AAA 규칙을 안지켜도 잘 읽힌다.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">falseWhenAnyMustMeetCriteriaNotMet</span><span class="params">()</span></span> &#123;</span><br><span class="line">        profile.add(answerThereIsRelocation)</span><br><span class="line">        profile.add(answerDoesNotReimburseTuition)</span><br><span class="line">        criteria.add(Criterion(answerThereIsRelocation, Weight.Important))</span><br><span class="line">        criteria.add(Criterion(answerReimbursesTuition, Weight.MustMatch))</span><br><span class="line"></span><br><span class="line">        assertFalse(profile.match(criteria).isMatch)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile_ScoreTest</span>: <span class="type">ProfileTest</span></span>() &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">zeroWhenThereAreNoMatches</span><span class="params">()</span></span> &#123;</span><br><span class="line">        criteria.add(Criterion(answerThereIsRelocation, Weight.Important))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> match: ProfileMatch = profile.match(criteria)</span><br><span class="line"></span><br><span class="line">        assertThat(match.score, equalTo(<span class="number">0</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> 모두_일치하면_Score는_100이다<span class="params">()</span></span> &#123;</span><br><span class="line">        criteria.add(Criterion(answerThereIsRelocation, Weight.DontCare))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> match = profile.match(criteria)</span><br><span class="line"></span><br><span class="line">        assertThat(match.score, equalTo(<span class="number">100</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-10-TDD의-리듬"><a href="#12-10-TDD의-리듬" class="headerlink" title="12.10 TDD의 리듬"></a>12.10 TDD의 리듬</h2><ul><li>TDD의 리듬을 형성하면 좋다! ㅋㅋ</li><li>10분 정도 시간 제한을 걸어보고 테스트 통과를 못했다면 작업 중인 코드를 버리고 다시 좀 더 작은 단계로 도전해보자</li><li>각 TDD 사이클은 테스트를 가설로 한 시간 제한이 있는 실험으로 취급해라</li></ul><h2 id="12-11-마치며"><a href="#12-11-마치며" class="headerlink" title="12.11 마치며"></a>12.11 마치며</h2><ul><li><strong>테스트를 작성하고, 그것을 통과하고 코드가 깔끔한지 확인하고 반복하는 것이다!</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> JUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
            <tag> test </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11. 테스트 리팩토링</title>
      <link href="/2022/02/20/junit/junit_11/"/>
      <url>/2022/02/20/junit/junit_11/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="https://github.com/boring-km/JunitPractice">https://github.com/boring-km/JunitPractice</a></p></li><li><p>이해 검색</p></li><li><p>테스트 냄새: 불필요한 테스트 코드</p></li><li><p>테스트 냄새: 추상화 누락</p></li><li><p>테스트 냄새: 부적절한 정보</p></li><li><p>테스트 냄새: 부푼 생성</p></li><li><p>테스트 냄새: 다수의 단언</p></li><li><p>테스트 냄새: 테스트와 무관한 세부 사항들</p></li><li><p>테스트 냄새: 잘못된 조직</p></li><li><p>테스트 냄새: 암시적 의미</p></li><li><p>새로운 테스트 추가</p></li><li><p>마치며</p></li></ul><blockquote><p>테스트는 결함을 최소화하고 리팩토링으로 프로덕션 시스템을 깔끔하게 유지시켜 주지만, 이것은 지속적인 비용을 의미한다.</p><p>비용 증가로 이어지는 테스트 문제들을 해결해보자</p></blockquote><h2 id="11-1-이해-검색"><a href="#11-1-이해-검색" class="headerlink" title="11.1 이해 검색"></a>11.1 이해 검색</h2><ul><li>많이 복잡해보이는 Search 클래스의 테스트 코드</li><li>테스트가 무엇을 하는지 완전히 이해하려면 테스트를 매 행마다 꼼꼼하게 읽고 의미 조각들을 맞추어 보아야 한다.</li><li>리팩토링을 시작해보자…</li><li>(<strong>나는 역시 Kotlin 코드로 변환한 후부터 시작하고자 한다.</strong>)</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hamcrest.CoreMatchers</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert</span><br><span class="line"><span class="keyword">import</span> org.junit.Test</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream</span><br><span class="line"><span class="keyword">import</span> java.net.URL</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testSearch</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> pageContent = (<span class="string">&quot;There are certain queer times and occasions &quot;</span></span><br><span class="line">                    + <span class="string">&quot;in this strange mixed affair we call life when a man &quot;</span></span><br><span class="line">                    + <span class="string">&quot;takes this whole universe for a vast practical joke, &quot;</span></span><br><span class="line">                    + <span class="string">&quot;though the wit thereof he but dimly discerns, and more &quot;</span></span><br><span class="line">                    + <span class="string">&quot;than suspects that the joke is at nobody&#x27;s expense but &quot;</span></span><br><span class="line">                    + <span class="string">&quot;his own.&quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> bytes = pageContent.toByteArray()</span><br><span class="line">            <span class="keyword">val</span> stream = ByteArrayInputStream(bytes)</span><br><span class="line">            <span class="comment">// search</span></span><br><span class="line">            <span class="keyword">var</span> search = Search(stream, <span class="string">&quot;practical joke&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">            Search.LOGGER.level = Level.OFF</span><br><span class="line">            search.setSurroundingCharacterCount(<span class="number">10</span>)</span><br><span class="line">            search.execute()</span><br><span class="line">            Assert.assertFalse(search.errored())</span><br><span class="line">            <span class="keyword">val</span> matches: List&lt;Match&gt; = search.getMatches()</span><br><span class="line">            Assert.assertThat&lt;List&lt;Match&gt;&gt;(matches, CoreMatchers.`<span class="keyword">is</span>`(CoreMatchers.notNullValue()))</span><br><span class="line">            Assert.assertTrue(matches.size &gt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">val</span> match: Match = matches[<span class="number">0</span>]</span><br><span class="line">            Assert.assertThat(match.searchString, CoreMatchers.equalTo(<span class="string">&quot;practical joke&quot;</span>))</span><br><span class="line">            Assert.assertThat(match.surroundingContext,</span><br><span class="line">                CoreMatchers.equalTo(<span class="string">&quot;or a vast practical joke, though t&quot;</span>))</span><br><span class="line">            stream.close()</span><br><span class="line"></span><br><span class="line">            <span class="comment">// negative</span></span><br><span class="line">            <span class="keyword">val</span> connection = URL(<span class="string">&quot;http://bit.ly/15sYPA7&quot;</span>).openConnection()</span><br><span class="line">            <span class="keyword">val</span> inputStream = connection.getInputStream()</span><br><span class="line">            search = Search(inputStream, <span class="string">&quot;smelt&quot;</span>, <span class="string">&quot;http://bit.ly/15sYPA7&quot;</span>)</span><br><span class="line">            search.execute()</span><br><span class="line">            Assert.assertThat(search.getMatches().size, CoreMatchers.equalTo(<span class="number">0</span>))</span><br><span class="line">            stream.close()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">            Assert.fail(<span class="string">&quot;exception thrown in test&quot;</span> + e.message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-2-테스트-냄새-불필요한-코드"><a href="#11-2-테스트-냄새-불필요한-코드" class="headerlink" title="11.2 테스트 냄새: 불필요한 코드"></a>11.2 테스트 냄새: 불필요한 코드</h2><ul><li>테스트 코드가 예외를 기대하지 않는다면 그냥 throw 해버리면 된다. (try-catch 지우자)</li><li>not null assert는 유용한 정보를 담고 있지 않은 불필요한 테스트이다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hamcrest.CoreMatchers</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert</span><br><span class="line"><span class="keyword">import</span> org.junit.Test</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream</span><br><span class="line"><span class="keyword">import</span> java.io.IOException</span><br><span class="line"><span class="keyword">import</span> java.net.URL</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level</span><br><span class="line"><span class="keyword">import</span> kotlin.jvm.Throws</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Throws(IOException::class)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testSearch</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> pageContent = (<span class="string">&quot;There are certain queer times and occasions &quot;</span></span><br><span class="line">                + <span class="string">&quot;in this strange mixed affair we call life when a man &quot;</span></span><br><span class="line">                + <span class="string">&quot;takes this whole universe for a vast practical joke, &quot;</span></span><br><span class="line">                + <span class="string">&quot;though the wit thereof he but dimly discerns, and more &quot;</span></span><br><span class="line">                + <span class="string">&quot;than suspects that the joke is at nobody&#x27;s expense but &quot;</span></span><br><span class="line">                + <span class="string">&quot;his own.&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> bytes = pageContent.toByteArray()</span><br><span class="line">        <span class="keyword">val</span> stream = ByteArrayInputStream(bytes)</span><br><span class="line">        <span class="comment">// search</span></span><br><span class="line">        <span class="keyword">var</span> search = Search(stream, <span class="string">&quot;practical joke&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        Search.LOGGER.level = Level.OFF</span><br><span class="line">        search.setSurroundingCharacterCount(<span class="number">10</span>)</span><br><span class="line">        search.execute()</span><br><span class="line">        Assert.assertFalse(search.errored())</span><br><span class="line">        <span class="keyword">val</span> matches: List&lt;Match&gt; = search.getMatches()</span><br><span class="line">        Assert.assertTrue(matches.size &gt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">val</span> match: Match = matches[<span class="number">0</span>]</span><br><span class="line">        Assert.assertThat(match.searchString, CoreMatchers.equalTo(<span class="string">&quot;practical joke&quot;</span>))</span><br><span class="line">        Assert.assertThat(match.surroundingContext,</span><br><span class="line">            CoreMatchers.equalTo(<span class="string">&quot;or a vast practical joke, though t&quot;</span>))</span><br><span class="line">        stream.close()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// negative</span></span><br><span class="line">        <span class="keyword">val</span> connection = URL(<span class="string">&quot;http://bit.ly/15sYPA7&quot;</span>).openConnection()</span><br><span class="line">        <span class="keyword">val</span> inputStream = connection.getInputStream()</span><br><span class="line">        search = Search(inputStream, <span class="string">&quot;smelt&quot;</span>, <span class="string">&quot;http://bit.ly/15sYPA7&quot;</span>)</span><br><span class="line">        search.execute()</span><br><span class="line">        Assert.assertThat(search.getMatches().size, CoreMatchers.equalTo(<span class="number">0</span>))</span><br><span class="line">        stream.close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-3-테스트-냄새-추상화-누락"><a href="#11-3-테스트-냄새-추상화-누락" class="headerlink" title="11.3 테스트 냄새: 추상화 누락"></a>11.3 테스트 냄새: 추상화 누락</h2><ul><li>잘 구성된 테스트는 시스템과 상호 작용을 ‘데이터 준비하기’, ‘시스템과 동작하기’, ‘결과 단언하기’ 세 가지 관점에서 보여준다.</li><li>추상화로 필수적인 개념을 최대화하고 불필요한 세부 사항은 감춘다.</li></ul><blockquote><p>좋은 테스트는 클라이언트가 시스템과 어떻게 상호 작용하는지 추상화한다.</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chapter11.util.ContainsMatches.Companion.containsMatches</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.MatcherAssert.assertThat</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert.*</span><br><span class="line"><span class="keyword">import</span> org.junit.Test</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream</span><br><span class="line"><span class="keyword">import</span> java.io.IOException</span><br><span class="line"><span class="keyword">import</span> java.net.URL</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Throws(IOException::class)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testSearch</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> pageContent = (<span class="string">&quot;There are certain queer times and occasions &quot;</span></span><br><span class="line">                + <span class="string">&quot;in this strange mixed affair we call life when a man &quot;</span></span><br><span class="line">                + <span class="string">&quot;takes this whole universe for a vast practical joke, &quot;</span></span><br><span class="line">                + <span class="string">&quot;though the wit thereof he but dimly discerns, and more &quot;</span></span><br><span class="line">                + <span class="string">&quot;than suspects that the joke is at nobody&#x27;s expense but &quot;</span></span><br><span class="line">                + <span class="string">&quot;his own.&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> bytes = pageContent.toByteArray()</span><br><span class="line">        <span class="keyword">val</span> stream = ByteArrayInputStream(bytes)</span><br><span class="line">        <span class="comment">// search</span></span><br><span class="line">        <span class="keyword">var</span> search = Search(stream, <span class="string">&quot;practical joke&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        Search.LOGGER.level = Level.OFF</span><br><span class="line">        search.setSurroundingCharacterCount(<span class="number">10</span>)</span><br><span class="line">        search.execute()</span><br><span class="line">        assertFalse(search.errored())</span><br><span class="line">        assertThat(search.getMatches(),</span><br><span class="line">            containsMatches&lt;Match&gt;(arrayOf(</span><br><span class="line">                Match(<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;practical joke&quot;</span>,</span><br><span class="line">            <span class="string">&quot;or a vast practical joke, though t&quot;</span></span><br><span class="line">                ))))</span><br><span class="line">        stream.close()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// negative</span></span><br><span class="line">        <span class="keyword">val</span> connection = URL(<span class="string">&quot;http://bit.ly/15sYPA7&quot;</span>).openConnection()</span><br><span class="line">        <span class="keyword">val</span> inputStream = connection.getInputStream()</span><br><span class="line">        search = Search(inputStream, <span class="string">&quot;smelt&quot;</span>, <span class="string">&quot;http://bit.ly/15sYPA7&quot;</span>)</span><br><span class="line">        search.execute()</span><br><span class="line">        assertTrue(search.getMatches().isEmpty())</span><br><span class="line">        stream.close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>search.getMatches() 호출에서 반환된 매칭 목록에 대한 구현 세부 사항 5줄을 커스텀 Matcher Class로 구현 (ContainsMatches)</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hamcrest.Description</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.Factory</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.Matcher</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.TypeSafeMatcher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContainsMatches</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> expected: Array&lt;Match&gt;) : TypeSafeMatcher&lt;List&lt;Match&gt;&gt;() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">describeTo</span><span class="params">(description: <span class="type">Description</span>)</span></span> &#123;</span><br><span class="line">        description.appendText(<span class="string">&quot;&lt;<span class="variable">$expected</span>&gt;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">equals</span><span class="params">(expected: <span class="type">Match</span>, <span class="keyword">actual</span>: <span class="type">Match</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expected.searchString == <span class="keyword">actual</span>.searchString &amp;&amp; expected.surroundingContext == <span class="keyword">actual</span>.surroundingContext</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">matchesSafely</span><span class="params">(<span class="keyword">actual</span>: <span class="type">List</span>&lt;<span class="type">Match</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">actual</span>.size != expected.size) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> expected.indices) <span class="keyword">if</span> (!equals(expected[i], <span class="keyword">actual</span>[i])) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="meta">@Factory</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">containsMatches</span><span class="params">(expected: <span class="type">Array</span>&lt;<span class="type">Match</span>&gt;)</span></span>: Matcher&lt;List&lt;Match&gt;&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> ContainsMatches(expected)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-4-테스트-냄새-부적절한-정보"><a href="#11-4-테스트-냄새-부적절한-정보" class="headerlink" title="11.4 테스트 냄새: 부적절한 정보"></a>11.4 테스트 냄새: 부적절한 정보</h2><ul><li>매직 리터럴: 프로그래밍에서 상수로 선언하지 않은 숫자 리터럴을 ‘매직 넘버’라고 하며, 코드에는 되도록 사용하면 안 된다. (<strong>무의식적으로 쓴 코드가 생각난다. 내일 바로 수정해야겠다.</strong>)</li><li>“1”과 Search 생성자에 들어있는 불필요한 URL 값을 같은 상수로 전환</li><li><strong>상수로 표현해 두면 의미를 분명하게 전달할 수 있다.</strong></li></ul><h2 id="11-5-테스트-냄새-부푼-생성"><a href="#11-5-테스트-냄새-부푼-생성" class="headerlink" title="11.5 테스트 냄새: 부푼 생성"></a>11.5 테스트 냄새: 부푼 생성</h2><ul><li>구현 세부 사항 추상화를 위해 InputStream 객체를 생성해주는 도우미 메서드를 만들자</li></ul><h2 id="11-6-테스트-냄새-다수의-단언"><a href="#11-6-테스트-냄새-다수의-단언" class="headerlink" title="11.6 테스트 냄새: 다수의 단언"></a>11.6 테스트 냄새: 다수의 단언</h2><ul><li>search, negative assert를 분리하기</li><li>테스트마다 assert 하나로 만들면 테스트 이름을 깔끔하게 만들기 쉽다.</li></ul><h2 id="11-7-테스트-냄새-테스트와-무관한-세부-사항들"><a href="#11-7-테스트-냄새-테스트와-무관한-세부-사항들" class="headerlink" title="11.7 테스트 냄새: 테스트와 무관한 세부 사항들"></a>11.7 테스트 냄새: 테스트와 무관한 세부 사항들</h2><ul><li>군더더기가 되는 코드들을 @Before, @After로 분리하기</li><li>좋은 테스트는 독자가 테스트를 이해하는 데 다른 함수를 파헤치지 않도록 한다.</li></ul><h2 id="11-8-테스트-냄새-잘못된-조직"><a href="#11-8-테스트-냄새-잘못된-조직" class="headerlink" title="11.8 테스트 냄새: 잘못된 조직"></a>11.8 테스트 냄새: 잘못된 조직</h2><ul><li>테스트에서 어느 부분들이 준비(Arrange), 실행(Act), 단언(Assert) 부분인지 아는 것은 테스트를 빠르게 인지할 수 있게 한다.</li><li>띄어쓰기로 각 영역을 분리해준다.</li></ul><h2 id="11-9-테스트-냄새-암시적-의미"><a href="#11-9-테스트-냄새-암시적-의미" class="headerlink" title="11.9 테스트 냄새: 암시적 의미"></a>11.9 테스트 냄새: 암시적 의미</h2><ul><li>각 테스트가 분명하게 대답해야 할 가장 큰 질문은 “왜 그러한 결과를 기대하는가?” 이다.</li><li>좀 더 나은 테스트 데이터를 골라서 명시적으로 바꿔보자</li></ul><h2 id="11-10-새로운-테스트-추가"><a href="#11-10-새로운-테스트-추가" class="headerlink" title="11.10 새로운 테스트 추가"></a>11.10 새로운 테스트 추가</h2><ul><li>검색할 때 errored() query에 true가 반환되는 테스트를 작성해보자</li><li>반대의 경우도 테스트</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 최종</span></span><br><span class="line"><span class="keyword">import</span> chapter11.util.ContainsMatches.Companion.containsMatches</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.MatcherAssert.assertThat</span><br><span class="line"><span class="keyword">import</span> org.junit.After</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert.*</span><br><span class="line"><span class="keyword">import</span> org.junit.Before</span><br><span class="line"><span class="keyword">import</span> org.junit.Test</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream</span><br><span class="line"><span class="keyword">import</span> java.io.IOException</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException</span><br><span class="line"><span class="keyword">import</span> java.net.URL</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> stream: InputStream</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> A_TITLE = <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">turnOFfLogging</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Search.LOGGER.level = Level.OFF</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="meta">@Throws(IOException::class)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">closeResources</span><span class="params">()</span></span> &#123;</span><br><span class="line">        stream.close()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testSearch</span><span class="params">()</span></span> &#123;</span><br><span class="line">        stream = streamOn(<span class="string">&quot;rest of text here&quot;</span> +</span><br><span class="line">                <span class="string">&quot;1234567890search term1234567890&quot;</span> +</span><br><span class="line">                <span class="string">&quot;more rest of text&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> search = Search(stream, <span class="string">&quot;search term&quot;</span>, A_TITLE)</span><br><span class="line">        search.setSurroundingCharacterCount(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        search.execute()</span><br><span class="line"></span><br><span class="line">        assertThat(search.getMatches(), containsMatches&lt;Match&gt;(arrayOf(</span><br><span class="line">            Match(A_TITLE,</span><br><span class="line">                <span class="string">&quot;search term&quot;</span>,</span><br><span class="line">                <span class="string">&quot;1234567890search term1234567890&quot;</span></span><br><span class="line">            ))))</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">streamOn</span><span class="params">(pageContent: <span class="type">String</span>)</span></span>: InputStream &#123;</span><br><span class="line">        <span class="keyword">return</span> ByteArrayInputStream(pageContent.toByteArray())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">noMatchesReturnedWhenSearchStringNotInContent</span><span class="params">()</span></span> &#123;</span><br><span class="line">        stream = streamOn(<span class="string">&quot;any text&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> search = Search(stream, <span class="string">&quot;text that doesn&#x27;t match&quot;</span>, A_TITLE)</span><br><span class="line"></span><br><span class="line">        search.execute()</span><br><span class="line"></span><br><span class="line">        assertTrue(search.getMatches().isEmpty())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">returnsErroredWhenUnableToReadStream</span><span class="params">()</span></span> &#123;</span><br><span class="line">        stream = createStreamThrowingErrorWhenRead()</span><br><span class="line">        <span class="keyword">val</span> search = Search(stream, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        search.execute()</span><br><span class="line"></span><br><span class="line">        assertTrue(search.errored())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">createStreamThrowingErrorWhenRead</span><span class="params">()</span></span>: InputStream &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">object</span> : InputStream() &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">read</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> IOException()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">erroredReturnsFalseWhenReadSucceeds</span><span class="params">()</span></span> &#123;</span><br><span class="line">        stream = streamOn(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> search = Search(stream, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        search.execute()</span><br><span class="line"></span><br><span class="line">        assertFalse(search.errored())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11-11-마치며"><a href="#11-11-마치며" class="headerlink" title="11.11 마치며"></a>11.11 마치며</h2><ul><li>리팩토링된 테스트는 단순해진다.</li><li>독자는 테스트 이름을 읽고 어떤 케이스인지 이해할 수 있다.</li><li>먼저 테스트의 실행 부분에 집중하여 코드가 무엇을 실행하는지 안다.</li><li><strong>테스트로 시스템을 이해하고자 한다면 테스트를 깔끔하게 유지하는 것이 좋다.</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> JUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
            <tag> test </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 반응형 UI</title>
      <link href="/2022/02/18/flutter/ui/flutter-reactive-ui/"/>
      <url>/2022/02/18/flutter/ui/flutter-reactive-ui/</url>
      
        <content type="html"><![CDATA[<blockquote><p>반응형 UI에 대해서 많은 것을 다루기는 어려울 것 같고, 구현하면서 몇가지 신경써줘야 했던 부분 위주로 소개하겠습니다.</p><p>개발을 하면서 해당 포스트는 여러번 수정이 생길 수도 있을 것 같습니다.</p></blockquote><h3 id="위젯의-크기를-값으로-지정하지-않기"><a href="#위젯의-크기를-값으로-지정하지-않기" class="headerlink" title="위젯의 크기를 값으로 지정하지 않기"></a>위젯의 크기를 값으로 지정하지 않기</h3><ul><li>특정 위젯에 대해서는 고정된 크기의 위젯을 사용해야 할 수도 있겠지만,<br>반응형으로 그리고 싶은 위젯은 width, height 값을 정하기 보다는 Padding 위젯을 이용하는게 좋겠습니다.</li><li>어쩔 수 없이 특정 값을 입력해서 위젯을 그려야겠다면, context 값을 통해 현재 Device의 width, height, devicePixelRatio 값을 얻을 수 있습니다.<ul><li>문서: <a href="https://api.flutter.dev/flutter/widgets/MediaQueryData-class.html">https://api.flutter.dev/flutter/widgets/MediaQueryData-class.html</a></li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MediaQueryData queryData = MediaQuery.of(context);</span><br><span class="line"><span class="built_in">double</span> width = queryData.size.width;</span><br><span class="line"><span class="built_in">double</span> height = queryData.size.height;</span><br><span class="line"><span class="built_in">double</span> devicePixelRatio = queryData.devicePixelRatio;</span><br></pre></td></tr></table></figure><ul><li>개발자에 따라서 UI를 그리는 자기만의 노하우가 있을 것 같습니다.</li><li>저의 경우엔 devicePixelRatio 값을 이용해 이미지가 들어가는 위젯의 크기를 scaling 하기도 했고,<br>화면 회전을 할 때 가로화면과 세로화면을 구분하는 방법도 있었으며,<br>화면 크기의 몇 퍼센트를 값으로 지정할 것인가를 값으로 주고 싶을 때 쓸 수도 있겠습니다.</li><li>폰트 크기를 화면 크기에 따라 조절하기도 했었습니다.</li></ul><h3 id="Flexible"><a href="#Flexible" class="headerlink" title="Flexible"></a>Flexible</h3><ul><li>문서: <a href="https://api.flutter.dev/flutter/widgets/Flexible-class.html">https://api.flutter.dev/flutter/widgets/Flexible-class.html</a></li><li>Row, Column, Flex 위젯과 함께 Flexible 위젯의 flex 필드 값을 이용해 내부에 들어갈 위젯의 크기를 비율로 정할 수 있습니다.</li></ul><h3 id="Expanded"><a href="#Expanded" class="headerlink" title="Expanded"></a>Expanded</h3><ul><li>문서: <a href="https://api.flutter.dev/flutter/widgets/Expanded-class.html">https://api.flutter.dev/flutter/widgets/Expanded-class.html</a></li><li>Row, Column, Flex 위젯에서 화면에 가득차지 않아 남아있는 부분을 늘려줄 수 있습니다.</li><li>flex 필드도 사용이 가능하니 Flexible 위젯을 늘리고 싶을 때 사용하면 되겠습니다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter의 다양한 Widget(2)</title>
      <link href="/2022/02/09/flutter/ui/flutter-ui2/"/>
      <url>/2022/02/09/flutter/ui/flutter-ui2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>자주 사용하는 기본적인 Widget에 대해서만 소개합니다.</p><p>자세한 사용 방법을 제시하기 보다는 이 상황에선 이것을 사용했었다는 정도의 설명입니다.</p></blockquote><ul><li>텍스트 입력&#x2F;표현, 버튼</li><li>위젯 여러 개를 표현하는 방법</li><li>위젯 겹치기</li><li>상자 만들기</li></ul><h2 id="텍스트-입력-x2F-표현-버튼"><a href="#텍스트-입력-x2F-표현-버튼" class="headerlink" title="텍스트 입력&#x2F;표현, 버튼"></a>텍스트 입력&#x2F;표현, 버튼</h2><h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><ul><li>문서: <a href="https://docs.flutter.dev/development/ui/widgets/text">https://docs.flutter.dev/development/ui/widgets/text</a></li><li>문자열을 화면에 보여주는 위젯</li><li>Text 위젯을 꾸미려면 style 필드에 TextStyle 객체를 넣어 원하는 옵션을 추가하면 됩니다.</li><li>main()에서 선언한 MaterialApp 위젯 안에서 textTheme을 설정해놓고 사용하는 것도 가능합니다.</li><li>만약 폰트를 적용하고 싶다면 프로젝트에 폰트 파일을 추가하고 pubspec.yaml에 사용할 폰트파일을 명시해야 합니다. (자세한 사용방법은 pubspec.yaml 사용 방법에서…)</li></ul><h3 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h3><ul><li>문서: <a href="https://api.flutter.dev/flutter/material/TextField-class.html">https://api.flutter.dev/flutter/material/TextField-class.html</a></li><li>문자 입력을 받는 위젯</li><li>controller 필드에 TextEditingController 인스턴스를 넣으면, TextField 안에 입력한 값을 제어할 수 있습니다.</li></ul><h3 id="Buttons"><a href="#Buttons" class="headerlink" title="Buttons"></a>Buttons</h3><ul><li>문서: <a href="https://docs.flutter.dev/release/breaking-changes/buttons">https://docs.flutter.dev/release/breaking-changes/buttons</a></li><li>3가지 종류의 버튼 위젯: TextButton, ElevatedButton, OutlinedButton</li><li>상황에 맞는 버튼을 골라 쓰면 되는데, 만약 버튼 위젯으로 구현이 어렵다 싶은 디자인이면 GestureDetector 위젯을 사용합니다. (자세한 사용방법은 ‘GestureDetector’ 에서…)</li><li>이미지 버튼이 따로 없어서 버튼 위젯 안에다 이미지를 넣게 되면 풀사이즈 이미지 버튼이 나오지 않고 테두리에 버튼 위젯 고유 테두리가 입혀집니다. (만들고 싶으면 위의 방법 사용)</li><li>style 필드에 버튼 디자인을 좀더 자세하게 작성합니다.</li><li>child 필드에 버튼 내용을 위젯으로 작성합니다.</li></ul><h2 id="위젯-여러-개를-표현하는-방식들"><a href="#위젯-여러-개를-표현하는-방식들" class="headerlink" title="위젯 여러 개를 표현하는 방식들"></a>위젯 여러 개를 표현하는 방식들</h2><ul><li>Android LinearLayout과 거의 비슷한 Row, Column 위젯</li><li>ListView, GridView</li><li>복수의 위젯을 포함하는 위젯들은 children 필드 내에 리스트 형태로 지정합니다.</li></ul><h3 id="Row-Column"><a href="#Row-Column" class="headerlink" title="Row, Column"></a>Row, Column</h3><ul><li>Row 문서: <a href="https://api.flutter.dev/flutter/widgets/Row-class.html">https://api.flutter.dev/flutter/widgets/Row-class.html</a></li><li>Column 문서: <a href="https://api.flutter.dev/flutter/widgets/Column-class.html">https://api.flutter.dev/flutter/widgets/Column-class.html</a></li><li>Row는 가로 방향으로, Column은 세로 방향으로 위젯들을 나열합니다.</li><li>mainAxisAlignment, crossAxisAlignment 필드를 통해 여러 개의 위젯들을 상황마다 정렬이 가능합니다.</li></ul><h3 id="ListView-GridView"><a href="#ListView-GridView" class="headerlink" title="ListView, GridView"></a>ListView, GridView</h3><ul><li>ListView 문서: <a href="https://api.flutter.dev/flutter/widgets/ListView-class.html">https://api.flutter.dev/flutter/widgets/ListView-class.html</a></li><li>GridView 문서: <a href="https://api.flutter.dev/flutter/widgets/GridView-class.html">https://api.flutter.dev/flutter/widgets/GridView-class.html</a></li><li>수평이나 수직으로 스크롤이 가능하도록 위젯들을 포함합니다.</li><li>ListView&#x2F;GridView에 담기는 모든 위젯들이 같은 UI 형태를 띄고 있다면 ListView.builder&#x2F;GridView.builder 위젯으로 사용하는 것이 깔끔합니다.</li><li>ListView 내부에 Card 위젯과 ListTile 위젯을 사용해 기본적인 ListView 위젯의 항목들을 그릴 수도 있습니다. (리스트 항목 내에 그려야 할 요구사항이 많아지면 위젯을 직접 그리는 것이 편할 것입니다.)</li></ul><h2 id="위젯-겹치기"><a href="#위젯-겹치기" class="headerlink" title="위젯 겹치기"></a>위젯 겹치기</h2><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><ul><li>Stack 문서: <a href="https://api.flutter.dev/flutter/widgets/Stack-class.html">https://api.flutter.dev/flutter/widgets/Stack-class.html</a></li><li>Stack: 위젯을 독립적인 위치에 고정시키거나 어떤 위젯 위에 겹쳐서 위젯을 보이고 싶을 때 사용합니다.</li><li>원하는 위치에 위젯을 그리기 위해 Align 위젯을 사용해 처음 위치를 지정하고 그리기 시작하면 편리합니다.</li></ul><h3 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h3><ul><li>Padding 문서: <a href="https://api.flutter.dev/flutter/widgets/Padding-class.html">https://api.flutter.dev/flutter/widgets/Padding-class.html</a></li><li>어떤 위젯에 padding을 넣을 때 사용합니다.</li><li>몇몇 위젯의 경우에는 위젯 내에 padding 필드가 존재하기도 합니다.<br>(Container 위젯의 경우는 decoration을 추가했을 때 padding 영역까지 decoration이 적용되면서 Padding 위젯을 직접 사용할 때와 결과가 달라집니다.)</li></ul><h2 id="상자-만들기"><a href="#상자-만들기" class="headerlink" title="상자 만들기"></a>상자 만들기</h2><h3 id="SizedBox"><a href="#SizedBox" class="headerlink" title="SizedBox"></a>SizedBox</h3><ul><li>SizedBox 문서: <a href="https://api.flutter.dev/flutter/widgets/SizedBox-class.html">https://api.flutter.dev/flutter/widgets/SizedBox-class.html</a></li><li>위젯의 크기를 특정 크기로 제한할 때 사용합니다.</li><li>아무것도 표현하지 않는 위젯을 그릴 때는 ‘const SizedBox.shrink()’ 로 보통 사용합니다.</li></ul><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><ul><li>Container 문서: <a href="https://api.flutter.dev/flutter/widgets/Container-class.html">https://api.flutter.dev/flutter/widgets/Container-class.html</a></li><li>위젯의 크기를 특정 크기로 제한하거나, 특정 영역에 사각형, 원 등의 모양을 낼 때 사용합니다.</li><li>Container 위젯을 꾸밀 때는 <strong>color</strong> 필드와 <strong>decoration</strong> 필드 둘 중 <strong>하나만 사용</strong>합니다.</li><li>decoration 필드에 들어갈 객체는 BoxDecoration 클래스입니다. <a href="https://api.flutter.dev/flutter/painting/BoxDecoration-class.html">문서</a></li><li>decoration 값을 통해 사각형과 원 모양을 다양하게 꾸밀 수 있습니다.</li><li>color나 decoration을 사용하지 않은 채 크기만 제한하려면 SizedBox를 사용하는 것이 좋습니다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code 16장 - SerialDate 리팩토링</title>
      <link href="/2022/02/08/clean_code/chapter16/"/>
      <url>/2022/02/08/clean_code/chapter16/</url>
      
        <content type="html"><![CDATA[<ul><li>첫째, 돌려보자</li><li>둘째, 고쳐보자</li><li>결론</li></ul><hr><ul><li>JCommon 라이브러리 중 org.jfree.date 패키지 안에 있는 SerialDate라는 클래스를 살펴보기</li><li>SerialDate가 잘못 짜여진 코드라기 보단 개선하려는 행동이 자연스러운 것이니 받아들여라!!!</li><li>날짜를 표현하는 자바 클래스</li></ul><h3 id="첫째-돌려보자"><a href="#첫째-돌려보자" class="headerlink" title="첫째, 돌려보자"></a>첫째, 돌려보자</h3><ul><li>SerialDateTest라는 클래스는 단위 테스트 케이스를 몇 개 포함한다.</li><li>실패하는 케이스는 없지만 모든 경우를 점검하지 않는다는 사실이 드러난다.</li><li>저자는 SerialDateTest.java에 있는 모든 테스트 케이스가 통과할 수 있게 만들었다.</li><li>아직 SerialDate.java를 고친 것은 아니다.</li><li>Clover라는 Code Coverage 분석 도구를 사용했다고 한다.</li><li>처음엔 185개의 단위 테스트 중 91개만 실행하고 있었고, 이를 전부 테스트하도록 수정한 것 같다.</li><li>SerialDate 클래스를 보면서 빠진 테스트가 없는지까지 확인한 것 같다.</li></ul><h3 id="둘째-고쳐보자"><a href="#둘째-고쳐보자" class="headerlink" title="둘째, 고쳐보자"></a>둘째, 고쳐보자</h3><ul><li>좀더 읽기 쉽고, 애매한 표현들을 고치면서 클린 코드를 만들어내는 과정에 집중하며 리팩토링 과정을 진행하는 과정이 서술되어있음.</li></ul><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>결국 보이스카우트 규칙을 따랐다는 것에 집중함</li><li>테스트 커버리지를 높이고, 버그를 고쳤으며, 코드 크기가 줄었고, 코드가 명확해졌다..고 한다.</li><li>그 다음 사람이 코드를 더 쉽게 개선할 수 있게 되었다며 좋아하는 것 같다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Clean_Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter의 다양한 Widget(1)</title>
      <link href="/2022/02/08/flutter/ui/flutter-ui1/"/>
      <url>/2022/02/08/flutter/ui/flutter-ui1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>자주 사용하는 기본적인 Widget에 대해서만 소개합니다.</p><p>자세한 사용 방법을 제시하기 보다는 이 상황에선 이것을 사용했었다는 정도의 설명입니다.</p></blockquote><ul><li>MaterialApp</li><li>StatefulWidget, StatelessWidget, Scaffold</li></ul><h2 id="MaterialApp"><a href="#MaterialApp" class="headerlink" title="MaterialApp"></a>MaterialApp</h2><ul><li>앱이 시작될 때 무조건 사용하는 위젯</li><li>문서: <a href="https://api.flutter.dev/flutter/material/MaterialApp-class.html">https://api.flutter.dev/flutter/material/MaterialApp-class.html</a></li><li>MaterialApp 위젯을 main()에서 호출하여 처음 앱이 실행될 수 있도록 합니다.</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">    title: <span class="string">&#x27;앱 이름&#x27;</span>,</span><br><span class="line">    initialRoute: <span class="string">&#x27;/&#x27;</span>,  <span class="comment">// 시작할 화면 위젯의 String Path</span></span><br><span class="line">    routes: &#123;</span><br><span class="line">      HomeScreen.routeName: (context) =&gt; HomeScreen(),</span><br><span class="line">      <span class="comment">// &#x27;/&#x27;: (context) =&gt; const HomeScreen(),</span></span><br><span class="line">    &#125;,</span><br><span class="line">    theme: ThemeData(</span><br><span class="line">      <span class="comment">// 다양한 기본 위젯 옵션들을 정의</span></span><br><span class="line">    ),</span><br><span class="line">    home: HomeScreen(), <span class="comment">// initialRoute 대신 클래스 직접 호출하는 방식</span></span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>routes 영역에 API URI 명세하듯이 여러 화면들을 선언해놓고 사용하는 것이 나중을 위해 좋다고 생각합니다. (의존성 주입 관련)</li></ul><h2 id="StatefulWidget-StatelessWidget-Scaffold"><a href="#StatefulWidget-StatelessWidget-Scaffold" class="headerlink" title="StatefulWidget, StatelessWidget, Scaffold"></a>StatefulWidget, StatelessWidget, Scaffold</h2><ul><li><strong>화면을 그릴 때 제일 먼저 사용하는 위젯</strong></li><li>Widget 클래스를 상속하는 추상 클래스 <strong>StatefulWidget</strong>과 <strong>StatelessWidget</strong>이 있습니다. (두 위젯에 대한 비교 내용은 다음 포스팅에서 이어집니다.)</li></ul><h3 id="StatefulWidget"><a href="#StatefulWidget" class="headerlink" title="StatefulWidget"></a>StatefulWidget</h3><ul><li>문서: <a href="https://api.flutter.dev/flutter/widgets/StatefulWidget-class.html">https://api.flutter.dev/flutter/widgets/StatefulWidget-class.html</a></li><li>문서에도 나와있는 대로 동적으로 변하는 UI를 표현하고 싶을 때 구현하기 좋습니다.</li><li>회사 프로젝트에서는 동영상 플레이어와 상태에 따라 변하는 이미지 버튼을 구현하기 위해 사용했습니다.</li><li>IntelliJ에서 제공하는 ‘Flutter Code Template’ 에서는 ‘stful’ 이라고 입력하면 기본 코드 형태가 자동완성이 됩니다.</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TestView 라는 위젯을 만들었을 때 생성된 기본 코드</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>; <span class="comment">// 코드 생성 후에 import 에러가 나면 material로 import 해주세요.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> TestView(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _TestViewState createState() =&gt; _TestViewState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TestViewState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TestView</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>_TestViewState 클래스의 build() 메서드의 리턴 값에서 UI가 그려집니다.</li><li>_TestViewState 클래스 내에 변수를 선언해놓고 상태를 변경하고 싶을 때 아래의 코드를 호출합니다.</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setState(() &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>_TestViewState에서 어떤 위젯과 상호작용을 하면서 TestView 위젯의 UI를 업데이트 할 때 사용됩니다.</li></ul><h3 id="StatelessWidget"><a href="#StatelessWidget" class="headerlink" title="StatelessWidget"></a>StatelessWidget</h3><ul><li>문서: <a href="https://api.flutter.dev/flutter/widgets/StatelessWidget-class.html">https://api.flutter.dev/flutter/widgets/StatelessWidget-class.html</a></li><li>StatefulWidget으로 모든 화면을 구현할 수 있지만 어떤 상호작용으로 인해 UI가 변화하는 위젯이 아닐 때 사용합니다.</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>; <span class="comment">// 코드 생성 후에 import 에러가 나면 material로 import 해주세요.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> TestView(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TestView 클래스에서 전역 변수를 생성하려고 하면 경고가 뜹니다. <a href="https://dart.dev/tools/diagnostic-messages?utm_source=dartdev&utm_medium=redir&utm_id=diagcode&utm_content=must_be_immutable#must_be_immutable">관련링크</a></li><li>StatefulWidget 처럼 UI가 바뀌는 동작에 대한 수행을 할 수도 없습니다.</li><li>Flutter에서 위젯을 다시 빌드하는 동작을 최소화하려고 한다는 내용을 문서에서도 확인할 수 있는데, 이를 위해서라도 꼭 StatefulWidget으로 사용하지 않아도 될 부분이면 StatelessWidget으로 구현하면 되겠습니다.<ul><li>const로 선언 가능한 위젯은 IDE에서 제안해주고 있는것도 위와 같은 이유입니다.</li></ul></li></ul><h3 id="Scaffold"><a href="#Scaffold" class="headerlink" title="Scaffold"></a>Scaffold</h3><ul><li>문서: <a href="https://api.flutter.dev/flutter/material/Scaffold-class.html">https://api.flutter.dev/flutter/material/Scaffold-class.html</a></li><li>앱 화면 하나를 작성할 때 build() 메서드에서 반환할 위젯 중 가장 최상위에 Scaffold 위젯을 사용합니다.</li><li>appBar 필드에서 화면 최상단에 표시할 위젯들을 정의합니다. (굳이 필요 없으면 선언하지 않으면 됩니다.)</li><li>body 필드에서 화면을 표현합니다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code 15장 - JUnit 들여다보기</title>
      <link href="/2022/02/07/clean_code/chapter15/"/>
      <url>/2022/02/07/clean_code/chapter15/</url>
      
        <content type="html"><![CDATA[<ul><li>JUnit 프레임워크</li><li>결론</li></ul><h3 id="JUnit-프레임워크"><a href="#JUnit-프레임워크" class="headerlink" title="JUnit 프레임워크"></a>JUnit 프레임워크</h3><ul><li>JUnit에 대해서는 이미 충분히 알아보았다.</li><li>클린코드에서 몇번의 리팩토링을 거쳐 완성된 ComparisonCompactor.java를 한번 살펴보고 지나가자</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 예제 코드 그대로 입력</span></span><br><span class="line"><span class="keyword">import</span> junit.framework.Assert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComparisonCompactor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ELLIPSIS</span> <span class="operator">=</span> <span class="string">&quot;...&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DELTA_END</span> <span class="operator">=</span> <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DELTA_START</span> <span class="operator">=</span> <span class="string">&quot;[&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> contextLength;</span><br><span class="line">    <span class="keyword">private</span> String expected;</span><br><span class="line">    <span class="keyword">private</span> String actual;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> prefixLength;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> suffixLength;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ComparisonCompactor</span><span class="params">(<span class="type">int</span> contextLength, String expected, String actual)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.contextLength = contextLength;</span><br><span class="line">        <span class="built_in">this</span>.expected = expected;</span><br><span class="line">        <span class="built_in">this</span>.actual = actual;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">formatCompactedComparison</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">compactExpected</span> <span class="operator">=</span> expected;</span><br><span class="line">        <span class="type">String</span> <span class="variable">compactActual</span> <span class="operator">=</span> actual;</span><br><span class="line">        <span class="keyword">if</span> (shouldBeCompacted()) &#123;</span><br><span class="line">            findCommonPrefixAndSuffix();</span><br><span class="line">            compactExpected = compact(expected);</span><br><span class="line">            compactActual = compact(actual);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Assert.format(message, compactExpected, compactActual);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">shouldBeCompacted</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !shouldNotBeCompacted();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">shouldNotBeCompacted</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">expected</span> <span class="operator">=</span>= <span class="literal">null</span> || actual == <span class="literal">null</span> || expected.equals(actual);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">findCommonPrefixAndSuffix</span><span class="params">()</span> &#123;</span><br><span class="line">        findCommonPrefix();</span><br><span class="line">        suffixLength = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; !suffixOverlapsPrefix(); suffixLength++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (charFromEnd(expected, suffixLength) != charFromEnd(actual, suffixLength))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> <span class="title function_">charFromEnd</span><span class="params">(String s, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.charAt(s.length() - i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">suffixOverlapsPrefix</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> actual.length() - suffixLength &lt;= prefixLength ||</span><br><span class="line">                expected.length() - suffixLength &lt;= prefixLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">findCommonPrefix</span><span class="params">()</span> &#123;</span><br><span class="line">        prefixLength = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> Math.min(expected.length(), actual.length());</span><br><span class="line">        <span class="keyword">for</span> (; prefixLength &lt; end; prefixLength++)</span><br><span class="line">            <span class="keyword">if</span> (expected.charAt(prefixLength) != actual.charAt(prefixLength))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">compact</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>()</span><br><span class="line">                .append(startingEllipsis())</span><br><span class="line">                .append(startingContext())</span><br><span class="line">                .append(DELTA_START)</span><br><span class="line">                .append(delta(s))</span><br><span class="line">                .append(DELTA_END)</span><br><span class="line">                .append(endingContext())</span><br><span class="line">                .append(endingEllipsis())</span><br><span class="line">                .toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">startingEllipsis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> prefixLength &gt; contextLength ? ELLIPSIS : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">startingContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">contextStart</span> <span class="operator">=</span> Math.max(<span class="number">0</span>, prefixLength - contextLength);</span><br><span class="line">        <span class="type">int</span> <span class="variable">contextEnd</span> <span class="operator">=</span> prefixLength;</span><br><span class="line">        <span class="keyword">return</span> expected.substring(contextStart, contextEnd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">delta</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">deltaStart</span> <span class="operator">=</span> prefixLength;</span><br><span class="line">        <span class="type">int</span> <span class="variable">deltaEnd</span> <span class="operator">=</span> s.length() - suffixLength;</span><br><span class="line">        <span class="keyword">return</span> s.substring(deltaStart, deltaEnd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">endingContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">contextStart</span> <span class="operator">=</span> expected.length() - suffixLength;</span><br><span class="line">        <span class="type">int</span> <span class="variable">contextEnd</span> <span class="operator">=</span> Math.min(contextStart + contextLength, expected.length());</span><br><span class="line">        <span class="keyword">return</span> expected.substring(contextStart, contextEnd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">endingEllipsis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (suffixLength &gt; contextLength ? ELLIPSIS : <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>클린코드에서 보이스카우트 규칙을 얘기하니 나도 좀 더 고쳐야겠다.</li></ul><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>JUnit을 잘못 만들었다는게 아니다.</li><li>세상에 개선이 불필요한 모듈은 없다.</li><li>코드를 처음보다 조금 더 깨끗하게 만드는 책임은 우리 모두에게 있다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Clean_Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템22. 인터페이스는 타입을 정의하는 용도로만 사용하라</title>
      <link href="/2022/02/06/effective_java/2022-02-06-item22/"/>
      <url>/2022/02/06/effective_java/2022-02-06-item22/</url>
      
        <content type="html"><![CDATA[<ul><li>인터페이스는 자신을 구현한 클래스의 인스턴스를 참조할 수 있는 타입 역할을 한다.</li><li><strong>오직 이 용도로만 사용해야 한다.</strong></li></ul><h3 id="상수-인터페이스"><a href="#상수-인터페이스" class="headerlink" title="상수 인터페이스"></a>상수 인터페이스</h3><ul><li>이 지침에 맞지 않는 ‘상수 인터페이스’라는 것이 있다.<ul><li>메서드 없이, 상수를 뜻하는 static final 필드로만 가득 찬 인터페이스를 말한다.</li><li>이 상수들을 사용하려는 클래스에서 정규화된 이름을 쓰는 걸 피하고자 그 인터페이스를 구현하곤 한다. (우웩)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IntelliJ는 &#x27;static final&#x27; 빼도 좋다는 경고가 뜨고 있다. (이미 인터페이스 안에 있는 변수니깐)</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PhysicalConstants</span> &#123;</span><br><span class="line">    <span class="comment">// 아보가르드 수</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">AVOGADROS_NUMBER</span> <span class="operator">=</span> <span class="number">6.022_140_857e23</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 볼츠만 상수</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">BOLTZMANN_CONSTANT</span> <span class="operator">=</span> <span class="number">1.380_648_52e-23</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 전자 질량</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">ELECTRON_MASS</span> <span class="operator">=</span> <span class="number">9.109_383_56e-31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>상수 인터페이스 안티패턴은 인터페이스를 잘못 사용한 예다.</strong></li><li>클래스 내부에서 사용하는 상수는 이미 외부 인터페이스가 아니라 내부 구현에 해당한다.</li><li>final이 아닌 클래스가 상수 인터페이스를 구현한다면 모든 하위 클래스의 이름 공간이 그 인터페이스가 정의한 상수들로 오염되어 버린다.</li></ul><h3 id="상수-인터페이스-쓰지-않기"><a href="#상수-인터페이스-쓰지-않기" class="headerlink" title="상수 인터페이스 쓰지 않기"></a>상수 인터페이스 쓰지 않기</h3><ol><li>enum 타입으로 나타내기 적합한 상수라면 enum 타입으로 만들어 공개하면 된다. [<em>아이템34</em>]</li><li>인스턴스화할 수 없는 유틸리티 클래스에 담아 공개하자. [<em>아이템4</em>]</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhysicalConstants</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">PhysicalConstants</span><span class="params">()</span> &#123;&#125;  <span class="comment">// 인스턴스화 방지</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 아보가르드 수</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">AVOGADROS_NUMBER</span> <span class="operator">=</span> <span class="number">6.022_140_857e23</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 볼츠만 상수</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">BOLTZMANN_CONSTANT</span> <span class="operator">=</span> <span class="number">1.380_648_52e-23</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 전자 질량</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">ELECTRON_MASS</span> <span class="operator">=</span> <span class="number">9.109_383_56e-31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="핵심-정리"><a href="#핵심-정리" class="headerlink" title="핵심 정리"></a>핵심 정리</h3><ul><li>인터페이스는 타입을 정의하는 용도로만 사용해야 한다. 상수 공개용 수단으로 사용하지 말자.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10. 목 객체 사용</title>
      <link href="/2022/02/05/junit/junit_10/"/>
      <url>/2022/02/05/junit/junit_10/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://github.com/boring-km/JunitPractice">https://github.com/boring-km/JunitPractice</a></li><li></li><li>테스트 도전 과제</li><li>번거로운 동작을 스텁으로 대체</li><li>테스트를 지원하기 위한 설계 변경</li><li>스텁에 지능 더하기: 인자 검증</li><li>목 도구를 사용하여 테스트 단순화</li><li>마지막 하나의 단순화: 주입 도구 소개</li><li>목을 올바르게 사용할 때 중요한 것</li><li>마치며</li></ul><h2 id="10-1-테스트-도전-과제"><a href="#10-1-테스트-도전-과제" class="headerlink" title="10.1 테스트 도전 과제"></a>10.1 테스트 도전 과제</h2><ul><li>주소를 입력하는 대신 사용자는 지도에서 Profile 주소를 나타내는 지점을 선택할 수 있다.</li><li>애플리케이션은 선택된 지점의 위도와 경도 좌표를 AddressRetriever 클래스의 retrieve() 메서드로 넘긴다.</li><li>chapter10 패키지 참조</li><li>HTTP 호출을 실행하기 때문에 생기는 2가지 시사점<ul><li>실제 호출에 대한 테스트는 나머지 대다수의 빠른 테스트들에 비해 속도가 느릴 것이다.</li><li>Nominatim HTTP API가 항상 가용한지 보장할 수 없다. 통제 밖에 있다.</li></ul></li><li>API의 테스트 버전이라면 가용성 부분을 통제할 수 있겠지만 여전히 느리다.</li><li>의존성 있는 다른 코드와 분리하여 retrieve() 메서드의 로직에 관한 단위 테스트를 하자</li></ul><h2 id="10-2-번거로운-동작을-스텁-stub-으로-대체"><a href="#10-2-번거로운-동작을-스텁-stub-으로-대체" class="headerlink" title="10.2 번거로운 동작을 스텁(stub)으로 대체"></a>10.2 번거로운 동작을 스텁(stub)으로 대체</h2><ul><li>먼저 HTTP 호출에서 반환되는 JSON 응답을 이용해 Address 객체를 생성하는 로직을 검증하는 데 집중하자</li><li>stub: 테스트 용도로 하드 코딩한 값을 반환하는 구현체</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chapter10.AddressRetriever</span><br><span class="line"><span class="keyword">import</span> chapter10.util.Http</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.CoreMatchers.equalTo</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.MatcherAssert.assertThat</span><br><span class="line"><span class="keyword">import</span> org.junit.Test</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddressRetrieverTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">answersAppropriateAddressForValidCoordinates</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> http: Http = <span class="keyword">object</span> : Http &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">(url: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;address\&quot;: &#123;&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\&quot;house_number\&quot;:\&quot;324\&quot;,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\&quot;road\&quot;:\&quot;North Tejon Street\&quot;,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\&quot;city\&quot;: \&quot;Colorado Springs\&quot;,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\&quot;state\&quot;: \&quot;Colorado\&quot;,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\&quot;postcode\&quot;: \&quot;80903\&quot;,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\&quot;country_code\&quot;: \&quot;us\&quot;&#125;&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> retriever = AddressRetriever(http)</span><br><span class="line">        <span class="keyword">val</span> address = retriever.retrieve(<span class="number">38.0</span>, -<span class="number">104.0</span>)</span><br><span class="line"></span><br><span class="line">        assertThat(address.houseNumber, equalTo(<span class="string">&quot;324&quot;</span>))</span><br><span class="line">        assertThat(address.road, equalTo(<span class="string">&quot;North Tejon Street&quot;</span>))</span><br><span class="line">        assertThat(address.city, equalTo(<span class="string">&quot;Colorado Springs&quot;</span>))</span><br><span class="line">        assertThat(address.state, equalTo(<span class="string">&quot;Colorado&quot;</span>))</span><br><span class="line">        assertThat(address.zip, equalTo(<span class="string">&quot;80903&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Http의 stub 인스턴스 생성한다.<ul><li>스텁은 get(url: String) 단일 메서드가 있으며 하드 코딩된 JSON 문자열을 반환한다.</li></ul></li><li>테스트는 AddressRetriever 객체를 생성하고 생성자에 스텁을 전달한다.</li><li>AddressRetriever 객체는 스텁을 저장한다.</li><li>실행될 때 retrieve() 메서드는 먼저 넘어온 파라미터의 포맷을 정한다.<br>그다음 스텁이 저장된 http 필드에 get() 메서드를 호출한다.<br>retrieve() 메서드는 http 필드가 스텁을 참조하는지 프로덕션 구현을 참조하는지 관여하지 않는다.<br>메서드가 아는 것은 get() 메서드를 구현한 객체와 상호 작용하고 있다는 점이다.</li><li>스텁은 테스트에 하드 코딩된 JSON 문자열을 당연히 반환하겠지!!</li><li>나머지 retrieve() 메서드는 하드 코딩된 JSON 문자열을 파싱하고 그에 따라 Address 객체를 구성한다.</li><li>테스트는 반환된 Address 객체의 요소를 검증한다.</li></ul><h2 id="10-3-테스트를-지원하기-위한-설계-변경"><a href="#10-3-테스트를-지원하기-위한-설계-변경" class="headerlink" title="10.3 테스트를 지원하기 위한 설계 변경"></a>10.3 테스트를 지원하기 위한 설계 변경</h2><ul><li>이전에 Http 인스턴스는 retrieve() 메서드에서 생성되어 AddressRetriever 클래스의 세부 사항이었다.</li><li>이제 AddressRetriever 클래스와 상호 작용하는 어떤 클라이언트는 다음과 같이 적절한 Http 인스턴스를 생성하여 넘겨주어야 한다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> retriever = AddressRetriever(HttpImpl())</span><br></pre></td></tr></table></figure><ul><li><strong>간단한 방법으로 시스템이 기대하는 방식으로 동작함을 보여 주는 것이 가장 중요하다.</strong></li><li>생성자 주입 말고도 다른 많은 방법으로 stub을 주입할 수 있다.</li><li>setter, factory method override, abstract factory 등을 사용하거나 프레임워크 사용</li></ul><h2 id="10-4-스텁에-지능-더하기-인자-검증"><a href="#10-4-스텁에-지능-더하기-인자-검증" class="headerlink" title="10.4 스텁에 지능 더하기: 인자 검증"></a>10.4 스텁에 지능 더하기: 인자 검증</h2><ul><li>retrieve() 메서드의 코드가 올바르게 HttpImpl 코드와 상호 작용하는지 검증해보자</li><li>stub에 Http 클래스의 get() 메서드에 전달되는 URL을 검증하는 보호절을 추가</li><li>기대하는 인자 문자열을 포함하지 않으면 그 시점에 명시적으로 테스트를 실패 처리한다.</li><li>일부러 문자열 하나 빼놓고 테스트</li><li><strong>목은 의도적으로 흉내 낸 동작을 제공하고 수신한 인자가 모두 정상인지 여부를 검증하는 일을 하는 테스트 구조물이다.</strong></li></ul><h2 id="10-5-목-도구를-사용하여-테스트-단순화"><a href="#10-5-목-도구를-사용하여-테스트-단순화" class="headerlink" title="10.5 목 도구를 사용하여 테스트 단순화"></a>10.5 목 도구를 사용하여 테스트 단순화</h2><ul><li><p>stub을 Mock으로 바꿔보자</p><ul><li>테스트에 어떤 인자를 기대하는지 명시하기</li><li>get() 메서드에 넘겨진 인자들을 잡아서 저장하기</li><li>get() 메서드에 저장된 인자들이 기대하는 인자들인지 테스트가 완료될 때 검증하는 능력 지원하기</li></ul></li><li><p>Mockito 사용해보자</p></li><li><p>테스트의 기대 사항 설정은 실제 테스트보다 먼저 해야 한다.</p></li><li><p>when(…).thenReturn(…)의 대안으로 처리 과정에서 어떤 메서드가 호출되었는지 검증하는 verify()도 있다.</p></li></ul><h2 id="10-6-마지막-하나의-단순화-주입-도구-소개"><a href="#10-6-마지막-하나의-단순화-주입-도구-소개" class="headerlink" title="10.6 마지막 하나의 단순화: 주입 도구 소개"></a>10.6 마지막 하나의 단순화: 주입 도구 소개</h2><ul><li>mockito DI 기능 사용하기</li></ul><ol><li>@Mock 사용하여 Mock 인스턴스 생성하기</li><li>@InjectMocks을 붙인 대상 인스턴스 변수를 선언한다.</li><li>대상 인스턴스를 인스턴스화 한 후에 MockitoAnnotations.initMocks(this) 호출하기</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chapter10.AddressRetriever</span><br><span class="line"><span class="keyword">import</span> chapter10.util.Http</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.CoreMatchers.equalTo</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.MatcherAssert.assertThat</span><br><span class="line"><span class="keyword">import</span> org.junit.Before</span><br><span class="line"><span class="keyword">import</span> org.junit.Test</span><br><span class="line"><span class="keyword">import</span> org.mockito.InjectMocks</span><br><span class="line"><span class="keyword">import</span> org.mockito.Mock</span><br><span class="line"><span class="keyword">import</span> org.mockito.Mockito.*</span><br><span class="line"><span class="keyword">import</span> org.mockito.MockitoAnnotations</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddressRetrieverTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span> <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> http: Http</span><br><span class="line">    <span class="meta">@InjectMocks</span> <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> retriever: AddressRetriever</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">createRetriever</span><span class="params">()</span></span> &#123;</span><br><span class="line">        retriever = AddressRetriever()</span><br><span class="line">        MockitoAnnotations.openMocks(<span class="keyword">this</span>)  <span class="comment">// 교재 코드에서는 initMocks(this)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">answersAppropriateAddressForValidCoordinates</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 테스트의 기대 사항들을 설정</span></span><br><span class="line">        `<span class="keyword">when</span>`(http.<span class="keyword">get</span>(contains(<span class="string">&quot;lat=38.000000&amp;lon=-104.000000&quot;</span>)))</span><br><span class="line">            .thenReturn(    <span class="comment">// 기대 사항이 충족되었을 때 처리</span></span><br><span class="line">            <span class="string">&quot;&#123;\&quot;address\&quot;: &#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;\&quot;house_number\&quot;:\&quot;324\&quot;,&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;\&quot;road\&quot;:\&quot;North Tejon Street\&quot;,&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;\&quot;city\&quot;: \&quot;Colorado Springs\&quot;,&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;\&quot;state\&quot;: \&quot;Colorado\&quot;,&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;\&quot;postcode\&quot;: \&quot;80903\&quot;,&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;\&quot;country_code\&quot;: \&quot;us\&quot;&#125;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> address = retriever.retrieve(<span class="number">38.0</span>, -<span class="number">104.0</span>)</span><br><span class="line"></span><br><span class="line">        assertThat(address.houseNumber, equalTo(<span class="string">&quot;324&quot;</span>))</span><br><span class="line">        assertThat(address.road, equalTo(<span class="string">&quot;North Tejon Street&quot;</span>))</span><br><span class="line">        assertThat(address.city, equalTo(<span class="string">&quot;Colorado Springs&quot;</span>))</span><br><span class="line">        assertThat(address.state, equalTo(<span class="string">&quot;Colorado&quot;</span>))</span><br><span class="line">        assertThat(address.zip, equalTo(<span class="string">&quot;80903&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Http와 retriever 인스턴스를 DI를 통해 얻었다.</li><li>더이상 생성자에 파라미터도 없게 되었다.</li></ul><h2 id="10-7-목을-올바르게-사용할-때-중요한-것"><a href="#10-7-목을-올바르게-사용할-때-중요한-것" class="headerlink" title="10.7 목을 올바르게 사용할 때 중요한 것"></a>10.7 목을 올바르게 사용할 때 중요한 것</h2><ul><li>mock을 사용한 테스트는 진행하길 원하는 내용을 분명하게 기술해야 한다.</li><li><strong>연관성</strong></li><li>테스트를 보는 사람이 코드를 깊게 파지 않아도 이러한 연관성을 쉽게 파악할 수 있도록 코드는 더 좋아진다. -&gt; 결국 클린코드</li><li>mock이 실제 동작을 대신한다는 것을 잊지 말라<ul><li>mock이 프로덕션 코드의 동작을 올바르게 묘사하고 있는가?</li><li>프로덕션 코드는 생각하지 못한 다른 형식으로 반환하는가?</li><li>프로덕션 코드는 예외를 던지는가? null을 반환하는가?</li></ul></li><li>프로덕션 코드를 직접 테스트하고 있지 않다는 걸 기억하자</li></ul><h2 id="10-8-마치며"><a href="#10-8-마치며" class="headerlink" title="10.8 마치며"></a>10.8 마치며</h2><ul><li><strong>테스트는 라이브 서비스, 파일, 데이터베이스, 다른 번거로운 의존성들과 상호 작용할 필요가 없다!</strong></li><li>적절한 도구를 활용해 목을 생성하고 주입하는 노력을 최소화할 수도 있다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> JUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
            <tag> test </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9. 더 큰 설계 문제</title>
      <link href="/2022/02/02/junit/junit_09/"/>
      <url>/2022/02/02/junit/junit_09/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://github.com/boring-km/JunitPractice">https://github.com/boring-km/JunitPractice</a></li><li>Profile 클래스와 SRP</li><li>새로운 클래스 추출</li><li>명령-질의 분리</li><li>단위 테스트의 유지 보수 비용</li><li>다른 설계에 관한 생각들</li><li>마치며</li></ul><h2 id="9-1-Profile-클래스와-SRP"><a href="#9-1-Profile-클래스와-SRP" class="headerlink" title="9.1 Profile 클래스와 SRP"></a>9.1 Profile 클래스와 SRP</h2><ul><li>[책임1] Profile 클래스는 회사 혹은 인물 정보를 추적하고 관리한다.</li><li>Profile 클래스가 포착하는 이러한 정보 집합들은 시간이 지나면서 많이 바뀔 수 있다.<ul><li>더 많은 정보가 추가되거나 몇 가지 정보는 제거 혹은 변경될 수 있다.</li></ul></li><li>[책임2] 조건의 집합이 프로파일과 매칭되는지 여부 혹은 그 정도를 알려 주는 점수를 계산하는 것이다.</li><li><strong>SRP 위반!</strong> : 클래스는 변경할 때 한 가지 이유만 있어야 한다. 클래스는 작고 단일 목적을 추구한다.</li></ul><h2 id="9-2-새로운-클래스-추출"><a href="#9-2-새로운-클래스-추출" class="headerlink" title="9.2 새로운 클래스 추출"></a>9.2 새로운 클래스 추출</h2><ul><li><p>책임 두 개를 정의하고 있는 Profile</p><ol><li>프로파일에 관한 정보 추적하기</li><li>조건 집합이 프로파일에 매칭되는지 혹은 그 정도를 판단하기</li></ol></li><li><p>매칭 책임(2번)에 관한 코드를 MatchSet 클래스로 추출해보기</p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 프로파일에 관한 정보를 추적하는 Profile 클래스</span></span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> answers = HashMap&lt;String, Answer&gt;()</span><br><span class="line">  <span class="keyword">var</span> score: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 회사에게 받은 질문에 대한 답변을 저장</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(answer: <span class="type">Answer</span>)</span></span> &#123;</span><br><span class="line">    answers[answer.questionText] = answer</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">matches</span><span class="params">(criteria: <span class="type">Criteria</span>)</span></span> : <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> matchSet = MatchSet(answers, criteria)</span><br><span class="line">    score = matchSet.score</span><br><span class="line">    <span class="keyword">return</span> matchSet.matches()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">find</span><span class="params">(pred: <span class="type">Predicate</span>&lt;<span class="type">Answer</span>&gt;)</span></span> : List&lt;Answer&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> answers.values.stream()</span><br><span class="line">      .filter(pred)</span><br><span class="line">      .collect(Collectors.toList())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 매칭에 대한 책임을 담당하는 MatchSet 클래스</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MatchSet</span></span>(<span class="keyword">private</span> <span class="keyword">var</span> answers: HashMap&lt;String, Answer&gt;, <span class="keyword">private</span> <span class="keyword">var</span> criteria: Criteria) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> score = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span> &#123;</span><br><span class="line">    calculateScore(criteria)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">calculateScore</span><span class="params">(criteria: <span class="type">Criteria</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (criterion: Criterion <span class="keyword">in</span> criteria) &#123;</span><br><span class="line">      <span class="keyword">if</span> (criterion.matches(answerMatching(criterion)))</span><br><span class="line">        score += criterion.weight.value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">answerMatching</span><span class="params">(criterion: <span class="type">Criterion</span>)</span></span> = answers[criterion.answer.questionText]</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">matches</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (doesNotMeetAnyMustMatchCriterion(criteria)) <span class="comment">// 특정 조건에 걸리면 false</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> anyMatches(criteria) <span class="comment">// 조건이 맞는 다른 경우를 찾기</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">doesNotMeetAnyMustMatchCriterion</span><span class="params">(criteria: <span class="type">Criteria</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (criterion: Criterion <span class="keyword">in</span> criteria) &#123;</span><br><span class="line">      <span class="keyword">val</span> match = criterion.matches(answerMatching(criterion))</span><br><span class="line">      <span class="keyword">if</span> (!match &amp;&amp; criterion.weight == Weight.MustMatch) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">anyMatches</span><span class="params">(criteria: <span class="type">Criteria</span>)</span></span> : <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> anyMatches = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> (criterion: Criterion <span class="keyword">in</span> criteria) &#123;</span><br><span class="line">      anyMatches = anyMatches or criterion.matches(answerMatching(criterion))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> anyMatches</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-3-명령-질의-분리"><a href="#9-3-명령-질의-분리" class="headerlink" title="9.3 명령-질의 분리"></a>9.3 명령-질의 분리</h2><ul><li>어떤 값을 반환하고 부작용을 발생시키는 (시스템에 있는 어떤 클래스 혹은 엔터티의 상태 변경) 메서드는 명령-질의 분리 원칙을 위반한다.</li><li>어떤 메서드는 실행(부작용을 생성하는 어떤 작업을 함) 하거나 질의에 대답(어떤 값을 반환)할 수 있으며, 두 작업을 모두 하면 안 된다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 문제의 명령-질의 분리 원칙을 위배한 부분</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">matches</span><span class="params">(criteria: <span class="type">Criteria</span>)</span></span> : <span class="built_in">Boolean</span> &#123;</span><br><span class="line">  <span class="keyword">val</span> matchSet = MatchSet(answers, criteria)</span><br><span class="line">  score = matchSet.score</span><br><span class="line">  <span class="keyword">return</span> matchSet.matches()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>score 필드를 Profile에서 제거</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Predicate</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> answers = HashMap&lt;String, Answer&gt;()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 회사에게 받은 질문에 대한 답변을 저장</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(answer: <span class="type">Answer</span>)</span></span> &#123;</span><br><span class="line">        answers[answer.questionText] = answer</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getMatchSet</span><span class="params">(criteria: <span class="type">Criteria</span>)</span></span> : MatchSet &#123;    <span class="comment">// MatchSet을 반환하도록 수정 -&gt; score로 쓰고 있던 코드에 영향이 발생!</span></span><br><span class="line">        <span class="keyword">return</span> MatchSet(answers, criteria)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">find</span><span class="params">(pred: <span class="type">Predicate</span>&lt;<span class="type">Answer</span>&gt;)</span></span> : List&lt;Answer&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> answers.values.stream()</span><br><span class="line">            .filter(pred)</span><br><span class="line">            .collect(Collectors.toList())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-4-단위-테스트의-유지-보수-비용"><a href="#9-4-단위-테스트의-유지-보수-비용" class="headerlink" title="9.4 단위 테스트의 유지 보수 비용"></a>9.4 단위 테스트의 유지 보수 비용</h2><ul><li>리팩토링은 코드 동작을 변경하지 않고 코드 구현을 바꾸는 활동이며 테스트는 그 동작을 반영한다.<ul><li>하지만 현실에서는 클래스 동작을 변경하고 있다.</li></ul></li><li>보통은 돌아오는 가치가 훨씬 크기 때문에 깨진 테스트 코드를 고치는 비용을 받아들인다.<ol><li>결함이 거의 없는 코드를 갖는 이점</li><li>다른 코드가 깨질 것을 걱정하지 않으면서도 코드를 변경할 수 있는 이점</li><li>코드가 정확히 어떻게 동작하는지 알 수 있는 이점</li></ol></li><li><strong>좀 더 나아가서 실패하는 테스트의 정도를 부정적인 설계 지표로 인식하는 것도 생각해보자.</strong></li><li><strong>더 많은 테스트가 동시에 깨질수록 더욱더 많은 설계 문제가 있을 것이다.</strong></li></ul><h3 id="9-4-1-자신을-보호하는-방법"><a href="#9-4-1-자신을-보호하는-방법" class="headerlink" title="9.4.1 자신을 보호하는 방법"></a>9.4.1 자신을 보호하는 방법</h3><ul><li>코드 중복은 가장 큰 설계 문제이다.</li><li>코드 중복의 2가지 문제점<ol><li>테스트를 따르기가 어려워진다.</li><li>작은 코드 조각들을 단일 메서드로 추출하면 그 코드 조각들을 젼경해야 할 때 미치는 영향을 최소화할 수 있다.</li></ol></li><li>단위 테스트를 설정하는 데 코드가 몇 줄 혹은 수십 줄 필요하다면 그것은 시스템 설계에 문제가 있다는 것이다.<ul><li>SRP 지켜라</li></ul></li><li><strong>private 메서드를 테스트하려는 충동은 클래스가 필요 이상으로 커졌다는 또 다른 힌트이다.</strong></li><li>단위 테스트가 어려워 보인다면 그것도 좋은 힌트다.<ul><li>설계를 개선하여 단위 테스트를 쉽게 만들자</li><li>그러면 단위 테스트를 유지하는 비용을 줄일 수 있을 것이다.</li></ul></li></ul><h3 id="9-4-2-깨진-테스트-고치기"><a href="#9-4-2-깨진-테스트-고치기" class="headerlink" title="9.4.2 깨진 테스트 고치기"></a>9.4.2 깨진 테스트 고치기</h3><ul><li>직접 해보는 걸로 대신함</li></ul><h2 id="9-5-다른-설계에-관한-생각들"><a href="#9-5-다른-설계에-관한-생각들" class="headerlink" title="9.5 다른 설계에 관한 생각들"></a>9.5 다른 설계에 관한 생각들</h2><ul><li>Profile 클래스에서 질문 내용을 키로 사용하는 HashMap&lt;String, Answer&gt; 객체를 생성하고 있다.</li><li>하지만 동시에 answers 맵 참조를 새로 생성되는 MatchSet 객체로 넘긴다.<ul><li><strong>두 클래스가 어떻게 답변을 탐색하고 점수를 구하는지에 대한 정보를 너무 많이 가지고 있다는 의미!</strong></li><li>여러 클래스에 구현 상태가 흩어져 있을 때의 코드 냄새를 기능의 산재라고 한다.</li><li>answers 맵을 데이터베이스 테이블로 교체한다면 결국 여러 군데를 고쳐야 하기 때문이다.</li></ul></li><li>답변 저장소를 AnswerCollection 클래스로 분리</li><li>변경된 git 코드 참조</li></ul><h2 id="9-6-마치며"><a href="#9-6-마치며" class="headerlink" title="9.6 마치며"></a>9.6 마치며</h2><ul><li><strong>설계를 지속적으로 개선해 나가는 자신감을 키우기 위해 단위 테스트의 커버리지를 높이세요</strong></li><li>기꺼이 새롭고 작은 클래스들과 메서드들을 만들라!</li><li>실무에서 코드가 여러 서비스와 상호작용하기에 항상 단위 테스트를 만드는 것이 쉽지만은 않다.</li><li>Mock 객체를 도입해보자!</li></ul>]]></content>
      
      
      <categories>
          
          <category> JUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
            <tag> test </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템21. 인터페이스는 구현하는 쪽을 생각해 설계하라</title>
      <link href="/2022/01/27/effective_java/2022-01-27-item21/"/>
      <url>/2022/01/27/effective_java/2022-01-27-item21/</url>
      
        <content type="html"><![CDATA[<ul><li>디폴트 메서드에 대한 이야기…</li><li><strong>생각할 수 있는 모든 상황에서 불변식을 해치지 않는 디폴트 메서드를 작성하기란 어려운 법이다.</strong></li></ul><h3 id="Collection-인터페이스에-있는-removeIf-메서드-예시"><a href="#Collection-인터페이스에-있는-removeIf-메서드-예시" class="headerlink" title="Collection 인터페이스에 있는 removeIf 메서드 예시"></a>Collection 인터페이스에 있는 removeIf 메서드 예시</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Sample</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeIf</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> E&gt; filter)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(filter);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;E&gt; it = iterator(); it.hasNext(); ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (filter.test(it.next())) &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">                result = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>predicate 함수가 true를 반환하는 모든 원소를 제거하는 메서드</li><li>SynchronizedCollection 클래스는 클라이언트가 제공한 객체로 락을 거는 능력이 제공되는데<br>removeIf를 자바8과 사용한다면 모든 메서드 호출을 알아서 동기화해주지 못하게 된다.</li><li>removeIf의 구현은 동기화에 관해 아무것도 모르기에 락 객체를 사용할 수 없다.</li><li>따라서 SynchronizedCollection 인스턴스를 여러 스레드가 공유하는 환경에서 한 스레드가 removeIf를 호출하면 예외발생할 것임.</li></ul><h3 id="예방책"><a href="#예방책" class="headerlink" title="예방책?"></a>예방책?</h3><ul><li>자바 플랫폼 라이브러리에서 이런 문제를 예방하기 위한 조치</li><li>구현한 인터페이스의 디폴트 메서드를 재정의하고, 다른 메서드에서는 디폴트 메서드를 호출하기 전에 필요한 작업을 수행하도록 했다.</li><li>하지만 자바 플랫폼에 속하지 않은 제3의 기존 컬렉션 구현체들은 이런 변화에 맞춰 수정될 기회가 없어서 수정이 안 된 것도 있다 한다.</li></ul><h3 id="디폴트-메서드"><a href="#디폴트-메서드" class="headerlink" title="디폴트 메서드"></a>디폴트 메서드</h3><ul><li><strong>디폴트 메서드는 컴파일에 성공해도 기존 구현체에 런타임 오류를 일으킬 수 있다.</strong></li><li>꼭 필요한 경우가 아니면 피하자</li><li>디폴트 메서드라는 도구가 생겼더라도 <strong>인터페이스를 설계할 때는 여전히 세심한 주의를 기울여야 한다.</strong></li><li>새로운 인터페이스라면 릴리스 전에 반드시 테스트를 거쳐야 한다.</li><li><strong>인터페이스를 배포한 후라도 결함을 수정하는게 가능한 경우도 있겠지만, 절대 그 가능성에 기대서는 안 된다.</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code 14장 - 점진적인 개선</title>
      <link href="/2022/01/26/clean_code/chapter14/"/>
      <url>/2022/01/26/clean_code/chapter14/</url>
      
        <content type="html"><![CDATA[<ul><li>(소개)</li><li>Args 구현</li><li>Args 1차 초안</li><li>String 인수</li><li>결론</li></ul><h3 id="소개"><a href="#소개" class="headerlink" title="(소개)"></a>(소개)</h3><ul><li>춞발은 좋았으나 확장성이 부족했던 모듈 소개</li><li>개선하고 정리하는 단계를 거쳐보자</li><li>명령행 인수의 구문을 분석하는 새로운 유틸리티 <em>Args</em></li></ul><h4 id="간단한-예시"><a href="#간단한-예시" class="headerlink" title="간단한 예시"></a>간단한 예시</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Args</span> <span class="variable">arg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Args</span>(<span class="string">&quot;l,p#,d*&quot;</span>, args);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">logging</span> <span class="operator">=</span> arg.getBoolean(<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> arg.getInt(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">directory</span> <span class="operator">=</span> arg.getString(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">        executeApplication(logging, port, directory);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ArgsException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Argument error: %s\n&quot;</span>, e.errorMessage());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>l은 부울 인수, p는 정수 인수, d는 문자열 인수</li><li>생성자에서 ArgsException이 발생하지 않는다면 명령행 인수의 구문을 성공적으로 분석했으며 Args 인스턴스에 질의를 던져도 좋다는 말이다.</li><li>인수 값을 가져오려면 getBoolean, getInteger, getString 등과 같은 메서드를 사용한다.</li><li>형식 문자열이나 명령행 인수 자체에 문제가 있다면 ArgsException이 발생한다.</li><li>구체적인 오류를 알아내려면 예외가 제공하는 errorMessage 메서드를 사용한다.</li></ul><h2 id="Args-구현"><a href="#Args-구현" class="headerlink" title="Args 구현"></a>Args 구현</h2><ul><li>chapter14 package</li><li>깨끗한 코드를 짜려면 먼저 지저분한 코드를 짠 <strong>뒤에 정리해야 한다</strong>는 의미다.</li><li>먼저 1차 초안을 쓰고, 그 초안을 고쳐 2차 초안을 만ㄷ르고, 계속 고쳐 최종안을 만들자</li><li>‘돌아가는’ 프로그램에서 멈추지 말라<ul><li><strong>경험이 풍부한 전문 프로그래머라면 이런 행동이 전문가로서 자살 행위라는 사실을 잘 안다.</strong></li></ul></li></ul><h2 id="Args-1차-초안"><a href="#Args-1차-초안" class="headerlink" title="Args 1차 초안"></a>Args 1차 초안</h2><ul><li>코드는 ‘돌아가지만’ 엉망인 상태</li><li>아마 실제 코드가 이 상태에 머물러 있는 프로젝트들이 아주 많을 것이다.</li></ul><h2 id="String-인수"><a href="#String-인수" class="headerlink" title="String 인수"></a>String 인수</h2><ul><li>기능 추가</li></ul><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>그저 돌아가는 코드만으로는 부족하다. 돌아가는 코드가 심하게 망가지는 사례는 흔하다.</li><li>단순히 돌아가는 코드에 만족하는 프로그래머는 전문가 정신이 부족하다.</li><li>설계와 구조를 개선할 시간이 없다는 변명은 하지를 말자.</li><li>나쁜 코드보다 더 오랫동안 더 심각하게 개발 프로젝트에 악영향을 미치는 요인도 없다.</li></ul><blockquote><p>나쁜 일정은 다시 짜면 된다.</p><p>나쁜 요구사항은 다시 정의하면 된다.</p><p>나쁜 팀 역학은 복구하면 된다.</p><p><strong>하지만 나쁜 코드는 썩어 문드러진다.</strong></p></blockquote><ul><li>점점 무게가 늘어나 팀의 발목을 잡는다.</li><li>너무 서두르다가 이후로 영원히 자신들의 운명을 지배할 악성 코드라는 굴레를 짊어진다.</li><li>물론 나쁜 코드를 깨끗한 코드로 개선할 수 있지만 비용이 엄청나게 많이 든다.</li><li>오래된 의존성을 찾아내 깨려면 상당한 시간과 인내심이 필요하다.</li><li>반면 처음부터 코드를 깨끗하게 유지하기란 상대적으로 쉽다.<ul><li>아침에 엉망으로 만든 코드는 오후에 정리하기에 어렵지 않다.</li><li>5분 전이면 더더욱 쉽다.</li></ul></li><li>그러므로 <strong>코드는 언제나 최대한 깔끔하고 단순하게 정리하자.</strong> 절대로 썩어가게 방치하면 안 된다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Clean_Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8. 깔끔한 코드로 리팩토링하기</title>
      <link href="/2022/01/25/junit/junit_08/"/>
      <url>/2022/01/25/junit/junit_08/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="https://github.com/boring-km/JunitPractice">https://github.com/boring-km/JunitPractice</a></p></li><li><p>작은 리팩토링</p></li><li><p>메서드를 위한 더 좋은 집 찾기</p></li><li><p>자동 및 수동 리팩토링</p></li><li><p>과한 리팩토링?</p></li><li><p>마치며</p></li></ul><h2 id="8-1-작은-리팩토링"><a href="#8-1-작은-리팩토링" class="headerlink" title="8.1 작은 리팩토링"></a>8.1 작은 리팩토링</h2><ul><li>리팩토링은 코드를 이리저리 옮겨서 시스템이 정상 동작함을 보장하는 것이다.</li></ul><h3 id="8-1-1-리팩토링의-기회"><a href="#8-1-1-리팩토링의-기회" class="headerlink" title="8.1.1 리팩토링의 기회"></a>8.1.1 리팩토링의 기회</h3><ul><li>2장에서 다뤘던 Profile 클래스의 matches() 살펴보기</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter02</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">matches</span><span class="params">(criteria: <span class="type">Criteria</span>)</span></span> : <span class="built_in">Boolean</span> &#123; <span class="comment">// 기준과 맞으면 true 아니면 false</span></span><br><span class="line">        score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> kill = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">var</span> anyMatches = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> (criterion: Criterion <span class="keyword">in</span> criteria) &#123;    <span class="comment">// 해당 기준이 프로파일에 있는 답변과 맞는지 확인</span></span><br><span class="line">            <span class="keyword">val</span> answer = answers[criterion.answer.questionText]</span><br><span class="line">            <span class="keyword">val</span> match = criterion.weight == Weight.DontCare || answer!!.match(criterion.answer)</span><br><span class="line">            <span class="keyword">if</span> (!match &amp;&amp; criterion.weight == Weight.MustMatch) &#123;</span><br><span class="line">                kill = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                score += criterion.weight.value</span><br><span class="line">            &#125;</span><br><span class="line">            anyMatches = anyMatches or match</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (kill)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> anyMatches</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-1-8-3-리팩토링"><a href="#8-1-8-3-리팩토링" class="headerlink" title="8.1 ~ 8.3 리팩토링"></a>8.1 ~ 8.3 리팩토링</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter02</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">matches</span><span class="params">(criteria: <span class="type">Criteria</span>)</span></span> : <span class="built_in">Boolean</span> &#123; <span class="comment">// 기준과 맞으면 true 아니면 false</span></span><br><span class="line">        score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> kill = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (criterion: Criterion <span class="keyword">in</span> criteria) &#123;    <span class="comment">// 해당 기준이 프로파일에 있는 답변과 맞는지 확인</span></span><br><span class="line">            <span class="keyword">val</span> match = criterion.matches(answerMatching(criterion))</span><br><span class="line">            <span class="keyword">if</span> (!match &amp;&amp; criterion.weight == Weight.MustMatch) &#123;</span><br><span class="line">                kill = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                score += criterion.weight.value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (kill)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> anyMatches(criteria)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">anyMatches</span><span class="params">(criteria: <span class="type">Criteria</span>)</span></span> : <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> anyMatches = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> (criterion: Criterion <span class="keyword">in</span> criteria) &#123;</span><br><span class="line">            anyMatches = anyMatches or criterion.matches(answerMatching(criterion))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> anyMatches</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">answerMatching</span><span class="params">(criterion: <span class="type">Criterion</span>)</span></span> = answers[criterion.answer.questionText]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-4-과한-리팩토링"><a href="#8-4-과한-리팩토링" class="headerlink" title="8.4 과한 리팩토링?"></a>8.4 과한 리팩토링?</h2><ul><li><p>모든 매칭의 전체 가중치를 계산하는 코드 추출</p></li><li><p>새로운 메서드와 반복문이 각각 3개가 되었다.</p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter02</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">matches</span><span class="params">(criteria: <span class="type">Criteria</span>)</span></span> : <span class="built_in">Boolean</span> &#123; <span class="comment">// 기준과 맞으면 true 아니면 false</span></span><br><span class="line">        calculateScore(criteria)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (doesNotMeetAnyMustMatchCriterion(criteria))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> anyMatches(criteria)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">doesNotMeetAnyMustMatchCriterion</span><span class="params">(criteria: <span class="type">Criteria</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (criterion: Criterion <span class="keyword">in</span> criteria) &#123;    <span class="comment">// 해당 기준이 프로파일에 있는 답변과 맞는지 확인</span></span><br><span class="line">            <span class="keyword">val</span> match = criterion.matches(answerMatching(criterion))</span><br><span class="line">            <span class="keyword">if</span> (!match &amp;&amp; criterion.weight == Weight.MustMatch) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">calculateScore</span><span class="params">(criteria: <span class="type">Criteria</span>)</span></span> &#123;</span><br><span class="line">        score = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (criterion: Criterion <span class="keyword">in</span> criteria) &#123;</span><br><span class="line">            <span class="keyword">if</span> (criterion.matches(answerMatching(criterion)))</span><br><span class="line">                score += criterion.weight.value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">anyMatches</span><span class="params">(criteria: <span class="type">Criteria</span>)</span></span> : <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> anyMatches = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> (criterion: Criterion <span class="keyword">in</span> criteria) &#123;</span><br><span class="line">            anyMatches = anyMatches or criterion.matches(answerMatching(criterion))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> anyMatches</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">answerMatching</span><span class="params">(criterion: <span class="type">Criterion</span>)</span></span> = answers[criterion.answer.questionText]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-4-1-보상-명확하고-테스트-가능한-단위들"><a href="#8-4-1-보상-명확하고-테스트-가능한-단위들" class="headerlink" title="8.4.1 보상: 명확하고 테스트 가능한 단위들"></a>8.4.1 보상: 명확하고 테스트 가능한 단위들</h3><ul><li>matches() 메서드는 이제 바로 이해 가능할 정도로 전체 알고리즘이 깔끔하게 정리되었다.</li></ul><ol><li>주어진 조건에 따라 점수를 계산한다.</li><li>프로파일이 어떤 필수 조건에 부합하지 않으면 false를 반환한다.</li><li>그렇지 않으면 어떤 조건에 맞는지 여부를 반환한다.</li></ol><h3 id="8-4-2-성능-염려-그러지-않아도-된다"><a href="#8-4-2-성능-염려-그러지-않아도-된다" class="headerlink" title="8.4.2 성능 염려: 그러지 않아도 된다."></a>8.4.2 성능 염려: 그러지 않아도 된다.</h3><ul><li><p>반복문이 3개나 만들어졌고, 메서드는 잠재적으로 실행 시간이 4배가 되었다.</p></li><li><p><strong>그래서 어쩌라고?</strong></p></li><li><p>프로파일을 수백만 개 처리해야 한다면 성능은 최우선 고려 대상이 될 것이다.</p></li><li><p><strong>하지만 성능이 즉시 문제가 되지 않는다면 어설픈 최적화 노력으로 시간을 낭비하기보다 코드를 깔끔하게 유지해라!!!</strong></p></li><li><p>깔끔한 설계는 성능을 위해 최적화할 때 즉시 대응할 수 있는 최선의 보호막이다.</p></li><li><p>성능이 당장 문제가 된다면 다른 일을 하기 전에 먼저 문제가 얼마나 심각한지 성능을 측정해보라</p><ul><li>작은 테스트 코드를 만들어 예전 코드와 리팩토링한 코드 간 몇 퍼센트의 성능 저하가 있는지 판단하고 비교해보라</li></ul></li></ul><h2 id="8-5-마치며"><a href="#8-5-마치며" class="headerlink" title="8.5 마치며"></a>8.5 마치며</h2><ul><li>대량의 코드를 빠르게 작성하는 것은 쉽다. (코드가 더러워지고 어떤 절차를 따르는지 파악하기가 어려워지지만)</li><li>단위 테스트는 기본 원칙을 깨지 않고 코드를 깔끔하게 유지해 주는 보호 장치를 제공한다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> JUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
            <tag> test </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code 13장 - 동시성</title>
      <link href="/2022/01/18/clean_code/chapter13/"/>
      <url>/2022/01/18/clean_code/chapter13/</url>
      
        <content type="html"><![CDATA[<ul><li>동시성이 필요한 이유?</li><li>난관</li><li>동시성 방어 원칙<ul><li>단일 책임 원칙</li><li>따름 정리: 자료 범위를 제한하라</li><li>따름 정리: 자료 사본을 사용하라</li><li>따름 정리: 스레드는 가능한 독립적으로 구현하라</li></ul></li><li>라이브러리를 이해하라<ul><li>스레드 환경에 안전한 컬렉션</li></ul></li><li>실행 모델을 이해하라<ul><li>생산자-소비자</li><li>읽기-쓰기</li><li>식사하는 철학자들</li></ul></li><li>동기화하는 메서드 사이에 존재하는 의존성을 이해하라</li><li>동기화하는 부분을 작게 만들어라</li><li>올바른 종료 코드는 구현하기 어렵다</li><li>스레드 코드 테스트하기<ul><li>말이 안되는 실패는 잠정적인 스레드 문제로 취급하라</li><li>다중 스레드를 고려하지 않은 순차 코드부터 제대로 돌게 만들자</li><li>다중 스레드를 쓰는 코드 부분을 다양한 환경에 쉽게 끼워 넣을 수 있게 스레드 코드를 구현하라</li><li>다중 스레드를 쓰는 코드 부분을 상황에 맞게 조율할 수 있게 작성하라</li><li>프로세서 수보다 많은 스레드를 돌려보라</li><li>다른 플랫폼에서 돌려보라</li><li>코드에 보조 코드를 넣어 돌려라. 강제로 실패를 일으키게 해보라</li><li>직접 구현하기</li><li>자동화</li></ul></li><li>결론</li></ul><h2 id="동시성이-필요한-이유"><a href="#동시성이-필요한-이유" class="headerlink" title="동시성이 필요한 이유?"></a>동시성이 필요한 이유?</h2><ul><li>동시성은 결합을 없애는 전략이다.</li><li><strong>무엇</strong>(<strong>what</strong>)과 <strong>언제</strong>(<strong>when</strong>)를 분리하는 전략이다.</li><li>스레드가 하나인 프로그램은 무엇과 언제가 서로 밀접하다. 그래서 호출 스택을 살펴보면 프로그램 상태가 곧바로 드러난다.</li><li><strong>무엇과 언제를 분리하면 애플리케이션 구조와 효율이 극적으로 나아진다.</strong></li><li>구조적인 관점에서 프로그램이 작은 협력 프로그램 여럿으로 보인다.<ul><li>따라서 시스템을 이해하기가 쉽고 문제를 분리하기도 쉽다.</li></ul></li><li>서블릿 모델에서 웹 서버는 비동기적으로 서블릿을 실행한다.<ul><li>하지만 웹 컨테이너가 제공하는 이 결합분리 전략은 완벽과 거리가 멀어서 개발자는 동시성을 정확히 구현하도록 각별한 주의와 노력이 필요하다.</li></ul></li><li>응답 시간과 작업 처리량 개선을 요구사항으로 불가피한 경우<ul><li>웹 사이트 정보 수집기</li><li>많은 사용자 동시 처리 시스템</li><li>대량의 정보를 분석하는 시스템</li></ul></li></ul><h3 id="미신과-오해"><a href="#미신과-오해" class="headerlink" title="미신과 오해"></a>미신과 오해</h3><ul><li>동시성은 항상 성능을 높여준다?<ul><li>때로 성능을 높여준다. 대기 시간이 아주 길어 여러 스레드가 프로세서를 공유할 수 있거나, 여러 프로세서가 동시에 처리할 독립적인 계산이 충분히 많은 경우에만 성능이 높아진다.<br>어느 쪽도 일상적으로 발생하는 상황은 아니다.</li></ul></li><li>동시성을 구현해도 설계는 변하지 않는다?<ul><li>단일 스레드 시스템과 다중 스레드 시스템은 설계가 판이하게 다르다.</li><li><strong>무엇과 언제를 분리!</strong></li></ul></li><li>웹 또는 EJB 컨테이너를 사용하면 동시성을 이해할 필요가 없다?<ul><li>실제로 컨테이너가 어떻게 동작하는지, 어떻게 동시 수정, 데드락 등과 같은 문제를 피할 수 있는지를 알아야 한다.</li></ul></li></ul><h3 id="타당한-생각들"><a href="#타당한-생각들" class="headerlink" title="타당한 생각들"></a>타당한 생각들</h3><ul><li><strong>동시성은 다소 부하를 유발한다.</strong> 성능 측면에서 부하가 걸리며, 코드도 더 짜야 한다.</li><li><strong>동시성은 복잡하다.</strong> 간단한 문제라도 동시성은 복잡하다.</li><li><strong>일반적으로 동시성 버그는 재현하기 어렵다.</strong> 그래서 진짜 결함으로 간주되지 않고 일회성 문제로 여겨 무시하기 쉽다.</li><li><strong>동시성을 구현하려면 흔히 근본적인 설계 전략을 재고해야 한다.</strong></li></ul><h2 id="난관"><a href="#난관" class="headerlink" title="난관"></a>난관</h2><ul><li>왜 동시성을 구현하기가 어려울까?</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">X</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> lastIdUsed;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNextId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ++lastIdUsed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>인스턴스 X를 생성하고, lastIdUsed 필드를 42로 설정한 다음, 두 스레드가 해당 인스턴스를 공유한다.</li><li>이제 두 스레드가 getNextId();를 호출한다면??</li></ul><blockquote><p>한 스레드는 43을 받는다. 다른 스레드는 44를 받는다. lastIdUsed는 44가 된다.</p></blockquote><blockquote><p>한 스레드는 44을 받는다. 다른 스레드는 43를 받는다. lastIdUsed는 44가 된다.</p></blockquote><blockquote><p>한 스레드는 43을 받는다. 다른 스레드는 44를 받는다. lastIdUsed는 43가 된다. <strong>(문제의 상황!)</strong></p></blockquote><ul><li>두 스레드가 자바 코드 한 줄을 거쳐가는 경로는 수없이 많은데, 그 중에서 일부 경로가 잘못된 결과를 내놓기 때문이다.</li></ul><h2 id="동시성-방어-원칙"><a href="#동시성-방어-원칙" class="headerlink" title="동시성 방어 원칙"></a>동시성 방어 원칙</h2><ul><li>동시성 코드가 일으키는 문제로부터 시스템을 방어하는 원칙과 기술들…</li></ul><h3 id="단일-책임-원칙"><a href="#단일-책임-원칙" class="headerlink" title="단일 책임 원칙"></a>단일 책임 원칙</h3><ul><li>SRP는 주어진 메서드&#x2F;클래스&#x2F;컴포넌트를 변경할 이유가 하나여야 한다는 원칙이다.</li><li><strong>동시성 관련 코드는 다른 코드와 분리해야 한다는 뜻이다.</strong><ul><li>근데 동시성과 관련 없는 코드에 동시성을 곧바로 구현하는 사례가 너무 흔하다.</li></ul></li></ul><blockquote><p>동시성 코드는 독자적인 개발, 변경, 조율 주기가 있다.</p><p>동시성 코드에는 독자적인 난관이 있다. 다른 코드에서 겪는 난관과 다르며 훨씬 어렵다.</p><p>잘못 구현한 동시성 코드는 별의별 방식으로 실패한다. 주변에 있는 다른 코드가 발목을 잡지 않더라도 동시성 하나만으로도 충분히 어렵다.</p></blockquote><ul><li><strong>권장사항: 동시성 코드는 다른 코드와 분리하라.</strong></li></ul><h3 id="자료-범위를-제한하라"><a href="#자료-범위를-제한하라" class="headerlink" title="자료 범위를 제한하라"></a>자료 범위를 제한하라</h3><ul><li>공유 객체를 사용하는 코드 내 **임계 영역 (critical section)**을 <strong>synchronized</strong> 키워드로 보호하라고 권장한다.</li><li>이런 임계영역의 수를 줄이는 기술이 중요하다. 공유 자료를 수정하는 위치가 많아지지 않도록 주의하자.</li><li><strong>권장사항: 자료를 캡슐화하라, 공유 자료를 최대한 줄여라.</strong></li></ul><h3 id="자료-사본을-사용하라"><a href="#자료-사본을-사용하라" class="headerlink" title="자료 사본을 사용하라"></a>자료 사본을 사용하라</h3><ul><li>공유 자료를 처음부터 공유하지 않으면 제일 좋다.</li><li>정 필요하면 객체를 읽기 전용으로 복사해 사용하는 것이다.</li><li>객체를 복사하는 시간과 부하가 걱정스럽다면, 사본으로 동기화를 피해서 내부 잠금을 없애 절약한 수행 시간이 사본 생성과 가비지 컬렉션에 드는 부하를 상쇄할 가능성이 크다.</li></ul><h3 id="스레드는-가능한-독립적으로-구현하라"><a href="#스레드는-가능한-독립적으로-구현하라" class="headerlink" title="스레드는 가능한 독립적으로 구현하라"></a>스레드는 가능한 독립적으로 구현하라</h3><ul><li>자신만의 세상에 존재하는 스레드를 구현한다.<ul><li>다른 스레드와 자료를 공유하지 않는다.</li></ul></li><li>어떻게?: 각 스레드는 클라이언트 요청 하나를 처리한다. 모든 정보는 비공유 출처에서 가져오며 로컬 변수에 저장한다.<ul><li>그러면 각 스레드는 세상에 자신만 있는 듯이 돌아갈 수 있다. <strong>다른 스레드와 동기화할 필요가 없으니까!</strong></li></ul></li><li><strong>권장사항: 독자적인 스레드로, 가능하면 다른 프로세서에서, 돌려도 괜찮도록 자료를 독립적인 단위로 분할하라.</strong></li></ul><h2 id="라이브러리를-이해하라"><a href="#라이브러리를-이해하라" class="headerlink" title="라이브러리를 이해하라"></a>라이브러리를 이해하라</h2><ul><li>책에서는 자바 5를 의식해서 쓴 내용들이 많다.</li><li>스레드 환경에서 안전한 컬렉션을 소개해주었다.<ul><li>java.util.concurrent</li><li>java.util.concurrent.atomic</li><li>java.util.concurrent.locks</li></ul></li><li><strong>권장사항: 언어가 제공하는 클래스를 검토하라.</strong></li></ul><h2 id="실행-모델을-이해하라"><a href="#실행-모델을-이해하라" class="headerlink" title="실행 모델을 이해하라"></a>실행 모델을 이해하라</h2><ul><li>다중 스레드 애플리케이션을 분류하는 방식은 여러 가지다.</li><li><strong>기본 용어</strong></li></ul><table><thead><tr><th align="left">용어</th><th align="left">설명</th></tr></thead><tbody><tr><td align="left">한정된 자원(Bound Resource)</td><td align="left">다중 스레드 환경에서 사용하는 자원으로, 크기나 숫자가 제한적이다. 데이터베이스 연결, 길이가 일정한 읽기&#x2F;쓰기 버퍼 등이 예다.</td></tr><tr><td align="left">상호 배제(Mutual Exclusion)</td><td align="left">한 번에 한 스레드만 공유 자료나 공유 자원을 사용할 수 있는 경우를 가리킨다.</td></tr><tr><td align="left">기아(Starvation)</td><td align="left">한 스레드나 여러 스레드가 굉장히 오랫동안 혹은 영원히 자원을 기다린다. 예를 들어, 항상 짧은 스레드에게 우선순위를 준다면, 짧은 스레드가 지속적으로 이어질 경우, 긴 스레드가 기아 상태에 빠진다.</td></tr><tr><td align="left">데드락(Deadlock)</td><td align="left">여러 스레드가 서로가 끝나기를 기다린다. 모든 스레드가 각기 필요한 자원을 다른 스레드가 점유하는 바람에 어느 쪽도 더 이상 진행하지 못한다.</td></tr><tr><td align="left">라이브락(Livelock)</td><td align="left">락을 거는 단계에서 각 스레드가 서로를 방해한다. 스레드는 계속해서 진행하려 하지만, 공명(resonance)으로 인해, 굉장히 오랫동안 혹은 영원히 진행하지 못한다.</td></tr></tbody></table><h3 id="실행-모델-생산자-소비자"><a href="#실행-모델-생산자-소비자" class="headerlink" title="실행 모델: 생산자-소비자"></a>실행 모델: 생산자-소비자</h3><ul><li>하나 이상의 생산자 스레드가 정보를 생성해 buffer or queue에 넣는다.</li><li>하나 이상의 소비자 스레드가 대기열에서 정보를 가져와 사용한다.</li><li>생산자, 소비자 스레드가 사용하는 대기열은 <strong>한정된 자원이다.</strong></li><li>잘못 구현하면 생산자 스레드와 소비자 스레드가 둘 다 진행 가능함에도 불구하고 동시에게 서로에게서 시그널을 기다릴 가능성이 존재한다.</li></ul><h3 id="실행-모델-읽기-쓰기"><a href="#실행-모델-읽기-쓰기" class="headerlink" title="실행 모델: 읽기-쓰기"></a>실행 모델: 읽기-쓰기</h3><ul><li>읽기 스레드를 위한 주된 정보원으로 공유 자원을 사용하지만, 쓰기 스레드가 이 공유 자원을 가끔씩 갱신하는 상황이라고 가정.<ul><li><em>처리율</em>이 문제의 핵심</li><li>처리율을 강조하면 기아 현상이 오거나 오래된 정보가 쌓인다.</li><li>갱신을 허용하면 처리율에 영향을 미친다.</li></ul></li><li><em>읽기 스레드의 요구와 쓰기 스레드의 요구를 적절히 만족시켜 처리율도 적당히 높이고 기아도 방지하는 해법이 필요하다.</em></li><li>어떻게?: 읽기 스레드가 없을 때까지 갱신을 원하는 쓰기 스레드가 버퍼를 기다리는 방법이다.<ul><li>근데 읽기 스레드가 지속되면 쓰기 스레드는 계속 버퍼를 기다려 기아 상태에 빠진다.</li><li>쓰기 스레드에게 우선권을 준 상태에서 쓰기 스레드가 계속 이어진다면 처리율이 떨어진다.</li><li>그래서 양쪽 균형을 잡으면서 동시 갱신 문제를 피하는 해법이 필요하다.</li></ul></li></ul><h3 id="실행-모델-식사하는-철학자들"><a href="#실행-모델-식사하는-철학자들" class="headerlink" title="실행 모델: 식사하는 철학자들"></a>실행 모델: 식사하는 철학자들</h3><img src="https://upload.wikimedia.org/wikipedia/commons/7/7b/An_illustration_of_the_dining_philosophers_problem.png" alt="Dining philosophers problem" width="400"/><ul><li>각 철학자 왼쪽에 포크, 가운데에는 스파게티</li><li>배가 고프면 양손에 포크를 집어들고 스파게티를 먹는다.<ul><li><strong>양손에 포크를 쥐지 않으면 먹지 못한다.</strong></li><li>왼쪽이나 오른쪽 철학자가 포크를 사용 중이라면 그쪽 철학자가 먹고 나서 포크를 내려놓을 때까지 기다려야 한다.</li></ul></li><li><strong>철학자 &#x3D;&gt; 스레드</strong></li><li><strong>포크 &#x3D;&gt; 자원</strong></li><li>여러 프로세스가 자원을 얻으려 경쟁한다. 주의해서 설계하지 않으면 데드락, 라이브락, 처리율 저하, 효율성 저하 등을 겪는다.</li></ul><h2 id="동기화하는-메서드-사이에-존재하는-의존성을-이해하라"><a href="#동기화하는-메서드-사이에-존재하는-의존성을-이해하라" class="headerlink" title="동기화하는 메서드 사이에 존재하는 의존성을 이해하라"></a>동기화하는 메서드 사이에 존재하는 의존성을 이해하라</h2><ul><li>동기화하는 메서드 사이에 의존성이 존재하면 동시성 코드에 찾아내기 어려운 버그가 생긴다.</li><li>공유 클래스 하나에 동기화된 메서드가 여럿이라면 구현이 올바른지 다시 한 번 확인하자</li><li><strong>권장사항: 공유 객체 하나에는 메서드 하나만 사용하라.</strong></li><li>물론 여러 메서드가 필요한 상황도 생길 수 있다.</li></ul><table><thead><tr><th align="left">방법</th><th align="left">내용</th></tr></thead><tbody><tr><td align="left">클라이언트에서 잠금</td><td align="left">클라이언트에서 첫 번째 메서드를 호출하기 전에 서버를 잠근다. 마지막 메서드를 호출할 때까지 잠금을 유지한다.</td></tr><tr><td align="left">서버에서 잠금</td><td align="left">서버에다 서버를 잠그고 모든 메서드를 호출한 후 잠금을 해제하는 메서드를 구현한다. 클라이언트는 이 메서드를 호출한다.</td></tr><tr><td align="left">연결 서버</td><td align="left">잠금을 수행하는 중간 단계를 생성한다. ‘서버에서 잠금’ 방식과 유사하지만 원래 서버는 변경하지 않는다.</td></tr></tbody></table><h2 id="동기화하는-부분을-작게-만들어라"><a href="#동기화하는-부분을-작게-만들어라" class="headerlink" title="동기화하는 부분을 작게 만들어라"></a>동기화하는 부분을 작게 만들어라</h2><ul><li>자바에서는 synchronized 키워드를 사용하면 락을 설정한다.</li><li>같은 락으로 감싼 모든 코드 영역은 한 번에 한 스레드만 실행이 가능하다.</li><li>락은 스레드를 지연시키고 부하를 가중시킨다. (남발 X)</li><li>하지만 임계영역은 반드시 보호해야 한다. 그래서 임계영역 수를 최대한 줄여야 한다.</li><li>그렇다고 거대한 임계영역 하나로 구현하는 상황은 스레드 간에 경쟁이 늘어나고 프로그램 성능이 떨어지게 된다.</li><li><strong>권장사항: 동기화하는 부분을 최대한 작게 만들어라</strong></li></ul><h2 id="올바른-종료-코드는-구현하기-어렵다"><a href="#올바른-종료-코드는-구현하기-어렵다" class="headerlink" title="올바른 종료 코드는 구현하기 어렵다"></a>올바른 종료 코드는 구현하기 어렵다</h2><ul><li>가장 흔히 발생하는 문제는 <strong>데드락</strong></li><li>절대 오지 않을 signal(신호)을 스레드가 기다린다.<ul><li>부모 스레드가 자식 스레드 여러 개 만든 후 모두가 끝나기를 기다렸다 자원을 해제하고 종료하는 시스템이 있다</li><li>그 중 하나가 데드락에 걸리면 부모 스레드는 영원히 기다림</li><li>자식 스레드 중 두 개가 생산자&#x2F;소비자 관계라면?<ul><li>생산자 스레드는 빨리 종료했는데 소비자 스레드가 생산자 스레드에서 오는 메시지를 기다린다면?</li></ul></li></ul></li><li>깔끔하게 종료하는 다중 스레드 코드를 짜야 한다면 시간을 투자해 올바로 구현하자~</li><li><strong>권장사항: 종료 코드를 개발 초기부터 고민하고 동작하게 초기부터 구현하라. 생각보다 오래 걸린다. 생각보다 어려우므로 이미 나온 알고리즘을 검토하라.</strong></li></ul><h2 id="스레드-코드-테스트하기"><a href="#스레드-코드-테스트하기" class="headerlink" title="스레드 코드 테스트하기"></a>스레드 코드 테스트하기</h2><ul><li>같은 코드와 같은 자원을 사용하는 스레드가 둘 이상으로 늘어나면 상황은 급격하게 복잡해진다.</li><li><strong>권장사항:</strong> 문제를 노출하는 테스트 케이스를 작성하라. 프로그램 설정과 시스템 설정과 부하를 바꿔가며 자주 돌려라. 테스트가 실패하면 원인을 추적하라. 다시 돌렸더니 통과하더라는 이유로 그냥 넘어가면 절대로 안 된다.</li><li>말이 안 되는 실패는 잠정적인 스레드 문제로 취급하라.</li><li>다중 스레드를 고려하지 않은 순차 코드부터 제대로 돌게 만들자.</li><li>다중 스레드를 쓰는 코드 부분을 다양한 환경에 쉽게 끼워 넣을 수 있도록 스레드 코드를 구현하라.</li><li>다중 스레드를 쓰는 코드 부분을 상황에 맞춰 조정할 수 있게 작성하라.</li><li>프로세서 수보다 많은 스레드를 돌려보라.</li><li>다른 플랫폼에서 돌려보라.</li><li>코드에 보조 코드를 넣어 돌려라. 강제로 실패를 일으키게 해보라.</li></ul><h3 id="말이-안-되는-실패는-잠정적인-스레드-문제로-취급하라"><a href="#말이-안-되는-실패는-잠정적인-스레드-문제로-취급하라" class="headerlink" title="말이 안 되는 실패는 잠정적인 스레드 문제로 취급하라"></a>말이 안 되는 실패는 잠정적인 스레드 문제로 취급하라</h3><ul><li>스레드 코드에 잠입한 버그는 재현하기가 아주 어렵다.</li><li>‘일회성 문제’는 존재하지 않는다고 가정하는 편이 안전하다.</li><li>‘일회성 문제’를 계속 무시한다면 잘못된 코드 위에 코드가 계속 쌓인다.</li></ul><h3 id="다중-스레드를-고려하지-않은-순차-코드부터-제대로-돌게-만들자"><a href="#다중-스레드를-고려하지-않은-순차-코드부터-제대로-돌게-만들자" class="headerlink" title="다중 스레드를 고려하지 않은 순차 코드부터 제대로 돌게 만들자"></a>다중 스레드를 고려하지 않은 순차 코드부터 제대로 돌게 만들자</h3><ul><li>스레드 환경 밖에서 코드가 제대로 도는지 반드시 확인한다.<ul><li>스레드가 호출하는 POJO를 만든다.</li></ul></li><li><strong>권장사항</strong>: 스레드 환경 밖에서 생기는 버그와 스레드 환경에서 생기는 버그를 동시에 디버깅하지 마라. 먼저 스레드 환경 밖에서 코드를 올바로 돌려라.</li></ul><h3 id="다중-스레드를-쓰는-코드-부분을-다양한-환경에-쉽게-끼워-넣을-수-있게-스레드-코드를-구현하라"><a href="#다중-스레드를-쓰는-코드-부분을-다양한-환경에-쉽게-끼워-넣을-수-있게-스레드-코드를-구현하라" class="headerlink" title="다중 스레드를 쓰는 코드 부분을 다양한 환경에 쉽게 끼워 넣을 수 있게 스레드 코드를 구현하라"></a>다중 스레드를 쓰는 코드 부분을 다양한 환경에 쉽게 끼워 넣을 수 있게 스레드 코드를 구현하라</h3><ul><li>한 스레드로 실행하거나, 여러 스레드로 실행하거나, 실행 중 스레드 수를 바꿔본다.</li><li>스레드 코드를 실제 환경이나 테스트 환경에서 돌려본다.</li><li>테스트 코드를 빨리, 천천히, 다양한 속도로 돌려본다.</li><li>반복 테스트가 가능하도록 테스트 케이스를 작성한다.</li><li><strong>권장사항:</strong> 다양한 설정에서 실행할 목적으로 다른 환경에 쉽게 끼워 넣을 수 있게 코드를 구현하라.</li></ul><h3 id="다중-스레드를-쓰는-코드-부분을-상황에-맞게-조율할-수-있게-작성하라"><a href="#다중-스레드를-쓰는-코드-부분을-상황에-맞게-조율할-수-있게-작성하라" class="headerlink" title="다중 스레드를 쓰는 코드 부분을 상황에 맞게 조율할 수 있게 작성하라"></a>다중 스레드를 쓰는 코드 부분을 상황에 맞게 조율할 수 있게 작성하라</h3><ul><li>적절한 스레드 개수를 파악하려면 상당한 시행착오가 필요하다.</li><li>스레드 개수를 조율하기 쉽게 코드를 구현한다.</li><li>프로그램이 돌아가는 도중에 스레드 개수를 변경하는 방법도 고려한다.</li><li>프로그램 처리율과 효율에 따라 스스로 스레드 개수를 조율하는 코드도 고민한다.</li></ul><h3 id="프로세서-수보다-많은-스레드를-돌려보라"><a href="#프로세서-수보다-많은-스레드를-돌려보라" class="headerlink" title="프로세서 수보다 많은 스레드를 돌려보라"></a>프로세서 수보다 많은 스레드를 돌려보라</h3><ul><li>시스템이 스레드를 swapping할 때도 문제가 발생한다.</li><li>swapping이 잦을수록 임계영역을 빼먹은 코드나 데드락을 일으키는 코드를 찾기 쉬워진다.</li></ul><h3 id="다른-플랫폼에서-돌려보라"><a href="#다른-플랫폼에서-돌려보라" class="headerlink" title="다른 플랫폼에서 돌려보라"></a>다른 플랫폼에서 돌려보라</h3><ul><li>os 변경하면서 테스트~</li><li><strong>권장사항:</strong> 처음부터 그리고 자주 모든 목표 플랫폼에서 코드를 돌려라.</li></ul><h3 id="코드에-보조-코드를-넣어-돌려라-강제로-실패를-일으키게-해보라"><a href="#코드에-보조-코드를-넣어-돌려라-강제로-실패를-일으키게-해보라" class="headerlink" title="코드에 보조 코드를 넣어 돌려라. 강제로 실패를 일으키게 해보라."></a>코드에 보조 코드를 넣어 돌려라. 강제로 실패를 일으키게 해보라.</h3><ul><li>흔히 스레드 코드는 오류를 찾기가 쉽지 않다.</li><li>왜냐하면 코드가 실행되는 수천 가지 경로 중에 아주 소수만 실패하기 때문이다.</li><li>코드에 보조 코드를 추가해 실행되는 순서를 바꿔보며 확인을 해본다.</li></ul><ol><li>직접 구현하기</li><li>자동화</li></ol><h3 id="직접-구현하기"><a href="#직접-구현하기" class="headerlink" title="직접 구현하기"></a>직접 구현하기</h3><ul><li>코드에다 직접 wait(), sleep(), yield(), priority() 함수를 추가한다.</li><li>yield()를 삽입하면 코드가 실행되는 경로가 바뀐다. 그래서 이전에 실패하지 않았던 코드가 실패할 가능성을 열어준다.</li><li>코드가 실패했다면 yield()를 추가했기 때문이 아니라 <strong>원래 잘못된 코드인데 증거가 드러났을 뿐이다.</strong></li><li>이 방법의 문제점?<ul><li>보조 코드 삽입 위치</li><li>어떤 함수를 어디서 호출해야 적당한가?</li><li>배포 환경에 보조 코드를 남겨두면 성능 감소한다</li><li>무작위적이다. 오류가 나올지도 안나올지도 모른다.</li></ul></li><li>배포 환경이 아닌 테스트 환경에서 보조 코드를 실행할 방법이 필요하다.</li><li>실행할 때마다 설정을 바꿔줄 방법도 필요하다.</li><li>확실히 스레드를 전혀 모르는 POJO와 스레드를 제어하는 클래스로 프로그램을 분할하면 보조 코드를 추가할 위치를 찾기가 쉬워진다.</li></ul><h3 id="자동화"><a href="#자동화" class="headerlink" title="자동화"></a>자동화</h3><ul><li>보조 코드를 자동으로 추가하려면 AOF, CGLIB(코드 생성 라이브러리, 자바 클래스의 프록시 생성), ASM 등과 같은 도구를 사용한다. (이게 뭐지?)</li><li>흔들기(jiggle) 기법을 사용해 배포 환경에서는 사용 안하고 테스트 환경에서 무작위로 nop, sleep, yield 등이 실행되는 코드를 작성해본다.</li><li><strong>권장사항:</strong> 흔들기 기법을 사용해 오류를 찾아내라.</li></ul><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>다중 스레드 코드는 올바로 구현하기 어렵다.</li><li>간단했던 코드가 여러 스레드와 공유 자료를 추가하면서 악몽으로 변한다.</li><li>다중 스레드 코드를 작성한다면 각별히 깨끗하게 코드를 짜야 한다.</li><li>주의하지 않으면 희귀하고 오묘한 오류에 직면하게 된다.</li><li><strong>SRP 준수!</strong></li><li><strong>동시성 오류를 일으키는 잠정적인 원인을 철저히 이해한다.</strong></li><li>사용하는 라이브러리와 기본 알고리즘을 이해한다.</li><li>보호할 코드 영역을 찾아내는 방법과 특정 코드 영역을 잠그는 방법을 이해한다.</li><li>스레드 코드는 많은 플랫폼에서 많은 설정으로 반복해서 계속 테스트해야 한다.<ul><li>TDD 3대 규칙을 따르면 자연히 얻어진다.</li></ul></li><li>시간을 들여 보조 코드를 추가하면 오류가 드러날 가능성이 크게 높아진다.<ul><li>직접 구현해도 괜찮고 몇 가지 자동화 기술을 사용해도 괜찮다.</li></ul></li><li>초반부터 보조 코드를 고려한다. 스레드 코드는 출시하기 전까지 최대한 오랫동안 돌려봐야 한다.</li><li><strong>깔끔한 접근 방식을 취한다면 코드가 올바로 돌아갈 가능성이 극적으로 높아진다.</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Clean_Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7. 경계 조건: CORRECT 기억법</title>
      <link href="/2021/12/30/junit/junit_07/"/>
      <url>/2021/12/30/junit/junit_07/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="https://github.com/boring-km/JunitPractice">https://github.com/boring-km/JunitPractice</a></p></li><li><p>Conformance(준수)</p></li><li><p>Ordering(순서)</p></li><li><p>Range(범위)</p></li><li><p>Reference(참조)</p></li><li><p>Existence(존재)</p></li><li><p>Cardinality(기수)</p></li><li><p>Time(시간)</p></li><li><p>마무리</p></li></ul><h3 id="7-1-C-onformance-준수"><a href="#7-1-C-onformance-준수" class="headerlink" title="7.1 [C]onformance 준수"></a>7.1 [C]onformance 준수</h3><ul><li><em>값이 기대한 양식을 준수하고 있는가?</em></li><li>예를 들어 이메일 같은 경우면 ‘@’ 기호에 따라 양식을 준수하는지 판단한다.</li><li>문자열 데이터를 검증할 때는 많은 규칙이 필요하다. 다행히 대부분 단순하다.</li><li>하지만 구조적 데이터의 경우 테스트 케이스가 엄청 많을 수 있다.<ul><li>처음에 데이터가 입력될 때 테스트해서 다른 시스템으로 넘어갈 때 또 테스트하지 않도록 주의하면 되겠다.</li></ul></li></ul><h3 id="7-2-O-rdering-순서"><a href="#7-2-O-rdering-순서" class="headerlink" title="7.2 [O]rdering 순서"></a>7.2 [O]rdering 순서</h3><ul><li><em>값의 집합이 적절하게 정렬되거나 정렬되지 않았나?</em></li><li>교제 예시 코드 <a href="https://github.com/gilbutITbook/006814/tree/master/iloveyouboss_15">전체 코드 예시</a></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">answersResultsInScoredOrder</span><span class="params">()</span></span> &#123;</span><br><span class="line">  smeltInc.add(Answer(doTheyReimburseTuition, Bool.FALSE))</span><br><span class="line">  pool.add(smeltInc)</span><br><span class="line">  langrsoft.add(Answer(doTheyReimburseTuition, Bool.TRUE))</span><br><span class="line">  pool.add(langrsoft)</span><br><span class="line">  </span><br><span class="line">  pool.score(soleNeed(doTheyReimburseTuition, Bool.TRUE, Weight.Important))</span><br><span class="line">  <span class="keyword">val</span> ranked: List&lt;Profile&gt; = pool.ranked() <span class="comment">// 여기서 정렬</span></span><br><span class="line">  assertThat(ranked.toArray(), equalTo(arrayOf&lt;Profile&gt;(langrsoft, smeltInc)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-3-R-ange-범위"><a href="#7-3-R-ange-범위" class="headerlink" title="7.3 [R]ange 범위"></a>7.3 [R]ange 범위</h3><ul><li><p><em>이성적인 최솟값과 최댓값 안에 있는가?</em></p></li><li><p>자바 기본형으로 변수를 만들 때 대부분은 필요한 것보다 훨씬 많은 용량을 가진다.</p></li><li><p>기본형의 과도한 사용에 대한 코드 냄새를 <strong>기본형 중독</strong>이라 한다.</p></li><li><p>360도인 원의 이동 방향을 자바 기본형으로 저장하기보다 Bearing 클래스로 범위를 제약하는 로직을 캡슐화할 수 있다.</p><ul><li>chapter07 BearingTest.kt 확인</li></ul></li></ul><h4 id="좀-더-복잡한-경우라면"><a href="#좀-더-복잡한-경우라면" class="headerlink" title="좀 더 복잡한 경우라면?"></a>좀 더 복잡한 경우라면?</h4><ul><li>점 2개를 x, y라는 정수형 tuple로 유지하는 클래스가 있다.</li><li>두 점이 이루는 각 변은 100 이하여야 한다.<ul><li>x, y 좌표 쌍으로 허용되는 범위는 상호 의존적이다.</li></ul></li><li>좌표에 영향을 줄 수 있는 어떤 동작에 관하여 범위를 assert 해보자<ul><li>그래서 x, y 좌표 쌍의 범위를 타당하게 유지해보자</li></ul></li><li>@After를 추가해 테스트가 완료되었을 때마다 확인할 수 있다.</li><li><a href="https://github.com/gilbutITbook/006814/blob/master/iloveyouboss_16/test/scratch/RectangleTest.java">예시 코드</a><ul><li>각 변을 100으로 제약함</li></ul></li></ul><h4 id="7-3-1-불변성을-검사하는-사용자-정의-Matcher-생성"><a href="#7-3-1-불변성을-검사하는-사용자-정의-Matcher-생성" class="headerlink" title="7.3.1 불변성을 검사하는 사용자 정의 Matcher 생성"></a>7.3.1 불변성을 검사하는 사용자 정의 Matcher 생성</h4><ul><li>사용자 정의 hamcrest matcher를 구현하려면 TypeSafeMatcher 클래스를 상속해 매칭하고자 하는 타입을 지정해야 한다.</li><li>matchesSafely()를 오버라이드 해서 제약 사항을 재정의<ul><li>각 변이 범위 안에 있으면 true</li></ul></li><li>사용자 정의 matcher 클래스는 단언이 실패할 때<ul><li>의미 있는 메시지를 describeTo() 메서드에 기재해야 한다.</li><li>Matcher 인스턴스를 반환하는 정적 팩토리 메서드를 제공해야 한다.</li></ul></li></ul><h4 id="7-3-2-불변-메서드를-내장하여-범위-테스트"><a href="#7-3-2-불변-메서드를-내장하여-범위-테스트" class="headerlink" title="7.3.2 불변 메서드를 내장하여 범위 테스트"></a>7.3.2 불변 메서드를 내장하여 범위 테스트</h4><ul><li>테스트할 대부분 범위는 application-domain 제약이라기보다는 자료 구조에 관한 제약에 의존하게 될 것이다.</li><li>희소 배열(sparse array)에 관한 <a href="https://github.com/gilbutITbook/006814/blob/master/iloveyouboss_16/src/util/SparseArray.java">예시</a></li><li>(자세히 볼 필요까지야 있겠나…)</li><li>checkInvariants() 메서드로 null이 아닌 배열 내 값들의 갯수가 배열의 길이와 동일하지 않으면 예외 던지기<ul><li>최소한 어디서 예외가 발생하는지 그나마 추적이 쉬워진다.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"><span class="keyword">import</span> scratch.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.CoreMatchers.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SparseArrayTest</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> SparseArray&lt;Object&gt; array;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">    array = <span class="keyword">new</span> <span class="title class_">SparseArray</span>&lt;&gt;();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@ExpectToFail</span></span><br><span class="line">  <span class="meta">@Ignore</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlesInsertionInDescendingOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    array.put(<span class="number">7</span>, <span class="string">&quot;seven&quot;</span>);</span><br><span class="line">    array.checkInvariants();</span><br><span class="line">    array.put(<span class="number">6</span>, <span class="string">&quot;six&quot;</span>);</span><br><span class="line">    array.checkInvariants();</span><br><span class="line">    assertThat(array.get(<span class="number">6</span>), equalTo(<span class="string">&quot;six&quot;</span>));</span><br><span class="line">    assertThat(array.get(<span class="number">7</span>), equalTo(<span class="string">&quot;seven&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>인덱싱은 수많은 잠재적인 오류를 포함하고 있다.</p></blockquote><h3 id="7-4-R-eference-참조"><a href="#7-4-R-eference-참조" class="headerlink" title="7.4 [R]eference 참조"></a>7.4 [R]eference 참조</h3><ul><li><p><em>코드 자체에서 통제할 수 없는 어떤 외부 참조를 포함하고 있는가?</em></p></li><li><p><strong>고려해야 할 점들</strong></p><ul><li>범위를 넘어서는 것을 참조하고 있지 않은지</li><li>외부 의존성은 무엇인지</li><li>특정 상태에 있는 객체를 의존하고 있는지 여부</li><li>반드시 존재해야 하는 그 외 다른 조건들</li></ul></li><li><p>어떤 상태에 대해 가정할 때 <strong>그 가정이 맞지 않으면 코드가 합리적으로 잘 동작하는지 검사</strong></p><ol><li>가속 이후에 변속기를 주행으로 유지하는가?</li><li>주행 중에 주차로 바꾸는 파괴적인 요청을 무시하는가?</li><li>차량이 움직이지 않으면 주차로 변속기 변경을 허용하는가?</li></ol></li><li><p><a href="https://github.com/gilbutITbook/006814/blob/master/iloveyouboss_16/test/transmission/TransmissionTest.java">예제</a></p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hamcrest.CoreMatchers</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.MatcherAssert.assertThat</span><br><span class="line"><span class="keyword">import</span> org.junit.Before</span><br><span class="line"><span class="keyword">import</span> org.junit.Test</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransmissionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> transmission: Transmission</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> car: Car</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> 초기화<span class="params">()</span></span> &#123;</span><br><span class="line">    car = Car()</span><br><span class="line">    transmission = Transmission(car)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> 주행으로_기어를_바꾸고_35mph로_가속해도_기어는_주행기어다<span class="params">()</span></span> &#123;</span><br><span class="line">    transmission.shift(Gear.DRIVE)</span><br><span class="line">    car.accelerateTo(<span class="number">35</span>)</span><br><span class="line">    assertThat(transmission.gear, CoreMatchers.equalTo(Gear.DRIVE))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> 주행으로_기어를_바꾸고_30mph로_가속하면_기어를_주차로_바꿔도_기어는_주행기어다<span class="params">()</span></span> &#123;</span><br><span class="line">    transmission.shift(Gear.DRIVE)</span><br><span class="line">    car.accelerateTo(<span class="number">30</span>)</span><br><span class="line">    transmission.shift(Gear.PARK)</span><br><span class="line">    assertThat(transmission.gear, CoreMatchers.equalTo(Gear.DRIVE))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> 기어를_주행으로_바꾸고_30mph로_가속할_때_브레이크_정지_후_기어를_주차로_바꾸면_기어는_주차기어다<span class="params">()</span></span> &#123;</span><br><span class="line">    transmission.shift(Gear.DRIVE)</span><br><span class="line">    car.accelerateTo(<span class="number">30</span>)</span><br><span class="line">    car.brakeToStop()</span><br><span class="line">    transmission.shift(Gear.PARK)</span><br><span class="line">    assertThat(transmission.gear, CoreMatchers.equalTo(Gear.PARK))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-E-xistence-존재"><a href="#7-5-E-xistence-존재" class="headerlink" title="7.5 [E]xistence 존재"></a>7.5 [E]xistence 존재</h3><ul><li><em>주어진 값이 존재하는가?</em><ul><li>null, 0, 혹은 비어 있는 경우</li></ul></li><li><strong>우리는 프로그래머로서 보통 행복 경로를 만드는 데 무엇보다 주력한다</strong><ul><li>예상하는 데이터가 없을 때 발생하는 불행 경로는 그 다음에 생각하고는 한다.</li></ul></li><li><strong>호출된 메서드가 null을 반환하거나, 기대하는 파일이 없거나, 네트워크가 다운되었을 때 어떤 일이 일어나는지 확인하는 테스트를 작성해라!</strong></li></ul><blockquote><p>작성한 메서드가 홀로 설 수 있도록!</p></blockquote><h3 id="7-6-C-ardinality-기수"><a href="#7-6-C-ardinality-기수" class="headerlink" title="7.6 [C]ardinality 기수"></a>7.6 [C]ardinality 기수</h3><ul><li><em>정확히 충분한 값들이 있는가?</em></li><li>울타리 기둥 오류는 한 끗 차이로 발생하는 수많은 경우 중 한 가지를 의미한다.<ul><li>개수를 어떻게 잘 세어 테스트할지 고민해 보고, 얼마나 많은지 확인해 보라</li></ul></li></ul><h4 id="팬케이크-가게의-작업-목록-도출"><a href="#팬케이크-가게의-작업-목록-도출" class="headerlink" title="팬케이크 가게의 작업 목록 도출"></a>팬케이크 가게의 작업 목록 도출</h4><ul><li>상위 열 개의 음식 목록을 유지해야 함</li><li>주문이 나올 때마다 이 상위 목록을 갱신하여 실시간으로 팬케이크 보스 아이폰 앱에 결과를 표시한다.</li></ul><blockquote><p>목록에 항목이 하나도 없을 때 보고서 출력</p><p>목록에 항목이 한 개만 있을 때 보고서 출력</p><p>목록에 항목이 없을 때 한 항목 추가</p><p>목록에 항목이 하나만 있을 때 한 항목 추가하기</p><p>목록에 항목이 아직 열 개 미만일 때 한 항목 추가하기</p><p>목록에 항목이 이미 열 개가 있을 때 한 항목 추가하기</p></blockquote><ul><li>만약 상위 20개의 목록으로 바뀐다면?<ul><li>아니면 5개? -&gt; 같은 상수를 사용하고 있으므로 <strong>0, 1, n</strong>이라는 <strong>경계 조건에만 집중하고</strong> n은 비즈니스 요구 사항에 따라 바뀔 수 있다.</li></ul></li></ul><h3 id="7-7-T-ime-시간"><a href="#7-7-T-ime-시간" class="headerlink" title="7.7 [T]ime 시간"></a>7.7 [T]ime 시간</h3><ul><li><em>모든 것이 순서대로 일어나는가? 정확한 시간에? 정시에?</em><ul><li>상대적 시간(시간 순서)</li><li>절대적 시간(측정된 시간)</li><li>동시성 문제들</li></ul></li><li>login()이 먼저 logout()이 나중</li><li>open() 이후에 read() 호출</li><li>수명이 짧은 자원에 대해 코드가 얼마나 기다릴 지 -&gt; 타임아웃도 상대적인 시간 문제<ul><li>발생하지 않을 일을 기다리느라 코드가 무한 대기에 빠지지는 않았는지</li></ul></li></ul><blockquote><p>True Or False? 한 해의 모든 날은 항상 24시간?(윤초는 세지 않음)</p></blockquote><ul><li>정답은 상황에 따라 <strong>다르다</strong><ul><li>UTC(국제표준시)에서는 긍정이다.</li><li>DST(일광시간절약제)가 관찰되는 지역에서는 <strong>False</strong><ul><li>3월 하루는 23시간이고 11월 하루는 25시간이다…</li></ul></li></ul></li><li>때가 되면 여기저기 깨진 코드가 많아진다.</li><li>시스템 시계에 의존하는 테스트를 작성하는 해결책도 있다.<ul><li>대신 테스트 코드에 통제할 수 있는 곳에서 얻어 오는 시간을 사용하도록 애플리케이션을 변경한다. (<em>챕터 5.4 참고</em>)</li></ul></li></ul><h4 id="동시성과-동기화된-접근-Context-문맥-에-관하여…"><a href="#동시성과-동기화된-접근-Context-문맥-에-관하여…" class="headerlink" title="동시성과 동기화된 접근 Context(문맥?)에 관하여…"></a>동시성과 동기화된 접근 Context(문맥?)에 관하여…</h4><ul><li>동시에 같은 객체를 다수의 스레드가 접근한다면?</li><li>어떤 전역 혹은 인스턴스 수준의 데이터나 메서드에 동기화를 해야 할까?</li><li>파일 혹은 하드웨어에 외적인 접근은 어떻게 처리?</li><li><strong>클라이언트에 동시성 요구 사항이 있다면 다수의 클라이언트 스레드를 보여주는 테스트를 작성할 필요가 있다.</strong></li></ul><h3 id="7-8-마무리"><a href="#7-8-마무리" class="headerlink" title="7.8 마무리"></a>7.8 마무리</h3><ul><li>모든 경계를 알 필요가 있다. 테스트에서는 더욱…</li><li>경계 조건들은 자주 고약하고 작은 결함들을 만들어 내는 곳이다.</li><li><strong>CORRECT</strong> 약어를 통해 단위 테스트 작성 시 고려해야 하는 경계들을 기억하는데 도움을 받자.</li></ul>]]></content>
      
      
      <categories>
          
          <category> JUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
            <tag> test </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter에서 안드로이드 함수 사용하기</title>
      <link href="/2021/12/21/flutter/flutter_android_method/"/>
      <url>/2021/12/21/flutter/flutter_android_method/</url>
      
        <content type="html"><![CDATA[<ul><li>android 폴더 안에 있는 MainActivity 클래스가 FlutterActivity라는 걸 상속하고 있는데 이걸 통해 구현을 할 것이다.</li></ul><h3 id="예제-작성해보기"><a href="#예제-작성해보기" class="headerlink" title="예제 작성해보기"></a>예제 작성해보기</h3><ul><li>연습해 볼 코드는 simpletodo 라는 이름으로 개발 중인 단순한 앱에 넣어본다.</li></ul><blockquote><p>먼저 안드로이드에서 flutter와 같은 CHANNEL 값으로 맞춰준다.</p></blockquote><blockquote><p>method 이름이 같지만 기능이 달라야 할 다른 채널을 위한 게 아닐까 싶다.</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.flutter.embedding.android.FlutterActivity</span><br><span class="line"><span class="keyword">import</span> io.flutter.embedding.engine.FlutterEngine</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.MethodChannel</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span>: <span class="type">FlutterActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> CHANNEL = <span class="string">&quot;flutter.android.channel&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">configureFlutterEngine</span><span class="params">(flutterEngine: <span class="type">FlutterEngine</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.configureFlutterEngine(flutterEngine)</span><br><span class="line">        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL)</span><br><span class="line">            .setMethodCallHandler &#123; call, result -&gt;</span><br><span class="line">                run &#123;</span><br><span class="line">                    <span class="keyword">if</span> (call.method == <span class="string">&quot;getMyCacheDirectory&quot;</span>) &#123;</span><br><span class="line">                        <span class="comment">// 이 부분은 아예 call.method 값과 동일하게 함수로 묶어주면 많아졌을 때 보기 깔끔하겠다.</span></span><br><span class="line">                        <span class="keyword">val</span> path = applicationContext.cacheDir.absolutePath</span><br><span class="line">                        <span class="keyword">val</span> <span class="keyword">data</span> = HashMap&lt;String, Any?&gt;()</span><br><span class="line">                        <span class="keyword">data</span>.put(<span class="string">&quot;path&quot;</span>, path)</span><br><span class="line">                        result.success(<span class="keyword">data</span>)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        result.error(<span class="string">&quot;errorCode&quot;</span>, <span class="string">&quot;errorMessage&quot;</span>, <span class="string">&quot;errorDetail&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flutter에서는 원하는 코드에서 선언 되어 있는 method를 불러오면 되겠다.</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:simpletodo/utils/Log.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainController</span> <span class="keyword">extends</span> <span class="title">GetxController</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> platform = MethodChannel(<span class="string">&#x27;flutter.android.channel&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  getMyCacheDirectory() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> result = <span class="keyword">await</span> platform.invokeMethod(<span class="string">&quot;getMyCacheDirectory&quot;</span>);</span><br><span class="line">    Log.d(<span class="string">&#x27;myCacheDir: <span class="subst">$result</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>이런 식으로 구현하면 응답값을 얻을 수 있겠다.</li></ul><h4 id="관련-문서"><a href="#관련-문서" class="headerlink" title="관련 문서"></a>관련 문서</h4><ul><li><a href="https://docs.flutter.dev/development/platform-integration/platform-channels">https://docs.flutter.dev/development/platform-integration/platform-channels</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PhotoSchool App</title>
      <link href="/2021/12/20/flutter/photoschool/"/>
      <url>/2021/12/20/flutter/photoschool/</url>
      
        <content type="html"><![CDATA[<h3 id="포토스쿨-SNS-App"><a href="#포토스쿨-SNS-App" class="headerlink" title="포토스쿨 SNS App"></a>포토스쿨 SNS App</h3><ul><li>웅진씽크빅 인턴 과제로 진행한 프로젝트</li><li>진행 기간: 2달 이내</li><li>TIL에 남긴 이력<ul><li>기획: <a href="https://boring-km.github.io/TIL/#/./TIL/2021/210610">https://boring-km.github.io/TIL/#/./TIL/2021/210610</a></li><li>구조: <a href="https://boring-km.github.io/TIL/#/./TIL/2021/210907">https://boring-km.github.io/TIL/#/./TIL/2021/210907</a></li></ul></li><li>실제로 구현하면서 회사 서비스와 연동하는 부분이 좀 생겼고, 기능도 많이 추가가 된 편이다.</li></ul><h3 id="관련-코드"><a href="#관련-코드" class="headerlink" title="관련 코드"></a>관련 코드</h3><ul><li>현재는 내부서버 닫혀있어서 사용 못함 (띄울 수 있는 ec2 인스턴스가 없음 ㅠㅠ)</li><li>애초에 회사 검증 서버라서 외부에서 이용도 못함</li><li>서버: <a href="https://github.com/boring-km/photoschool-server">https://github.com/boring-km/photoschool-server</a></li><li>앱: <a href="https://github.com/boring-km/photoschool-app">https://github.com/boring-km/photoschool-app</a><ul><li>Web 부분은 dart2js를 사용해서 별도로 배포했기 때문에 프로젝트는 앱 쪽에 있다.</li></ul></li></ul><h3 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h3><ul><li>Flutter로 프로젝트를 본격적으로 만든 첫번째 앱이라 봐도 무방한 느낌</li><li>UI적으로 다양한 시도(?)를 해본 것 같음</li><li>아직 Flutter 프로젝트의 구조에 대한 이해가 부족해서 코드가 엉망인 부분이 많았다</li><li>GCP에 있는 무료 서비스들이 많아 생각보다 손쉽게 해결한 기능들도 많았던 것 같다.</li><li>개발하면서 Flutter Web이 본격적으로 서비스를 시작했는데, 생각보다 앱에서 쓰이는 부분과 웹은 많이 다른 느낌이다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dev </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code 12장 - 창발성</title>
      <link href="/2021/11/19/clean_code/chapter12/"/>
      <url>/2021/11/19/clean_code/chapter12/</url>
      
        <content type="html"><![CDATA[<ul><li>창발적 설계로 깔끔한 코드를 구현하자</li><li>단순한 설계 규칙 1: 모든 테스트를 실행하라</li><li>단순한 설계 규칙 2~4: 리팩터링</li><li>중복을 없애라</li><li>표현하라</li><li>클래스와 메서드 수를 최소로 줄여라</li><li>결론</li></ul><h2 id="창발적-설계로-깔끔한-코드를-구현하자"><a href="#창발적-설계로-깔끔한-코드를-구현하자" class="headerlink" title="창발적 설계로 깔끔한 코드를 구현하자"></a>창발적 설계로 깔끔한 코드를 구현하자</h2><ul><li>단순한? 설계 규칙 4가지</li><li><strong>모든 테스트를 실행한다.</strong></li><li><strong>중복을 없앤다.</strong></li><li><strong>프로그래머 의도를 표현한다.</strong></li><li><strong>클래스와 메서드 수를 최소로 줄인다.</strong></li></ul><h3 id="진강민-추가-Android-및-Flutter-개발에서-로직-테스트-뿐만-아니라-UI-Test-손으로-익히기"><a href="#진강민-추가-Android-및-Flutter-개발에서-로직-테스트-뿐만-아니라-UI-Test-손으로-익히기" class="headerlink" title="진강민 추가: Android 및 Flutter 개발에서 로직 테스트 뿐만 아니라 UI Test 손으로 익히기!!!"></a>진강민 추가: Android 및 Flutter 개발에서 로직 테스트 뿐만 아니라 UI Test 손으로 익히기!!!</h3><h2 id="단순한-설계-규칙-1-모든-테스트를-실행하라"><a href="#단순한-설계-규칙-1-모든-테스트를-실행하라" class="headerlink" title="단순한 설계 규칙 1: 모든 테스트를 실행하라"></a>단순한 설계 규칙 1: 모든 테스트를 실행하라</h2><ul><li>문서로는 시스템을 완벽하게 설계했지만,<br>시스템이 의도한 대로 돌아가는지 검증할 간단한 방법이 없다면,<br>문서 작성을 위해 투자한 노력에 대한 가치는 인정받기 힘들다.</li><li>모든 테스트 케이스를 항상 통과하는 시스템은 ‘테스트가 가능한 시스템’이다.</li><li>테스트가 가능한 시스템을 만들려고 애쓰면 설계 품질이 더불어 높아진다.</li><li><strong>크기가 작고 목적 하나만 수행하는 클래스가 나온다.</strong></li><li><strong>SRP를 준수하는 클래스는 테스트가 훨씬 쉽다.</strong></li><li><strong>즉, 테스트 케이스를 작성하면 설계 품질이 높아진다.</strong></li></ul><h2 id="단순한-설계-규칙-2-4-리팩터링"><a href="#단순한-설계-규칙-2-4-리팩터링" class="headerlink" title="단순한 설계 규칙 2~4: 리팩터링"></a>단순한 설계 규칙 2~4: 리팩터링</h2><ul><li>테스트 케이스를 모두 작성했따면 코드와 클래스를 정리해도 괜찮다.</li><li><strong>코드를 정리하면서 시스템이 깨질까 걱정할 필요가 없다. 테스트 케이스가 있으니까!</strong></li><li>소프트웨어 설계 품질을 높이는 기법이라면 무엇이든 적용해도 괜찮다.</li><li>응집도를 높이고, 결합도를 낮추고, 관심사를 분리하고, 시스템 관심사를 모듈로 나누고, 함수와 클래스 크기를 줄이고,<br>더 나은 이름을 선택하는 등 다양한 기법을 동원한다.</li></ul><h2 id="중복을-없애라"><a href="#중복을-없애라" class="headerlink" title="중복을 없애라"></a>중복을 없애라</h2><ul><li>구현 중복도 중복의 한 형태다. 중복은 다 피하자</li><li>깔끔한 시스템을 만들려면 단 몇 줄이라도 중복을 제거하겠다는 의지가 필요하다.</li><li>‘소규모 재사용’은 시스템 복잡도를 극적으로 줄여주고, 이를 제대로 익혀야 대규모 재사용이 가능하다.</li><li><em><strong>TEMPLATE METHOD</strong></em> 패턴은 고차원 중복을 제거할 목적으로 자주 사용하는 기법이다.</li></ul><h2 id="표현하라"><a href="#표현하라" class="headerlink" title="표현하라"></a>표현하라</h2><ul><li>자신이 이해하는 코드를 짜기는 쉽다.</li><li>하지만 나중에 코드를 유지보수할 사람이 코드를 짜는 사람만큼이나 문제를 깊이 이해할 가능성은 희박하다.</li><li>소프트웨어 프로젝트 비용 중 대다수는 장기적인 유지보수에 들어간다.</li><li>코드를 변경하면서 버그의 싹을 심지 않으려면 유지보수 개발자가 시스템을 제대로 이해해야 한다.</li><li>그러므로 코드는 개발자의 의도를 분명하게 표현해야 한다.</li></ul><h3 id="명백하게-코드-짜기"><a href="#명백하게-코드-짜기" class="headerlink" title="명백하게 코드 짜기"></a>명백하게 코드 짜기</h3><ol><li>좋은 이름 선택</li><li>함수와 클래스 크기를 가능한 줄인다.</li><li>표준 명칭을 사용한다.</li><li>단위 테스트 케이스를 꼼꼼히 작성한다.</li><li><strong>표현력을 높이는 가장 중요한 방법은 노력이다.</strong></li></ol><h2 id="클래스와-메서드-수를-최소로-줄여라"><a href="#클래스와-메서드-수를-최소로-줄여라" class="headerlink" title="클래스와 메서드 수를 최소로 줄여라"></a>클래스와 메서드 수를 최소로 줄여라</h2><ul><li>중복을 제거하고, 의도를 표현하고, SRP를 준수한다는 기본적인 개념도 극단으로 치달으면 득보다 실이 많아진다.</li><li>목표는 함수와 클래스 크기를 작게 유지하면서 동시에 시스템 크기도 작게 유지하는 데 있다.</li><li>클래스와 함수 수를 줄이는 작업도 중요하지만, 테스트 케이스를 만들고 중복을 제거하고 의도를 표현하는 작업이 더 중요하다는 뜻이다.</li></ul><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>경험을 대신할 단순한 개발 기법? 없다!</li><li>단순한 설계 규칙을 따른다면 엄청나게 우수한 기법과 원칙을 단번에 활용할 수 있다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Clean_Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6. Right-BICEP: 무엇을 테스트할 것인가?</title>
      <link href="/2021/11/09/junit/junit_06/"/>
      <url>/2021/11/09/junit/junit_06/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="https://github.com/boring-km/JunitPractice">https://github.com/boring-km/JunitPractice</a></p></li><li><p>Right: 결과가 올바른가?</p></li><li><p>B: 경계 조건은 맞는가?</p></li><li><p>I: 역 관계를 검사할 수 있는가?</p></li><li><p>C: 다른 수단을 활용하여 교차 검사할 수 있는가?</p></li><li><p>E: 오류 조건을 강제로 일어나게 할 수 있는가?</p></li><li><p>P: 성능 조건은 기준에 부합하는가?</p></li></ul><h3 id="6-1-BICEP-결과가-올바른가"><a href="#6-1-BICEP-결과가-올바른가" class="headerlink" title="6.1 BICEP: 결과가 올바른가?"></a>6.1 BICEP: 결과가 올바른가?</h3><ul><li><strong>무엇보다도 먼저 기대한 결과를 산출하는지 검증할 수 있어야 한다</strong></li><li>어떤 작은 부분의 코드에 대해 행복 경로 테스트를 할 수 없다면 그 내용을 완전히 이해하지 못한 것이다.</li></ul><h3 id="6-2-B-경계-조건은-맞는가"><a href="#6-2-B-경계-조건은-맞는가" class="headerlink" title="6.2 B: 경계 조건은 맞는가?"></a>6.2 B: 경계 조건은 맞는가?</h3><ul><li>코드에 있는 분명한 행복 경로의 경계 조건에 걸리지 않는다면…?</li></ul><h4 id="경계-조건들"><a href="#경계-조건들" class="headerlink" title="경계 조건들"></a>경계 조건들</h4><ul><li>모호하고 일관성 없는 값들 (예: 특수문자 포함된 파일이름)</li><li>잘못된 양식의 데이터 (예: 이메일 주소 형태가 안 맞는 이메일 주소)</li><li>수치적 오버플로를 일으키는 계산</li><li>0, 0.0, “”, null</li><li>이상적인 기댓값을 훨씬 벗어나는 값</li><li>중복을 허용해서는 안 되는 목록에 중복 값이 있는 경우</li><li>정렬이 안 된 정렬 리스트 or 정렬 알고리즘에 이미 정렬된 입력 값</li><li>시간 순이 맞지 않는 경우 (순서가 정해진 작업을 순서대로 안하는 경우)</li></ul><h3 id="6-3-경계-조건에서는-CORRECT를-기억하라"><a href="#6-3-경계-조건에서는-CORRECT를-기억하라" class="headerlink" title="6.3 경계 조건에서는 CORRECT를 기억하라"></a>6.3 경계 조건에서는 CORRECT를 기억하라</h3><ul><li>Conformance(준수): 값이 기대한 양식을 준수하고 있는가?</li><li>Ordering(순서): 값의 집합이 적절하게 정렬되거나 정렬되지 않았나?</li><li>Range(범위): 이상적인 최솟값과 최댓값 안에 있는가?</li><li>Reference(참조): 코드 자체에서 통제할 수 없는 어떤 외부 참조를 포함하고 있는가?</li><li>Existence(존재): 값이 존재하는가(널이 아니거나(non-null), 0이 아니거나(nonzero), 집합에 존재하는가 등)</li><li>Cardinality(기수): 정확히 충분한 값들이 있는가?</li><li>Time(절대적 혹은 상대적 시간): 모든 것이 순서대로 일어나는가? 정확한 시간에? 정시간에?</li></ul><h3 id="6-4-I-역-관계를-검사할-수-있는가"><a href="#6-4-I-역-관계를-검사할-수-있는가" class="headerlink" title="6.4 I: 역 관계를 검사할 수 있는가?"></a>6.4 I: 역 관계를 검사할 수 있는가?</h3><ul><li>NewtonTest.kt 참고</li></ul><h3 id="6-5-C-다른-수단을-활용하여-교차-검사할-수-있는가"><a href="#6-5-C-다른-수단을-활용하여-교차-검사할-수-있는가" class="headerlink" title="6.5 C: 다른 수단을 활용하여 교차 검사할 수 있는가?"></a>6.5 C: 다른 수단을 활용하여 교차 검사할 수 있는가?</h3><ul><li>코드를 구현하는 가장 좋은 방법을 프로덕션 코드로 사용하고 있다면, 그 코드를 구현하는 조금 다른 방법으로도 같은 결과가 나오는지 확인해보며 교차 검사</li><li>(근데 이렇게까지는 좀처럼 잘 안할듯)</li></ul><h3 id="6-6-E-오류-조건을-강제로-일어나게-할-수-있는가"><a href="#6-6-E-오류-조건을-강제로-일어나게-할-수-있는가" class="headerlink" title="6.6 E: 오류 조건을 강제로 일어나게 할 수 있는가?"></a>6.6 E: 오류 조건을 강제로 일어나게 할 수 있는가?</h3><ul><li>테스트에서 오류들을 강제로 발생시켜야 한다.</li><li>고려해볼 시나리오들<ul><li>메모리가 가득 찰 때</li><li>디스크 공간이 가득 찰 때</li><li>벽시계 시간에 관한 문제들 (서버와 클라이언트 간 시간이 달라서 발생하는 문제들)</li><li>네트워크 가용성 및 오류들</li><li>시스템 로드</li><li>제한된 색상 팔레트</li><li>매우 높거나 낮은 비디오 해상도</li></ul></li><li>좋은 단위 테스트는 단지 코드에 존재하는 로직 전체에 대한 커버리지를 달성하는 것에 그치지 않고 끔찍한 결함들에 대한 대비도 해야한다.</li></ul><h3 id="6-7-P-성능-조건은-기준에-부합하는가"><a href="#6-7-P-성능-조건은-기준에-부합하는가" class="headerlink" title="6.7 P: 성능 조건은 기준에 부합하는가?"></a>6.7 P: 성능 조건은 기준에 부합하는가?</h3><ul><li>추측만으로 성능 문제에 바로 대응하기보다는 단위 테스트를 설계하여 진짜 문제가 어디에 있으며 예상한 변경 사항으로 어떤 차이가 생겼는지 파악해야 한다.</li><li>어떤 코드가 특정 시간 안에 실행되는지 실행시간을 재서 확인해보는 테스트</li><li>최대한 프로덕션 환경과 비슷한 환경에서 테스트를 해서 성능 테스트를 진행해본다.</li><li><strong>실제 데이터로 해야하며 추측을 기반으로 하면 안된다.</strong></li></ul><h3 id="6-8-결론"><a href="#6-8-결론" class="headerlink" title="6.8 결론"></a>6.8 결론</h3><ul><li>Right-BICEP 암기법을 활용하여 행복 경로, 경계 조건과 오류 조건을 다루는 테스트를 작성해야 함을 기억하자</li></ul>]]></content>
      
      
      <categories>
          
          <category> JUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
            <tag> test </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템20. 추상 클래스보다는 인터페이스를 우선하라</title>
      <link href="/2021/10/22/effective_java/2021-10-22-item20/"/>
      <url>/2021/10/22/effective_java/2021-10-22-item20/</url>
      
        <content type="html"><![CDATA[<ul><li>자바 8부터 인터페이스도 default method를 제공할 수 있는 공통점 있음</li><li>하지만 가장 큰 차이점은 추상 클래스가 정의한 타입을 구현하는 클래스는 반드시 추상 클래스의 하위 클래스가 되는 것<ul><li>단일 상속만 지원하는 자바에 있어 커다란 제약이다.</li><li>기존 클래스에 추상 클래스를 끼워넣기는 어렵다.</li></ul></li><li><strong>반면, 기존 클래스에도 손쉽게 새로운 인터페이스를 구현해넣을 수 있다.</strong></li><li><strong>인터페이스는 믹스인(mixin) 정의에 안성맞춤이다.</strong><ul><li>대상 타입의 주된 기능에 선택적 행위를 제공한다고 선언하는 효과</li></ul></li><li><strong>인터페이스로는 계층구조가 없는 타입 프레임워크를 만들 수 있다.</strong><ul><li>n개의 인터페이스를 상속하는 인터페이스를 만들어서 애매하게 구분하기 어려운 개념들을 혼합해 사용 가능</li></ul></li><li><strong>래퍼 클래스 관용구와 함께 사용하면 인터페이스는 기능을 향상시키는 안전하고 강력한 수단이 된다.</strong></li><li>디폴트 메서드를 추가할 때는 javadoc 문서도 같이…</li></ul><h3 id="템플릿-메서드-패턴"><a href="#템플릿-메서드-패턴" class="headerlink" title="템플릿 메서드 패턴"></a>템플릿 메서드 패턴</h3><ul><li>인터페이스와 추상 골격 구현 클래스를 함께 제공하는 방법</li><li>인터페이스로 타입을 정의하고, 필요하면 디폴트 메서드 몇 개도 함께 제공<ul><li>골격 구현 클래스는 나머지 메서드들까지 구현</li></ul></li><li>관례상 인터페이스 이름이 Interface 라면, 골격 구현 클래스 이름은 AbstractInterface 이다.</li></ul><h4 id="List-구현체를-반환하는-정적-팩터리-메서드"><a href="#List-구현체를-반환하는-정적-팩터리-메서드" class="headerlink" title="List 구현체를 반환하는 정적 팩터리 메서드"></a>List 구현체를 반환하는 정적 팩터리 메서드</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.AbstractList;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">intArrayAsList</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;    <span class="comment">// Adapter 패턴이기도 하다.</span></span><br><span class="line">    Objects.requireNonNull(a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AbstractList</span>&lt;Integer&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a[i];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Integer <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, Integer value)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oldVal</span> <span class="operator">=</span> a[index];</span><br><span class="line">        a[index] = value;   <span class="comment">// 오토언박싱</span></span><br><span class="line">        <span class="keyword">return</span> oldVal;      <span class="comment">// 오토박싱</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a.length;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>추상 클래스처럼 구현을 도와주는 동시에, 추상 클래스로 타입을 정의할 때 따라오는 심각한 제약에서는 자유롭다.</li><li>구조상 골격 구현을 확장하지 못하는 처지라면 인터페이스를 직접 구현해야 한다.</li></ul><h3 id="골격-구현-클래스-예시"><a href="#골격-구현-클래스-예시" class="headerlink" title="골격 구현 클래스 예시"></a>골격 구현 클래스 예시</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractMapEntry</span>&lt;K, V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K, V&gt; &#123;</span><br><span class="line">  <span class="comment">// setValue를 사용하려면 반드시 재정의해야함</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> V <span class="title function_">setValue</span><span class="params">(V value)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    Map.Entry&lt;?, ?&gt; e = (Map.Entry) o;</span><br><span class="line">    <span class="keyword">return</span> Objects.equals(e.getKey(), getKey())</span><br><span class="line">            &amp;&amp; Objects.equals(e.getValue(), getValue());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hashCode(getKey())</span><br><span class="line">            ^ Objects.hashCode(getValue());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getKey() + <span class="string">&quot;=&quot;</span> + getValue();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Map.Entry 인터페이스나 그 하위 인터페이스로는 이 골격 구현을 제공할 수 없다.</li><li>디폴트 메서드는 equals, hashCode, toString 같은 Object 메서드를 제정의할 수 없기 때문이다.</li><li><strong>단순 구현은 골격 구현의 작은 변종</strong></li><li>단순 구현은 추상 클래스가 아니기 때문에 가장 단순한 구현이며, 그대로 써도 되고 필요에 따라 확장해도 된다.</li></ul><h3 id="핵심-정리"><a href="#핵심-정리" class="headerlink" title="핵심 정리"></a>핵심 정리</h3><ul><li>일반적으로 다중 구현용 타입으로는 인터페이스가 가장 적합하다.</li><li>복잡한 인터페이스라면 구현하는 수고를 덜어주는 골격 구현을 함께 제공하는 방법을 꼭 고려해보자.</li><li>골격 구현은 ‘가능한 한’ 인터페이스의 디폴트 메서드로 제공하여 그 인터페이스를 구현한 모든 곳에서 활용하도록 하는 것이 좋다.<ul><li>구현상 제약 때문에 추상 클래스로 제공하는 경우가 흔하기 때문에…</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템19. 상속을 고려해 설계하고 문서화하라. 그러지 않았다면 상속을 금지하라</title>
      <link href="/2021/10/18/effective_java/2021-10-18-item19/"/>
      <url>/2021/10/18/effective_java/2021-10-18-item19/</url>
      
        <content type="html"><![CDATA[<ul><li><p>상속을 고려한 설계와 문서화?</p></li><li><p><em>깊게는 생각하지 않고 넘어가자~</em></p></li><li><p><strong>상속용 클래스는 재정의할 수 있는 메서드들을 내부적으로 어떻게 이용하는지 문서로 남겨야 한다.</strong></p></li><li><p>재정의 가능 메서드를 호출할 수 있는 모든 상황을 문서로 남겨야 한다.</p></li><li><p><strong>좋은 API 문서란 ‘어떻게’가 아닌 ‘무엇’을 하는지를 설명해야 한다.</strong></p></li><li><p><strong>클래스의 내부 동작 과정 중간에 끼어들 수 있는 훅(hook)을 잘 선별하여 protected 메서드 형태로 공개해야 할 수도 있다.</strong></p><ul><li>드물게는 protected 필드로…</li></ul></li></ul><h3 id="상속용-클래스를-시험하는-방법은-직접-하위-클래스를-만들어보는-것이-‘유일’하다"><a href="#상속용-클래스를-시험하는-방법은-직접-하위-클래스를-만들어보는-것이-‘유일’하다" class="headerlink" title="상속용 클래스를 시험하는 방법은 직접 하위 클래스를 만들어보는 것이 ‘유일’하다"></a>상속용 클래스를 시험하는 방법은 직접 하위 클래스를 만들어보는 것이 ‘유일’하다</h3><ul><li>검증을 위해 하위 클래스 3개 정도가 적당하다.</li><li>이 중 하나 이상은 제3자가 작성해봐야 한다.</li><li>널리 쓰일 클래스를 상속용으로 설계한다면 문서화한 모든 내용을 영원히 책임져야 하며, 그 클래스의 성능과 기능에 영원한 족쇄가 될 수도 있다.</li><li><strong>상속용으로 설계한 클래스는 배포 전에 반드시 하위 클래스를 만들어 검증해야 한다.</strong></li></ul><h3 id="상속용-클래스의-생성자는-직접적으로든-간접적으로든-재정의-가능-메서드를-호출해서는-안-된다"><a href="#상속용-클래스의-생성자는-직접적으로든-간접적으로든-재정의-가능-메서드를-호출해서는-안-된다" class="headerlink" title="상속용 클래스의 생성자는 직접적으로든 간접적으로든 재정의 가능 메서드를 호출해서는 안 된다"></a>상속용 클래스의 생성자는 직접적으로든 간접적으로든 재정의 가능 메서드를 호출해서는 안 된다</h3><ul><li>프로그램 오동작 유발함</li><li>상위 클래스의 생성자가 하위 클래스의 생성자보다 먼저 동작하기 때문에 하위 클래스에서 메서드를 재정의하기도 전에 동작해서 오동작한다.</li><li>private, final, static 메서드는 재정의가 불가능하니 생성자에서 안심하고 호출해도 된다.</li></ul><h3 id="clone과-readObject-모두-직접적-x2F-간접적으로든-재정의-가능-메서드를-호출하면-안-된다"><a href="#clone과-readObject-모두-직접적-x2F-간접적으로든-재정의-가능-메서드를-호출하면-안-된다" class="headerlink" title="clone과 readObject 모두 직접적&#x2F;간접적으로든 재정의 가능 메서드를 호출하면 안 된다"></a>clone과 readObject 모두 직접적&#x2F;간접적으로든 재정의 가능 메서드를 호출하면 안 된다</h3><ul><li>readObject: 하위 클래스의 상태가 미처 다 역직렬화되기 전에 재정의한 메서드부터 호출하게 되어 오작동</li><li>clone: 하위 클래스의 clone 메서드가 복제본의 상태를 (올바른 상태로) 수정하기 전에 재정의한 메서드를 호출한다.<ul><li>완벽히 깊은 복제가 아니어서 원본 객체에 손을 댈 수도 있다.</li></ul></li></ul><h3 id="상속용으로-설계하지-않은-클래스는-상속을-금지한다"><a href="#상속용으로-설계하지-않은-클래스는-상속을-금지한다" class="headerlink" title="상속용으로 설계하지 않은 클래스는 상속을 금지한다"></a>상속용으로 설계하지 않은 클래스는 상속을 금지한다</h3><ol><li>클래스를 final로 선언해서 상속 막기</li><li>모든 생성자를 private이나 package-private으로 선언하고 public 정적 팩터리를 만들어주는 방법이다.</li></ol><h3 id="핵심-정리"><a href="#핵심-정리" class="headerlink" title="핵심 정리"></a>핵심 정리</h3><ul><li>상속용 클래스를 설계하기란 결코 만만치 않다.</li><li>클래스 내부에서 스스로를 어떻게 사용하는지(자기사용 패턴) 모두 문서로 남겨야 한다.</li><li>문서화한 내용은 그 클래스가 쓰이는 한 반드시 지켜야 한다.</li><li>그렇지 않으면 내부 구현 방식을 믿고 활용하던 하위 클래스를 오동작하게 만든다.</li><li>클래스를 확장해야 할 명확한 이유가 떠오르지 않으면 상속을 금지하는 편이 낫다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템18. 상속보다는 컴포지션을 사용하라</title>
      <link href="/2021/10/14/effective_java/2021-10-14-item18/"/>
      <url>/2021/10/14/effective_java/2021-10-14-item18/</url>
      
        <content type="html"><![CDATA[<ul><li>그냥 상속은 문제가 많다…</li><li><strong>메서드 호출과 달리 상속은 캡슐화를 깨뜨린다.</strong></li><li>상위 클래스의 변경으로 하위 클래스에 손을 대지 않아도 오작동할 가능성 있다.</li><li>그 외에도 상위 클래스를 변경하다가 하위 클래스의 요소와 충돌할 가능성도 있음</li></ul><h3 id="컴포지션-상속을-피해가자"><a href="#컴포지션-상속을-피해가자" class="headerlink" title="컴포지션 - 상속을 피해가자"></a>컴포지션 - 상속을 피해가자</h3><ul><li>새로운 클래스를 만들고 private 필드로 기존 클래스의 인스턴스를 참조하게 하자.</li><li>기존 클래스가 새로운 클래스의 구성요소로 쓰인다는 의미에서 <strong>컴포지션</strong>이라 한다.</li><li><strong>전달(forwarding)</strong>: 새로운 클래스의 인스턴스 메서드들은 기존 클래스에 대응하는 메서드를 호출해 그 결과를 반환한다.<ul><li>새로운 클래스의 메서드를 전달 메서드라 한다.</li></ul></li><li>컴포지션을 사용할 대부분의 상황에서 상속을 사용하면 내부 구현을 불필요하게 노출하는 꼴이다.<ul><li>클라이언트가 노출된 내부에 직접 접근할 수도 있다. (서버 클라이언트의 그 클라이언트 아님 주의)</li><li>써야할 자식 클래스의 메서드를 사용하는게 아니라 실수로 비슷한 이름의 상위 클래스의 메서드를 사용해버리면 안되니깐~</li></ul></li></ul><h3 id="wrapper-class-Decorator-pattern"><a href="#wrapper-class-Decorator-pattern" class="headerlink" title="wrapper class (Decorator pattern)"></a>wrapper class (Decorator pattern)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstrumentedSet</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">ForwardingSet</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">addCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InstrumentedSet</span><span class="params">(Set&lt;E&gt; s)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        addCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.add(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        addCount += c.size();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAddCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> addCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForwardingSet</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;E&gt; s;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ForwardingSet</span><span class="params">(Set&lt;E&gt; s)</span> &#123;    <span class="comment">// Set 인스턴스만 사용</span></span><br><span class="line">        <span class="built_in">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// methods...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Set의 인스턴스를 인수로 받는 생성자를 제공한다.</li><li>임의의 Set에 계측(instrumental) 기능을 덧씌워서 새로운 Set으로 만드는 것이 핵심!</li><li>콜백 프레임워크에서는 맞지 않다.</li></ul><h3 id="핵심-정의"><a href="#핵심-정의" class="headerlink" title="핵심 정의"></a>핵심 정의</h3><ul><li>상속은 강력하지만 캡슐화를 해친다.</li><li>그냥 예외를 두지 말고 상속 대신 컴포지션을 사용해라</li><li>래퍼 클래스는 하위 클래스보다 견고하고 강력하다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5. 좋은 테스트의 FIRST 속성</title>
      <link href="/2021/10/05/junit/junit_05/"/>
      <url>/2021/10/05/junit/junit_05/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://github.com/boring-km/JunitPractice">https://github.com/boring-km/JunitPractice</a></li></ul><h2 id="5-1-FIRST-좋은-테스트-조건"><a href="#5-1-FIRST-좋은-테스트-조건" class="headerlink" title="5.1 FIRST: 좋은 테스트 조건"></a>5.1 FIRST: 좋은 테스트 조건</h2><blockquote><p>Fast: 빠른<br>Isolated: 고립된<br>Repeatable: 반복 가능한<br>Self-validating: 스스로 검증 가능한<br>Timely: 적시의</p></blockquote><ul><li>TDD를 적용하면 좀 더 좋게 작성할 수도…!</li></ul><h2 id="5-2-Fast-빠르게"><a href="#5-2-Fast-빠르게" class="headerlink" title="5.2 Fast: 빠르게"></a>5.2 Fast: 빠르게</h2><ul><li>테스트를 실행하는 데에 시간이 많이 걸린다면 설계가 깨끗하지 않은 것이다.</li></ul><h3 id="느린-테스트-해결"><a href="#느린-테스트-해결" class="headerlink" title="느린 테스트 해결?"></a>느린 테스트 해결?</h3><ul><li>느린 테스트에 대한 의존성을 줄여라</li><li><strong>더 많은 로직을 커버하는 소수의 빠른 테스트는 DB 호출에 의존하는 단일 테스트보다 수월하게 실행된다.</strong></li><li><strong>코드를 클린 객체 지향 설계 개념과 맞출수록 단위 테스트 작성도 쉬워진다.</strong></li></ul><h2 id="5-3-Isolated-고립시킨다"><a href="#5-3-Isolated-고립시킨다" class="headerlink" title="5.3 Isolated: 고립시킨다"></a>5.3 Isolated: 고립시킨다</h2><ul><li><strong>좋은 단위 테스트는 검증하려는 작은 양의 코드에 집중한다.</strong></li><li>테스트 대상 코드는 DB를 읽는 다른 코드와 상호 작용할 수도 있다.<ul><li>그렇게 해서 데이터 의존성은 많은 문제를 만든다.</li><li>단순히 외부 저장소와 상호 작용하게 되면 테스트가 가용성 혹은 접근성 이슈로 실패할 가능성이 높다.</li></ul></li><li><strong>좋은 단위 테스트는 다른 단위 테스트에 의존하지 않는다.</strong></li><li>어떤 순서나 시간에 관계없이 실행할 수 있어야 한다.</li><li>각 테스트가 작은 양의 동작에만 집중하면 테스트 코드를 집중적이고 독립적으로 유지하기 쉬워진다.</li><li><strong>테스트를 고립시켜 시계처럼 동작시켜라~</strong></li></ul><h2 id="5-4-Repeatable-좋은-테스트는-반복-가능해야-한다"><a href="#5-4-Repeatable-좋은-테스트는-반복-가능해야-한다" class="headerlink" title="5.4 Repeatable: 좋은 테스트는 반복 가능해야 한다."></a>5.4 Repeatable: 좋은 테스트는 반복 가능해야 한다.</h2><ul><li>반복 가능한 테스트는 실행할 때마다 결과가 같아야 한다.</li><li>따라서 반복 가능한 테스트를 만들려면 직접 통제할 수 없는 외부 환경에 있는 항목들과 격리시켜야 한다.</li><li>하지만 불가피하게 통제할 수 없는 요소와 상호 작용해야 할 때도 있다. (mock 객체)</li></ul><h3 id="시간을-활용하는-테스트-예제"><a href="#시간을-활용하는-테스트-예제" class="headerlink" title="시간을 활용하는 테스트 예제"></a>시간을 활용하는 테스트 예제</h3><ul><li>시간은 계속 흐르기 때문에 일정한 테스트가 불가능할 때가 있다.</li><li>코드가 진짜 시간을 가진 것처럼 속여보기..?</li></ul><blockquote><p><strong>직접 교재에 있는 코드 작성하려니까 추가할 게 너무 많아서 링크</strong><br><a href="https://github.com/gilbutITbook/006814/tree/master/iloveyouboss_16-branch-persistence-3">https://github.com/gilbutITbook/006814/tree/master/iloveyouboss_16-branch-persistence-3</a></p></blockquote><ul><li>QuestionController 클래스는 Clock 객체의 출처는 신경 쓰지 않고 오직 현재의 Instant 객체로만 대답한다.</li><li>DB를 동시에 변경할 수 있는 다른 개발자들과의 충돌의 피하고자 사적인 서버를 활용할 수도 있다.</li><li>유령 문제를 좇아 시간을 낭비하지 말고 테스트를 일관되게 고립시켜서 반복 가능하도록 하자.</li></ul><h2 id="5-5-Self-validating-스스로-검증-가능하다"><a href="#5-5-Self-validating-스스로-검증-가능하다" class="headerlink" title="5.5 Self-validating: 스스로 검증 가능하다"></a>5.5 Self-validating: 스스로 검증 가능하다</h2><ul><li><strong>단위 테스트는 시간을 소모하는 것이 아닌 절약하는 방법이다.</strong></li><li>테스트 결과를 수동으로 검증하는 것은 시간 소모적인 절차고 리스크가 늘어난다.<ul><li>코드가 출력해 내는 거대한 로그를 보다가 중요한 신호를 놓칠 수도 있다.</li></ul></li><li>테스트는 스스로 검증 가능할 뿐만 아니라 준비할 수도 있어야 한다.<ul><li>수동으로 준비 단계를 만들지 마라</li><li>어떤 설정 단계든 자동화해라</li><li>외부 설정이 필요하다면 고립성 위반이다.</li></ul></li><li>Infinitest: 시스템이 변경되면 이들을 식별하고 백그라운드로 잠재적으로 영향을 받는 테스트들을 실행한다.</li><li>Jenkins, TeamCity와 같은 CI 도구를 이용해 빌드와 테스트를 수행할 수 있다.<ul><li>더 나아가 빌드 서버가 확신 정도를 판단하고, 프로덕션 시스템(운영 시스템)에 변경 사항을 반영한다.</li></ul></li></ul><h2 id="5-6-Timely-적시에-사용한다"><a href="#5-6-Timely-적시에-사용한다" class="headerlink" title="5.6 Timely: 적시에 사용한다"></a>5.6 Timely: 적시에 사용한다</h2><ul><li>단위 테스트로 코드를 검증하는 것을 미룰수록 치석이 끼고 충치가 늘어날 것이다.</li><li>심지어는 리뷰 프로세스, 심지어 충분한 테스트가 없을 때 코드를 거부하는 자동화 도구를 사용하기도 한다.</li><li><strong>CI 환경에 자주 체크인하여 개발자들이 적시에 단위 테스트를 작성하는 습관을 들이도록 하고 있습니다.</strong></li><li><strong>단위 테스트를 더 많이 할수록 테스트 대상 코드가 줄어든다.</strong></li></ul><h2 id="5-7-마무리"><a href="#5-7-마무리" class="headerlink" title="5.7 마무리"></a>5.7 마무리</h2><ul><li>단위 테스트를 작성하는 것은 상당한 시간이 필요하다.</li><li>테스트 코드가 그에 상응하는 가치가 있다고 해도 이러한 테스트 코드 또한 유지보수 해야 한다.</li><li>테스트 코드를 고품질로 유지하여 이러한 유지보수 비용을 줄이자</li></ul>]]></content>
      
      
      <categories>
          
          <category> JUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
            <tag> test </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4. JUnit 단언 깊게 파기</title>
      <link href="/2021/09/30/junit/junit_04/"/>
      <url>/2021/09/30/junit/junit_04/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://github.com/boring-km/JunitPractice">https://github.com/boring-km/JunitPractice</a></li><li>테스트 코드를 잘 조직하고 구조화할 수 있는 JUnit 기능 위주..</li></ul><h2 id="4-1-AAA로-테스트-일관성-유지"><a href="#4-1-AAA로-테스트-일관성-유지" class="headerlink" title="4.1 AAA로 테스트 일관성 유지"></a>4.1 AAA로 테스트 일관성 유지</h2><ul><li>테스트 코드를 가시적으로 <strong>준비, 실행, 단언(Arrange, Act, Assert)</strong> 부분으로 조직 -&gt; triple-A(AAA)</li><li>given, when, then이랑 비슷하다고 보면 될 것 같음.</li></ul><h3 id="Arrange-Act-Assert"><a href="#Arrange-Act-Assert" class="headerlink" title="Arrange, Act, Assert"></a>Arrange, Act, Assert</h3><ul><li>Arrange: 테스트 코드를 실행하기 전에 시스템이 적절한 상태에 있는지 확인</li><li>Act: 테스트 코드 실행</li><li>Assert: 실행한 코드가 기대한 대로 동작하는 지 확인</li></ul><blockquote><p>경우에 따라서 After 과정이 있음: 테스트 코드에서 자원을 할당하는 로직이 있었다면 clean up 되었는지 확인</p></blockquote><h2 id="4-2-동작-테스트-vs-메서드-테스트"><a href="#4-2-동작-테스트-vs-메서드-테스트" class="headerlink" title="4.2 동작 테스트 vs 메서드 테스트"></a>4.2 동작 테스트 vs 메서드 테스트</h2><ul><li>개별 메서드를 테스트한다는 생각보다 클래스의 종합적인 동작에 집중해야 한다.</li></ul><h2 id="4-3-테스트와-프로덕션-코드의-관계"><a href="#4-3-테스트와-프로덕션-코드의-관계" class="headerlink" title="4.3 테스트와 프로덕션 코드의 관계"></a>4.3 테스트와 프로덕션 코드의 관계</h2><ul><li>당연히 테스트 코드가 프로덕션 코드에 의존하는 관계이지, 그 반대는 말이 안 됨.</li><li>더 많은 단위 테스트를 작성할수록 설계를 변경했을 시 테스트 작성이 훨씬 용이해지는 경우가 늘어난다.</li><li>테스트 친화적인 설계를 채택할수록 편해지고, 설계 자체도 더 좋아진다.</li></ul><h3 id="4-3-1-테스트와-프로덕션-코드-분리"><a href="#4-3-1-테스트와-프로덕션-코드-분리" class="headerlink" title="4.3.1 테스트와 프로덕션 코드 분리"></a>4.3.1 테스트와 프로덕션 코드 분리</h3><ul><li>테스트를 별도 디렉터리로 분리하지만 프로덕션 코드와 같은 패키지에 넣기 (현재도 그렇게 하고 있음)</li></ul><h3 id="4-3-2-내부-데이터-노출-vs-내부-동작-노출"><a href="#4-3-2-내부-데이터-노출-vs-내부-동작-노출" class="headerlink" title="4.3.2 내부 데이터 노출 vs 내부 동작 노출"></a>4.3.2 내부 데이터 노출 vs 내부 동작 노출</h3><ul><li>비공개 코드를 호출하는 테스트는 그 자체로 구현 세부 사항과 결속하게 된다.<ul><li>이 경우 세부 사항이 변경되면 기술적으로 공개적인 행동(인터페이스)이 그대로라고 해도 테스트는 깨질 수 있다.</li></ul></li><li>코드의 작은 변화가 수많은 테스트를 깨면 프로그래머는 리팩토링을 꺼리게 되고, 코드 베이스는 퇴화한다.</li><li>종종 테스트를 작성하려고 객체에 대해 과도하게 사적인 질문을 하게 될 수도 있다.</li><li><strong>테스트를 위해 내부 데이터를 노출하는 것은 테스트와 프로덕션 코드 사이에 과도한 결합을 초래한다.</strong></li><li>복잡한 private 메서드를 테스트하고 싶어질 수 있다.<ul><li><strong>내부 행위를 테스트하려는 충동이 든다면 설계에 문제가 있는 것이다!</strong></li><li><strong>이 문제는 대부분 SRP를 지키기 않아서 그렇다!</strong></li><li><strong>가장 좋은 해결책은 흥미로운 private 메서드를 추출하여 다른 클래스로 이동하는 것이다.</strong></li></ul></li></ul><h2 id="4-4-집중적인-단일-목적-테스트의-가치"><a href="#4-4-집중적인-단일-목적-테스트의-가치" class="headerlink" title="4.4 집중적인 단일 목적 테스트의 가치"></a>4.4 집중적인 단일 목적 테스트의 가치</h2><ul><li>작은 단위 테스트들을 주석으로 분리해서 하나의 테스트로 만들 수도 있다.</li><li>하지만 JUnit이 제공하는 테스트 고립의 이점을 잃게 된다.</li><li><strong>테스트 분리의 장점</strong><ul><li>단언이 실패했을 때 실패한 테스트 이름이 표시되기 때문에 어느 동작에 문제가 있는지 빠르게 파악 가능</li><li>실패한 테스트를 해독하는 데 필요한 시간 줄일 수 있음</li><li>모든 케이스가 실행되었음을 보장할 수 있음</li></ul></li></ul><h2 id="4-5-문서로서의-테스트"><a href="#4-5-문서로서의-테스트" class="headerlink" title="4.5 문서로서의 테스트"></a>4.5 문서로서의 테스트</h2><ul><li>단위 테스트는 클래스에 대한 지속적이고 믿을 수 있는 문서 역할을 해야 한다.</li></ul><h3 id="4-5-1-일관성-있는-이름으로-테스트-문서화"><a href="#4-5-1-일관성-있는-이름으로-테스트-문서화" class="headerlink" title="4.5.1 일관성 있는 이름으로 테스트 문서화"></a>4.5.1 일관성 있는 이름으로 테스트 문서화</h3><ul><li>테스트하려는 맥락을 제안하기 보다는 어떤 맥락에서 일련의 행동을 호출했을 때 어떤 결과가 나오는지를 명시해라</li><li>테스트 메서드의 이름을 상세하게 쓰되 의미가 명확하도록</li><li>ex) 어떤 동작을 하면 어떤 결과가 나온다. | 어떤 결과는 어떤 조건에서 발생한다.</li><li>행위 주도 개발(BDD): 주어진 조건에서 어떤 일을 하면 어떤 결과가 나온다.<ul><li>given-when-then: 조금 길어서 given 부분을 제거해서 작성하기도 함</li></ul></li></ul><h3 id="4-5-2-테스트를-의미-있게-만들기"><a href="#4-5-2-테스트를-의미-있게-만들기" class="headerlink" title="4.5.2 테스트를 의미 있게 만들기"></a>4.5.2 테스트를 의미 있게 만들기</h3><ul><li>다른 사람들이 테스트가 어떤 일을 파악하기 어려워 한다면…<ul><li>테스트 이름 개선</li><li>지역 변수 이름 개선</li><li>의미 있는 상수 도입</li><li>햄크레스트 단언 사용하기</li><li>커다란 테스트를 작게 나누어 집중적인 테스트 만들기</li><li>테스트 군더더기들을 도우미 메서드와 @Before 메서드로 이동하기</li></ul></li></ul><h2 id="4-6-Before와-After"><a href="#4-6-Before와-After" class="headerlink" title="4.6 @Before와 @After"></a>4.6 @Before와 @After</h2><ul><li>@Before 초기화 코드가 늘어나면 @Before 메서드를 여러개로 분리해도 되지만, 실행순서는 보장되지 않는다.</li><li>@After는 테스트가 실패해도 동작한다.<ul><li>테스트 후에 발생하는 부산물들을 정리해준다.</li><li>예를 들어 DB와의 연결을 종료</li></ul></li></ul><h3 id="4-6-1-BeforeClass와-AfterClass-Annotation"><a href="#4-6-1-BeforeClass와-AfterClass-Annotation" class="headerlink" title="4.6.1 BeforeClass와 AfterClass Annotation"></a>4.6.1 BeforeClass와 AfterClass Annotation</h3><ul><li>매우 드물게 테스트 클래스 수준의 초기화인 @BeforeClass가 사용된다.</li><li>그 반대의 경우인 @AfterClass도 있지만 역시 잘 사용하지 않음</li></ul><h2 id="4-7-녹색이-좋다-테스트를-의미-있게-유지"><a href="#4-7-녹색이-좋다-테스트를-의미-있게-유지" class="headerlink" title="4.7 녹색이 좋다: 테스트를 의미 있게 유지"></a>4.7 녹색이 좋다: 테스트를 의미 있게 유지</h2><ul><li>테스트를 빠르고 많이 실행할 수 있게 하라</li><li>녹색으로 항상 코드에 오류가 없도록 하자</li><li>빠른 피드백을 얻을 수 있는 단위 테스트에 집중하자</li><li>실패하는 테스트를 빨리 못 고친다면 차라리 @Ignore Annotation 달자</li></ul><h2 id="4-8-마무리"><a href="#4-8-마무리" class="headerlink" title="4.8 마무리"></a>4.8 마무리</h2><ul><li>JUnit이 할 수 있는게 의미 있으니 정신 차리고 잘 써라~</li></ul>]]></content>
      
      
      <categories>
          
          <category> JUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
            <tag> test </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3. JUnit 단언 깊게 파기</title>
      <link href="/2021/08/30/junit/junit_03/"/>
      <url>/2021/08/30/junit/junit_03/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://github.com/boring-km/JunitPractice">https://github.com/boring-km/JunitPractice</a></li></ul><h2 id="3-1-JUnit-Assert"><a href="#3-1-JUnit-Assert" class="headerlink" title="3.1 JUnit Assert"></a>3.1 JUnit Assert</h2><ul><li>Assert(단언): 테스트에 넣을 수 있는 정적 메서드 호출이다.</li><li>어떤 조건이 참인지 검증하는 방법이며, 참이 아니면 테스트는 그 자리에서 멈추고 실패를 보고한다.</li></ul><h3 id="assertThat"><a href="#assertThat" class="headerlink" title="assertThat"></a>assertThat</h3><ul><li>명확한 값을 비교한다.</li><li>hamcrest Assert</li><li>assertThat(실제 표현식[actual], 검증하고자 하는 값[matcher])</li><li>JUnit이 제공하는 핵심 hamcrest 매처를 사용하려면 코드에 정적 임포트를 추가해야 한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.CoreMatchers.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br></pre></td></tr></table></figure><ul><li>일반적인 assert문 보다 hamcrest assert가 실패할 때에 오류 메시지에서 더 많은 정보를 확인할 수 있다.</li></ul><h3 id="중요한-hamcrest-matcher-살펴보기"><a href="#중요한-hamcrest-matcher-살펴보기" class="headerlink" title="중요한 hamcrest matcher 살펴보기"></a>중요한 hamcrest matcher 살펴보기</h3><ul><li>때로는 매처 표현의 가독성을 높이기 위해 is(), not()을 사용하기도 한다.</li><li>null이 아닌 값을 자주 검사하는 것은 설계 문제이거나 지나치게 걱정하는 것이다. (대부분 불필요하다.)</li></ul><h3 id="부동소수점-수-비교"><a href="#부동소수점-수-비교" class="headerlink" title="부동소수점 수 비교"></a>부동소수점 수 비교</h3><ul><li>단순 equalTo()로는 실패한다.</li><li>closeTo()가 있다.</li></ul><h3 id="Assert-설명"><a href="#Assert-설명" class="headerlink" title="Assert 설명"></a>Assert 설명</h3><ul><li>모든 JUnit Assert의 형식에는 message라는 선택적 첫 번째 인자가 있다.</li><li>message 인자는 Assert의 근거를 설명해준다.</li></ul><h2 id="3-2-예외를-기대하는-3가지-방법"><a href="#3-2-예외를-기대하는-3가지-방법" class="headerlink" title="3.2 예외를 기대하는 3가지 방법"></a>3.2 예외를 기대하는 3가지 방법</h2><h3 id="1-단순한-방식-Annotation-사용"><a href="#1-단순한-방식-Annotation-사용" class="headerlink" title="1) 단순한 방식: Annotation 사용"></a>1) 단순한 방식: Annotation 사용</h3><ul><li>@Test Annotation에 expected 값에 Exception 값을 매핑</li><li>Exception이 발생하면 테스트 통과</li></ul><h3 id="2-옛-방식-try-x2F-catch와-fail"><a href="#2-옛-방식-try-x2F-catch와-fail" class="headerlink" title="2) 옛 방식: try&#x2F;catch와 fail"></a>2) 옛 방식: try&#x2F;catch와 fail</h3><ul><li>예외가 발생하지 않으면 org.junit.Assert.fail() 메서드를 호출하여 강제로 실패</li></ul><h3 id="3-새로운-방식-ExpectedException-규칙"><a href="#3-새로운-방식-ExpectedException-규칙" class="headerlink" title="3) 새로운 방식: ExpectedException 규칙"></a>3) 새로운 방식: ExpectedException 규칙</h3><ul><li>자동으로 테스트 집합에 종단 관심사(cross-cutting concern)을 부착할 수 있다. (like AOP)</li></ul><h3 id="예외-무시"><a href="#예외-무시" class="headerlink" title="예외 무시"></a>예외 무시</h3><ul><li>검증된 예외를 무시하기 위해 메서드에서 throws 처리해버리기</li><li>근데 코틀린은 안된다… (이런 상황이면 그냥 Annotation으로 처리하는 게 나을듯)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
            <tag> test </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템17. 변경 가능성을 최소화하라</title>
      <link href="/2021/08/22/effective_java/2021-08-22-item17/"/>
      <url>/2021/08/22/effective_java/2021-08-22-item17/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>불변 클래스</strong>: 그 인스턴스의 내부 값을 수정할 수 없는 클래스다.</li><li>가변 클래스보다 설계하고 구현하고 사용하기 쉬우며, 오류가 생길 여지도 적고 훨씬 안전하다.</li></ul><h3 id="클래스를-불변으로-만들기-위한-5가지-규칙"><a href="#클래스를-불변으로-만들기-위한-5가지-규칙" class="headerlink" title="클래스를 불변으로 만들기 위한 5가지 규칙"></a>클래스를 불변으로 만들기 위한 5가지 규칙</h3><ul><li>객체의 상태를 변경하는 메서드(변경자)를 제공하지 않는다.</li><li>클래스를 확장할 수 없도록 한다.</li><li>모든 필드를 final로 선언한다.</li><li>모든 필드를 private으로 선언한다.</li><li>자신 외에는 내부의 가변 컴포넌트에 접근할 수 없도록 한다.</li></ul><h4 id="불변-클래스-예시"><a href="#불변-클래스-예시" class="headerlink" title="불변 클래스 예시"></a>불변 클래스 예시</h4><ul><li>Complex.java</li><li>사칙연산 메서드들이 인스턴스 자신을 수정하는 것이 아닌 새로운 Complex 인스턴스를 만들어내고 있음</li><li><strong>함수형 프로그래밍</strong>: 피연산자에 함수를 적용해 그 결과를 반환하지만, 피연산자 자체는 그대로인 프로그래밍 패턴</li></ul><h3 id="불변-클래스의-특징"><a href="#불변-클래스의-특징" class="headerlink" title="불변 클래스의 특징"></a>불변 클래스의 특징</h3><ul><li><strong>불변 객체는 단순하다.</strong></li><li><strong>불변 객체는 근본적으로 thread-safe 하여 따로 동기화할 필요가 없다.</strong></li><li><strong>불변 객체는 안심하고 공유할 수 있다.</strong></li><li>아무리 복사해봐야 원본 객체이기에..!</li><li>clone 메서드나 복사 생성자를 제공하지 않는 게 좋다. (String의 복사 생성자는 필요 없다.)</li><li><strong>불변 객체끼리는 내부 데이터를 공유할 수 있다.</strong></li><li>객체를 만들 때 다른 불변 객체들을 구성요소로 사용하면 이점이 많다!</li><li>불변 객체 그 자체로 실패 원자성을 제공한다. (메서드에서 예외가 발생한 후에도 그 객체는 여전히 유효한 상태여야 한다.)</li></ul><h3 id="불변-클래스의-단점-및-대처-방법"><a href="#불변-클래스의-단점-및-대처-방법" class="headerlink" title="불변 클래스의 단점 및 대처 방법"></a>불변 클래스의 단점 및 대처 방법</h3><ul><li><strong>값이 다르면 반드시 독립된 객체로 만들어야 한다.</strong></li><li>흔히 쓰일 다단계 연산들을 예측하여 기본 기능으로 제공하는 방법</li><li>String과 String의 가변 동반 클래스 StringBuilder(StringBuffer도 있지..)</li></ul><h3 id="클래스가-불변임을-보장하기-위한-여러-방법들"><a href="#클래스가-불변임을-보장하기-위한-여러-방법들" class="headerlink" title="클래스가 불변임을 보장하기 위한 여러 방법들"></a>클래스가 불변임을 보장하기 위한 여러 방법들</h3><ul><li>final 클래스로 선언하는 가장 쉬운 방법도 있다.</li><li>모든 생성자를 private 혹은 package-private으로 만들고 public 정적 팩터리를 제공하는 방법<ul><li>다수의 구현 클래스를 활용한 유연성을 제공하고, 다음 release에서 객체 캐싱 기능을 추가해 성능을 끌어올릴 수도 있다.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Complex 클래스를 생성자 대신 정적 팩터리를 사용해 불변 클래스로 만들어보기</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Complex</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> re;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> im;</span><br><span class="line">    <span class="comment">// private 생성자이기 때문에 다른 패키지에서 확장 불가</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Complex</span><span class="params">(<span class="type">double</span> re, <span class="type">double</span> im)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.re = re;</span><br><span class="line">        <span class="built_in">this</span>.im = im;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Complex <span class="title function_">valueOf</span><span class="params">(<span class="type">double</span> re, <span class="type">double</span> im)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Complex</span>(re, im);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="불변-클래스의-예외-조건"><a href="#불변-클래스의-예외-조건" class="headerlink" title="불변 클래스의 예외 조건?"></a>불변 클래스의 예외 조건?</h3><ul><li>성능을 위해 완화: “어떤 메서드도 객체의 상태 중 외부에 비치는 값을 변경할 수 없다.”</li><li>방식: final이 아닌 필드에 캐시해두기</li><li>이유: 똑같은 값을 다시 요청하면 캐시해둔 값을 반환하여 계산 비용을 절감할 수 있다.</li></ul><h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><ul><li>getter가 있다고 무조건 setter를 만들지 말라</li><li><strong>클래스는 꼭 필요한 경우가 아니라면 불변이어야 한다.</strong></li><li>모든 클래스를 불변으로 만들 수도 없다. <strong>불변으로 만들 수 없는 클래스라도 변경할 수 있는 부분을 최소한으로 줄이자</strong></li><li><strong>다른 합당한 이유가 없다면 모든 필드는 private final이어야 한다.</strong></li><li><strong>생성자는 불변식 설정이 모두 완료된, 초기화가 완벽히 끝난 상태의 객체를 생성해야 한다.</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2. JUnit 진짜로 써 보기</title>
      <link href="/2021/08/21/junit/junit_02/"/>
      <url>/2021/08/21/junit/junit_02/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://github.com/boring-km/JunitPractice">https://github.com/boring-km/JunitPractice</a></li></ul><h2 id="2-1-테스트-대상-이해-Profile-클래스"><a href="#2-1-테스트-대상-이해-Profile-클래스" class="headerlink" title="2.1 테스트 대상 이해: Profile 클래스"></a>2.1 테스트 대상 이해: Profile 클래스</h2><ul><li>구직 웹 사이트 예제</li><li>구인자와 구직자는 둘 다 다수의 객관식 혹은 yes-no 질문에 대한 대답을 하는 프로파일을 생성한다.</li><li>첫 번째 예시 코드를 보고 어떤 애플리케이션을 개발하려고 하는지 파악해보기</li></ul><h2 id="2-2-어떤-테스트를-작성할-수-있는지-결정"><a href="#2-2-어떤-테스트를-작성할-수-있는지-결정" class="headerlink" title="2.2 어떤 테스트를 작성할 수 있는지 결정"></a>2.2 어떤 테스트를 작성할 수 있는지 결정</h2><ul><li>테스트 코드를 작성하려고 하면 정말 많은 테스트를 만들 수 있음</li><li>충분히 테스트하기 위한 테스트 코드를 얼마나 작성해야 할까?</li><li><strong>새로 작성한 코드에 테스트 코드를 작성할 때는 가장 신경 쓰는 부분이 어디인지 알고 있어야 한다.</strong></li></ul><h2 id="2-3-단일-경로-커버"><a href="#2-3-단일-경로-커버" class="headerlink" title="2.3 단일 경로 커버"></a>2.3 단일 경로 커버</h2><ul><li>matches() 메서드 안에 있는 코드를 분석해보면 유용한 Criteria 객체를 어떻게 만들어야 할지 가늠할 수 있다.</li><li>겉보기에는 의도한대로 만든 것 같은 테스트 완성</li></ul><h2 id="2-4-두-번째-테스트-만들기"><a href="#2-4-두-번째-테스트-만들기" class="headerlink" title="2.4 두 번째 테스트 만들기"></a>2.4 두 번째 테스트 만들기</h2><ul><li>각 단위 테스트는 고유 맥락을 갖는다.</li><li>JUnit은 결정된 순서로 테스트를 실행하지 않으며, 모든 테스트는 다른 테스트 결과에 영향을 받지 않는다.</li><li>2.3과 유사한 테스트를 작성해보면서 공통적인 부분이 보인다.</li></ul><h2 id="2-5-Before-메서드로-테스트-초기화"><a href="#2-5-Before-메서드로-테스트-초기화" class="headerlink" title="2.5 @Before 메서드로 테스트 초기화"></a>2.5 @Before 메서드로 테스트 초기화</h2><ul><li>공통적인 초기화 코드가 있다면 @Before 메서드로 이동시켜보자</li><li>여러 테스트를 실행 시 작동 순서</li></ul><ol><li>JUnit은 새로운 ProfileTest 인스턴스를 생성</li><li>@Before 메서드를 호출하여 profile, question, criteria 변수를 적절한 인스턴스로 초기화</li><li>테스트 메서드를 실행하고 테스트가 통과 혹은 실패했는지 표기</li><li><strong>새로운 인스턴스에 대해 @Before 메서드를 호출하여 필드를 초기화 (테스트 메서드마다 반복하여 초기화 한다.)</strong></li><li>다른 테스트 메서드를 호출</li></ol><h2 id="2-6-2-7-결론"><a href="#2-6-2-7-결론" class="headerlink" title="2.6 ~ 2.7 결론"></a>2.6 ~ 2.7 결론</h2><ul><li>아직 테스트를 위한 경로가 더 있을 것이다.</li><li>단위 테스트를 작성하는 것은 훈련이 필요하다.</li><li>단지 assert 문을 넣는다고 되는 게 아니다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> JUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
            <tag> test </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. 첫 번째 JUnit 테스트</title>
      <link href="/2021/08/20/junit/junit_01/"/>
      <url>/2021/08/20/junit/junit_01/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://github.com/boring-km/JunitPractice">https://github.com/boring-km/JunitPractice</a></li></ul><h2 id="1-1-단위-테스트를-작성하는-이유"><a href="#1-1-단위-테스트를-작성하는-이유" class="headerlink" title="1.1 단위 테스트를 작성하는 이유"></a>1.1 단위 테스트를 작성하는 이유</h2><ul><li>단위 테스트를 반영한 사람과 아닌 사람이 문제를 발견하거나 검증하는 데 소요하는 시간에서 단위 테스트를 작성한 사람이 훨씬 간편하고 빠르게 찾아내는 것을 확인함.</li></ul><h2 id="1-2-JUnit의-기본-첫-번째-테스트-통과"><a href="#1-2-JUnit의-기본-첫-번째-테스트-통과" class="headerlink" title="1.2 JUnit의 기본: 첫 번째 테스트 통과"></a>1.2 JUnit의 기본: 첫 번째 테스트 통과</h2><h2 id="1-3-테스트-준비-실행-단언"><a href="#1-3-테스트-준비-실행-단언" class="headerlink" title="1.3 테스트 준비, 실행, 단언"></a>1.3 테스트 준비, 실행, 단언</h2><ul><li>src&#x2F;main&#x2F;kotlin&#x2F;chapter01</li></ul><h2 id="1-4-테스트가-정말로-뭔가를-테스트하는가"><a href="#1-4-테스트가-정말로-뭔가를-테스트하는가" class="headerlink" title="1.4 테스트가 정말로 뭔가를 테스트하는가?"></a>1.4 테스트가 정말로 뭔가를 테스트하는가?</h2><ul><li>의도치 않게 생각했던 것을 실제로 검증하지 않는 나쁘고 노력이 많이 들어가는 테스트를 작성할 수도 있다.</li><li>테스트에서 먼저 실패하고 그 코드를 통과시키기 위한 TDD의 자세를 따라가자</li></ul><h2 id="1-5-결론"><a href="#1-5-결론" class="headerlink" title="1.5 결론"></a>1.5 결론</h2><ul><li>ScoreCollection 코드 분석해보고 스스로 질문 던져보기<ul><li>코드가 정상적으로 동작하는지 확신하려고 추가적인 테스트를 작성할 필요가 있는가?</li><li>내가 클래스에서 결함이나 한계점을 드러낼 수 있는 테스트를 작성할 수 있을까?</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
            <tag> test </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템16. public 클래스에서는 public 필드가 아닌 접근자 메서드를 사용하라</title>
      <link href="/2021/08/02/effective_java/2021-08-02-item16/"/>
      <url>/2021/08/02/effective_java/2021-08-02-item16/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>패키지 바깥에서 접근할 수 있는 클래스라면 접근자를 제공</strong>함으로써 클래스 내부 표현 방식을 언제든 바꿀 수 있는 유연성을 얻을 수 있다.</li><li><strong>package-private 클래스 혹은 private 중첩 클래스라면 데이터 필드를 노출해도 문제가 없다.</strong><ul><li>표현하고자 하는 추상 개념만 올바르게 표현하면 된다.</li></ul></li></ul><h3 id="public-클래스의-필드가-불변이라면"><a href="#public-클래스의-필드가-불변이라면" class="headerlink" title="public 클래스의 필드가 불변이라면?"></a>public 클래스의 필드가 불변이라면?</h3><ul><li><strong>여전히 나쁜 선택</strong></li><li>API를 변경하지 않고는 표현 방식을 바꿀 수 없고, 필드를 읽을 때 부수 작업을 수행할 수 없다는 단점은 여전히 존재</li><li>단, 불변식은 보장할 수 있게 된다.</li><li>각 인스턴스가 유한 시간을 표현함을 보장하는 예</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Time &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">HOURS_PER_DAY</span> <span class="operator">=</span> <span class="number">24</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MINUTES_PER_HOUR</span> <span class="operator">=</span> <span class="number">60</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> hour;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> minute;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Time</span><span class="params">(<span class="type">int</span> hour, <span class="type">int</span> minute)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hour &lt; <span class="number">0</span> || hour &gt;= HOURS_PER_DAY)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;시간: &quot;</span> + hour);</span><br><span class="line">    <span class="keyword">if</span> (minute &lt; <span class="number">0</span> || minute &gt;= MINUTES_PER_HOUR)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;분: &quot;</span> + minute);</span><br><span class="line">    <span class="built_in">this</span>.hour = hour;</span><br><span class="line">    <span class="built_in">this</span>.minute = minute;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="핵심-정리"><a href="#핵심-정리" class="headerlink" title="핵심 정리"></a>핵심 정리</h3><ul><li>public 클래스는 절대 가변 필드를 직접 노출해서는 안 된다.</li><li>불변 필드라면 노출해도 덜 위험하지만 완전히 안심할 수 없다.</li><li>package-private 클래스나 private 중첩 클래스에서는 종종 필드를 노출하는 편이 나을 때도 있다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템15. 클래스와 멤버의 접근 권한을 최소화하라</title>
      <link href="/2021/08/01/effective_java/2021-08-01-item15/"/>
      <url>/2021/08/01/effective_java/2021-08-01-item15/</url>
      
        <content type="html"><![CDATA[<h3 id="정보-은닉의-장점"><a href="#정보-은닉의-장점" class="headerlink" title="정보 은닉의 장점"></a>정보 은닉의 장점</h3><ul><li>시스템 개발 속도를 높인다. (여러 컴포넌트를 병렬로 개발 가능하기 때문)</li><li>시스템 관리 비용을 낮춘다. (각 컴포넌트를 더 빨리 파악해 디버깅 가능, 교체 부담 적음)</li><li>성능 최적화에 도움을 준다. (다른 컴포넌트에 영향을 주지 않고 해당 컴포넌트만 최적화할 수 있기 때문)</li><li>소프트웨어 재사용성을 높인다. (독자적으로 동작하는 컴포넌트는 여러 상황에서 유용함)</li><li>큰 시스템을 제작하는 난이도를 낮춰준다. (시스템이 완벽하지 않아도 개별 컴포넌트의 동작 검증 가능)</li></ul><h3 id="모든-클래스와-멤버의-접근성을-가능한-한-좁혀야-한다"><a href="#모든-클래스와-멤버의-접근성을-가능한-한-좁혀야-한다" class="headerlink" title="모든 클래스와 멤버의 접근성을 가능한 한 좁혀야 한다"></a>모든 클래스와 멤버의 접근성을 가능한 한 좁혀야 한다</h3><ul><li><p>public은 공개 API이기 때문에 하위 호환을 위해 영원히 관리해줘야만 한다.</p></li><li><p>한 클래스에서만 사용하는 package-private 톱레벨 클래스나 인터페이스는 이를 사용하는 클래스 안에 private static으로 중첩시켜보자 <em>[아이템 24]</em></p></li><li><p><strong>public일 필요가 없는 클래스의 접근 수준을 package-private 톱레벨 클래스로 좁히자</strong></p></li></ul><h4 id="4가지-접근-수준-점검"><a href="#4가지-접근-수준-점검" class="headerlink" title="4가지 접근 수준 점검~"></a>4가지 접근 수준 점검~</h4><ul><li>private: 멤버를 선언한 톱레벨 클래스에서만 접근할 수 있다.</li><li>package-private: 멤버가 소속된 패키지 안의 모든 클래스에서 접근할 수 있다. 접근 제한자를 명시하지 않았을 때 적용되는 패키지 접근 수준이다. (단, 인터페이스의 멤버는 기본적으로 public이 적용된다).</li><li>protected: package-private의 접근 범위를 포함하며, 이 멤버를 선언한 클래스의 하위 클래스에서도 접근할 수 있다.</li><li>public: 모든 곳에서 접근할 수 있다.</li></ul><h3 id="중요해보이는-내용들"><a href="#중요해보이는-내용들" class="headerlink" title="중요해보이는 내용들"></a>중요해보이는 내용들</h3><ul><li><p><strong>멤버 접근성 좁히기</strong>: 클래스의 공개 API를 세심히 설계한 후, 그 외의 모든 멤버는 private으로 만들자. 그리고 오직 같은 패키지의 다른 클래스가 접근해야 하는 멤버에 한해 package-private으로 풀어주자.</p></li><li><p>protected의 멤버 수는 적을수록 좋다.</p></li><li><p>상위 클래스의 메서드를 재정의할 때 그 접근 수준을 상위 클래스에서보다 좁게 설정할 수 없다는 제약으로 멤버 접근성을 좁히는 것에 방해가 될 때도 있음.</p></li><li><p>코드를 테스트하려는 목적으로 접근 범위를 넓히는 것은 적당 수준까지 괜찮다.</p><ul><li>public 클래스 내 private 멤버를 package-private까지는 허용가능이나 그 이상은 안 된다.</li><li><strong>테스트를 위해 클래스, 인터페이스, 멤버를 공개 API로 만들어서는 안 된다.</strong></li><li>테스트 코드를 테스트 대상과 같은 패키지에 두면 이럴 필요도 없다.</li></ul></li><li><p><strong>public 클래스의 인스턴스 필드는 되도록 public이 아니어야 한다</strong> <em>[아이템 16]</em></p></li><li><p><strong>public 가변 필드를 갖는 클래스는 일반적으로 thread-safe 하지 않다.</strong></p></li><li><p><strong>클래스에서 public static final 배열 필드를 두거나 이 필드를 반환하는 접근자 메서드를 제공해서는 안 된다.</strong></p><ul><li>제공하게 된다면 클라이언트에서 그 배열의 내용을 수정할 수 있게 된다. (당연하지;;)</li><li>필요하다면 2가지 방법이 있지</li><li>첫번째 방법: 앞 코드의 public 배열을 private으로 만들고 public 불변 리스트를 추가하기</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Thing[] PRIVATE_VALUES = &#123; ... &#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Thing&gt; VALUES = Collections.unmodifiableList(Arrays.asList(PRIVATE_VALUES));</span><br></pre></td></tr></table></figure><ul><li>두번째 방법: 배열을 private으로 만들고 그 복사본을 반환하는 public 메서드를 추가하는 방법 (방어적 복사)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Thing[] PRIVATE_VALUES = &#123; ... &#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Thing[] values() &#123;</span><br><span class="line">  <span class="keyword">return</span> PRIVATE_VALUES.clone();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>모듈 시스템을 활용해서 클래스를 외부에 공개하지 않으면서 같은 모듈을 이루는 패키지 사이에서 자유롭게 공유할 수 있게도 가능함. <strong>(protected나 public이라도 module-info.java와 같은 파일에 export하지 않으면)</strong></p><ul><li>주의할 점: 한 모듈의 JAR 파일을 자신의 모듈 경로가 아닌 애플리케이션 classpath에 두면, 그 모듈 안의 모든 패키지는 마치 모듈이 없는 것처럼 행동한다. (모듈 공개 여부와 상관 없이 public 클래스가 선언한 모든 public 혹은 protected 멤버를 모듈 밖에서도 접근할 수 있게 된다.)</li><li>대표적 예시가 JDK 그 자체<ul><li>자바 라이브러리에서 공개하지 않은 패키지들은 해당 모듈 밖에서는 절대로 접근할 수 없다.</li></ul></li><li>꼭 필요한 게 아니라면 자제하길</li></ul></li></ul><h3 id="핵심-정리"><a href="#핵심-정리" class="headerlink" title="핵심 정리"></a>핵심 정리</h3><ul><li>프로그램 요소의 접근성은 가능한 한 최소한으로 하라.</li><li>꼭 필요한 것만 골라 최소한의 public API를 설계하자.</li><li>public 클래스는 상수용 public static final 필드 외에는 어떠한 public 필드도 가져서는 안 된다. 해당 필드가 참조하는 객체가 불변인지 확인하라.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템14. Comparable을 구현할지 고려하라</title>
      <link href="/2021/07/31/effective_java/2021-07-31-item14/"/>
      <url>/2021/07/31/effective_java/2021-07-31-item14/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Comparable 인터페이스의 유일무이한 메서드: compareTo</p></li><li><p>equals와 거의 비슷하지만 딱 2가지가 다르다.</p><ul><li>compareTo는 단순 동치성 비교에 더해 순서까지 비교할 수 있으며, 제네릭하다.</li><li>Comparable을 구현했다는 것은 그 클래스의 인스턴스들에는 자연적인 순서가 있음을 뜻한다.</li><li>그래서 정렬이 쉽다. Arrays.sort(a);</li></ul></li><li><p>컬렉션 관리도 쉽다.</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordList</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; s = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(s, args);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="compareTo-메서드의-일반-규약"><a href="#compareTo-메서드의-일반-규약" class="headerlink" title="compareTo 메서드의 일반 규약"></a>compareTo 메서드의 일반 규약</h3><ul><li><p>equals와 거의 비슷하기 때문에 생략 (equals와 다른점만 확인)</p></li><li><p>표현식의 값이 음수, 0, 양수일 때 -1, 0, 1을 반환하도록 정의</p></li><li><p>타입이 다른 객체를 신경 쓰지 않아도 된다.</p><ul><li>타입이 다르면 간단히 ClassCastException을 던진다.</li><li>다른 타입 사이의 비교도 허용한다. (공통 인터페이스를 가질 때)</li></ul></li><li><p>교재 88p 참조</p></li><li><p>compareTo 규약을 지키지 못하면 비교를 활용하는 클래스와 어울리지 못한다. (TreeSet, TreeMap)</p></li><li><p>equals와 동일하게 반사성, 대칭성, 추이성을 충족해야 한다.</p></li></ul><h3 id="일반-규약-요약"><a href="#일반-규약-요약" class="headerlink" title="일반 규약 요약"></a>일반 규약 요약</h3><ul><li><ol><li>두 객체 참조의 순서를 바꿔 비교해도 예상한 결과가 나와야 한다.</li></ol></li><li><ol start="2"><li>첫 번째가 두 번째보다 크고 두 번째가 세 번째보다 크면, 첫 번째는 세 번째보다 커야 한다.</li></ol></li><li><ol start="3"><li>크기가 같은 객체들끼리는 어떤 객체와 비교하더라도 항상 같아야 한다. (필수는 아니지만 지키면 좋음)</li></ol></li></ul><h3 id="주의점"><a href="#주의점" class="headerlink" title="주의점"></a>주의점</h3><ul><li>Comparable은 타입을 인수로 받는 제네릭 인터페이스이므로 compareTo 메서드의 인수 타입은 컴파일타임에 정해진다.<ul><li>입력 인수의 타입을 확인하거나 형변환할 필요 없음 (바로 빨간줄로 보이니까!!)</li></ul></li><li>null을 인수에 넣으면 NullPointerException</li><li>각 필드가 동치인지를 비교하는 게 아니라 그 순서를 비교한다.</li></ul><h4 id="비교자가-하나인-compareTo"><a href="#비교자가-하나인-compareTo" class="headerlink" title="비교자가 하나인 compareTo"></a>비교자가 하나인 compareTo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CaseInsensitiveString</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;CaseInsensitiveString&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(CaseInsensitiveString cis)</span> &#123;<span class="comment">// 해당 객체의 인스턴스 변수 s와 인수 객체 속 s</span></span><br><span class="line">    <span class="keyword">return</span> String.CASE_INSENSITIVE_ORDER.compare(s, cis.s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="자바7-이후-변경-상황"><a href="#자바7-이후-변경-상황" class="headerlink" title="자바7 이후 변경 상황"></a>자바7 이후 변경 상황</h3><ul><li>compareTo 메서드에서 관계 연산자 &lt;와 &gt;를 사용하는 이전 방식은 거추장스럽고 오류를 유발하니, 이제는 추천 X</li></ul><h3 id="자바-8에서-객체를-비교하는-방식"><a href="#자바-8에서-객체를-비교하는-방식" class="headerlink" title="자바 8에서 객체를 비교하는 방식"></a>자바 8에서 객체를 비교하는 방식</h3><ul><li><p>간결하고 성능 조금 안좋아지는 방식</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Comparator 인터페이스가 일련의 비교자 생성 메서드와 팀을 꾸려 메서드 연쇄 방식으로 비교자를 생성할 수 있게 되었다.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;PhoneNumer&gt; COMPARATOR = comparingInt((PhoneNumber pn) -&gt; pn.areaCode)</span><br><span class="line">  .thenComparingInt(pn -&gt; pn.prefix)<span class="comment">// 추가 비교, thenComparingInt 사용 시 타입 추론 가능</span></span><br><span class="line">  .thenComparingInt(pn -&gt; pn.lineNum);<span class="comment">// 추가 비교</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(PhoneNumber pn)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> COMPARATOR.compare(<span class="built_in">this</span>, pn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>comparingInt는 객체 참조를 int 타입 키에 매핑하는 키 추출 함수를 인수로 받아, 그 키를 기준으로 순서를 정하는 비교자를 반환하는 정적 메서드</li></ul></li></ul><h3 id="객체-참조용-비교자-생성-메서드도-준비됨"><a href="#객체-참조용-비교자-생성-메서드도-준비됨" class="headerlink" title="객체 참조용 비교자 생성 메서드도 준비됨"></a>객체 참조용 비교자 생성 메서드도 준비됨</h3><ul><li><p>comparing이라는 정적 메서드 2개가 다중정의되어 있다.</p></li><li><p>첫번째 메서드: 키 추출자를 받아서 그 키의 자연적 순서를 사용한다.</p></li><li><p>두번째 메서드: 키 추출자 하나와 추출된 키를 비교할 비교자까지 총 2개의 인수를 받는다.</p></li><li><p>또한, thenComparing이란 인스턴스 메서드가 3개 다중정의되어 있다.</p></li></ul><blockquote><p>그냥 comparing을 찾아와보자</p><p>Comparator 인터페이스를 가져와봤다.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class="line"><span class="comment"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.function.ToIntFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.function.ToLongFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.function.ToDoubleFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparators;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparator</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">compare</span><span class="params">(T o1, T o2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> Comparator&lt;T&gt; <span class="title function_">reversed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.reverseOrder(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> Comparator&lt;T&gt; <span class="title function_">thenComparing</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> T&gt; other)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable) (c1, c2) -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> compare(c1, c2);</span><br><span class="line">            <span class="keyword">return</span> (res != <span class="number">0</span>) ? res : other.compare(c1, c2);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;U&gt; Comparator&lt;T&gt; <span class="title function_">thenComparing</span><span class="params">(</span></span><br><span class="line"><span class="params">            Function&lt;? <span class="built_in">super</span> T, ? extends U&gt; keyExtractor,</span></span><br><span class="line"><span class="params">            Comparator&lt;? <span class="built_in">super</span> U&gt; keyComparator)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> thenComparing(comparing(keyExtractor, keyComparator));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;U <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> U&gt;&gt; Comparator&lt;T&gt; <span class="title function_">thenComparing</span><span class="params">(</span></span><br><span class="line"><span class="params">            Function&lt;? <span class="built_in">super</span> T, ? extends U&gt; keyExtractor)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> thenComparing(comparing(keyExtractor));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> Comparator&lt;T&gt; <span class="title function_">thenComparingInt</span><span class="params">(ToIntFunction&lt;? <span class="built_in">super</span> T&gt; keyExtractor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> thenComparing(comparingInt(keyExtractor));</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">default</span> Comparator&lt;T&gt; <span class="title function_">thenComparingLong</span><span class="params">(ToLongFunction&lt;? <span class="built_in">super</span> T&gt; keyExtractor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> thenComparing(comparingLong(keyExtractor));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> Comparator&lt;T&gt; <span class="title function_">thenComparingDouble</span><span class="params">(ToDoubleFunction&lt;? <span class="built_in">super</span> T&gt; keyExtractor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> thenComparing(comparingDouble(keyExtractor));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> T&gt;&gt; Comparator&lt;T&gt; <span class="title function_">reverseOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.reverseOrder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> T&gt;&gt; Comparator&lt;T&gt; <span class="title function_">naturalOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Comparator&lt;T&gt;) Comparators.NaturalOrderComparator.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Comparator&lt;T&gt; <span class="title function_">nullsFirst</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> T&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Comparators</span>.NullComparator&lt;&gt;(<span class="literal">true</span>, comparator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Comparator&lt;T&gt; <span class="title function_">nullsLast</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> T&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Comparators</span>.NullComparator&lt;&gt;(<span class="literal">false</span>, comparator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, U&gt; Comparator&lt;T&gt; <span class="title function_">comparing</span><span class="params">(</span></span><br><span class="line"><span class="params">            Function&lt;? <span class="built_in">super</span> T, ? extends U&gt; keyExtractor,</span></span><br><span class="line"><span class="params">            Comparator&lt;? <span class="built_in">super</span> U&gt; keyComparator)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Objects.requireNonNull(keyExtractor);</span><br><span class="line">        Objects.requireNonNull(keyComparator);</span><br><span class="line">        <span class="keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable)</span><br><span class="line">            (c1, c2) -&gt; keyComparator.compare(keyExtractor.apply(c1),</span><br><span class="line">                                              keyExtractor.apply(c2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, U <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> U&gt;&gt; Comparator&lt;T&gt; <span class="title function_">comparing</span><span class="params">(</span></span><br><span class="line"><span class="params">            Function&lt;? <span class="built_in">super</span> T, ? extends U&gt; keyExtractor)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Objects.requireNonNull(keyExtractor);</span><br><span class="line">        <span class="keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable)</span><br><span class="line">            (c1, c2) -&gt; keyExtractor.apply(c1).compareTo(keyExtractor.apply(c2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Comparator&lt;T&gt; <span class="title function_">comparingInt</span><span class="params">(ToIntFunction&lt;? <span class="built_in">super</span> T&gt; keyExtractor)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(keyExtractor);</span><br><span class="line">        <span class="keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable)</span><br><span class="line">            (c1, c2) -&gt; Integer.compare(keyExtractor.applyAsInt(c1), keyExtractor.applyAsInt(c2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Comparator&lt;T&gt; <span class="title function_">comparingLong</span><span class="params">(ToLongFunction&lt;? <span class="built_in">super</span> T&gt; keyExtractor)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(keyExtractor);</span><br><span class="line">        <span class="keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable)</span><br><span class="line">            (c1, c2) -&gt; Long.compare(keyExtractor.applyAsLong(c1), keyExtractor.applyAsLong(c2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Comparator&lt;T&gt; <span class="title function_">comparingDouble</span><span class="params">(ToDoubleFunction&lt;? <span class="built_in">super</span> T&gt; keyExtractor)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(keyExtractor);</span><br><span class="line">        <span class="keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable)</span><br><span class="line">            (c1, c2) -&gt; Double.compare(keyExtractor.applyAsDouble(c1), keyExtractor.applyAsDouble(c2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>int, long, double을 위한 메소드들이 추가적으로 보인다.</li></ul><h3 id="핵심-정리"><a href="#핵심-정리" class="headerlink" title="핵심 정리"></a>핵심 정리</h3><ul><li>순서를 고려해야 하는 값 클래스를 작성한다면, 꼭 Comparable 인터페이스를 구현하자</li><li>Comparable 인터페이스를 구현하면, 그 인스턴스들을 쉽게 정렬하고, 검색하고, 비교 기능을 제공하는 컬렉션과 어우지도록 해야 한다.</li><li>compareTo 메서드는 박싱된 기본 타입 클래스가 제공하는 정적 compare 메서드나 Comparator 인터페이스가 제공하는 비교자 생성 메서드를 사용하자.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템13. clone 재정의는 주의해서 진행하라</title>
      <link href="/2021/07/04/effective_java/2021-07-04-item13/"/>
      <url>/2021/07/04/effective_java/2021-07-04-item13/</url>
      
        <content type="html"><![CDATA[<ul><li>널리 쓰이는 Cloneable 방식에 대해 clone 메서드를 잘 동작하게끔 해주는 구현 방법</li><li>언제 그렇게 해야 하는지 알려주고,</li><li>가능한 다른 선택지는 무엇이 있는지</li></ul><h3 id="Cloneable의-문제점"><a href="#Cloneable의-문제점" class="headerlink" title="Cloneable의 문제점"></a>Cloneable의 문제점</h3><ul><li>clone 메서드가 선언된 곳이 Cloneable이 아닌 Object이고, protected로 선언되어 있다.</li><li>그래서 Cloneable을 구현하는 것만으로 외부 객체에서 clone 메서드를 호출할 수 없다.</li><li>리플렉션을 사용한다고 하더라도 해당 객체가 접근이 허용된 clone 메서드를 제공한다는 보장이 없다.</li></ul><h3 id="Cloneable의-역할"><a href="#Cloneable의-역할" class="headerlink" title="Cloneable의 역할"></a>Cloneable의 역할</h3><ul><li><p>Object의 protected 메서드인 clone의 동작 방식을 결정한다.</p></li><li><p>Cloneable을 구현한 클래스의 인스턴스에서 clone을 호출하면 그 객체의 필드들을 하나하나 복사한 객체를 반환하며,<br>그렇지 않은 클래스의 인스턴스에서 호출하면 CloneNotSupportedException을 던진다. (이례적으로 인터페이스를 사용한 것이니 따라하지는 말기)</p></li><li><p><strong>실무에서 Cloneable을 구현한 클래스는 clone 메서드를 public으로 제공하며, 사용자는 당연히 복제가 제대로 이뤄지리라 기대한다.</strong></p></li><li><p>생성자를 호출하지 않고도 객체를 생성하게 되는 모순적인 메커니즘을 만든다.</p></li></ul><h3 id="clone-메서드의-허술한-일반-규약"><a href="#clone-메서드의-허술한-일반-규약" class="headerlink" title="clone 메서드의 (허술한) 일반 규약"></a>clone 메서드의 (허술한) 일반 규약</h3><blockquote><p>이 객체의 복사본을 생성해 반환한다. ‘복사’의 정확한 뜻은 그 객체를 구현한 클래스에 따라 다를 수 있다. 일반적인 의도는 다음과 같다. 어떤 객체 x에 대해 다음 식은 참이다.</p><p>x.clone() !&#x3D; x</p><p>또한 다음 식도 참이다.</p><p>x.clone().getClass() &#x3D;&#x3D; x.getClass();</p><p>하지만 이상의 요구를 반드시 만족해야 하는 것은 아니다.<br>한편 다음 식도 일반적으로 참이지만, 역시 필수는 아니다.</p><p>x.clone().equals(x)</p><p>관례상, 이 메서드가 반환하는 객체는 super.clone을 호출해 얻어야 한다. 이 클래스와 (Object를 제외한) 모든 상위 클래스가 이 관례를 따른다면 다음 식은 참이다.</p><p>x.clone().getClass() &#x3D;&#x3D; x.getClass()</p><p>관례상, 반환된 객체와 원본 객체는 독립적이어야 한다. 이를 만족하려면 super.clone으로 얻은 객체의 필드 중 하나 이상을 반환 전에 수정해야 할 수도 있다.</p></blockquote><ul><li>clone 메서드가 super.clone이 아닌, 생성자를 호출해 얻은 인스턴스를 반환해도 컴파일러는 불평하지(차별하지) 않는다.</li><li><strong>하지만 이 클래스의 하위 클래스에서 super.clone을 호출한다면 잘못된 클래스의 객체가 만들어져,</strong><br><strong>결국 하위 클래스의 clone 메서드가 제대로 동작하지 않게 된다.</strong><ul><li>clone을 재정의한 클래스가 final이라면 걱정해야 할 하위 클래스가 없으니 이 관례는 무시해도 안전하다.</li><li>하지만 final 클래스의 clone 메서드가 super.clone을 호출하지 않는다면 Cloneable을 구현할 이유도 없다.</li><li>Object의 clone 구현의 동작 방식에 기댈 필요가 없으니까!</li></ul></li></ul><h3 id="제대로-동작하는-clone-메서드를-가진-상위-클래스를-상속해-Cloneable을-구현하려면…"><a href="#제대로-동작하는-clone-메서드를-가진-상위-클래스를-상속해-Cloneable을-구현하려면…" class="headerlink" title="제대로 동작하는 clone 메서드를 가진 상위 클래스를 상속해 Cloneable을 구현하려면…"></a>제대로 동작하는 clone 메서드를 가진 상위 클래스를 상속해 Cloneable을 구현하려면…</h3><ol><li><strong>super.clone을 호출한다.</strong> (원본의 완벽한 복제본)</li><li><strong>반환하려고 하는 객체의 타입으로 형변환하여 확실히 한다.</strong> (재정의한 메서드의 반환 타입은 상위 클래스의 메서드가 반환하는 타입의 하위 타입일 수 있다.)</li><li><strong>clone은 원본 객체에 아무런 해를 끼치지 않는 동시에 복제된 객체의 불변식을 보장해야 한다.</strong></li><li>final로 선언된 필드에 대해서는 재정의가 불가능하기 때문에 <strong>Cloneable 아키텍처는 ‘가변 객체를 참조하는 필드는 final로 선언하라’는 일반 용법과 충돌한다.</strong></li><li><strong>public인 clone 메서드에서는 throws 절을 없애야 한다.</strong></li><li>상속해서 쓰기 위한 상속용 클래스에서는 어떤 상속 방식이든 Cloneable을 구현해서는 안 된다.</li><li>Cloneable을 구현한 스레드 안전 클래스를 작성할 때는 clone 메서드도 적절히 동기화해줘야 한다. <em>[아이템 78]</em></li></ol><h3 id="복잡한-가변-상태를-갖는-클래스용-재귀적-clone-메서드-코드-13-4-5"><a href="#복잡한-가변-상태를-갖는-클래스용-재귀적-clone-메서드-코드-13-4-5" class="headerlink" title="복잡한 가변 상태를 갖는 클래스용 재귀적 clone 메서드 (코드 13-4,5)"></a>복잡한 가변 상태를 갖는 클래스용 재귀적 clone 메서드 (코드 13-4,5)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashTable</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Entry[] buckets = ...;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Object key;</span><br><span class="line">    Object value;</span><br><span class="line">    Entry next;</span><br><span class="line">    </span><br><span class="line">    Entry(Object key, Object value, Entry next) &#123;</span><br><span class="line">      <span class="built_in">this</span>.key = key;</span><br><span class="line">      <span class="built_in">this</span>.value = value;</span><br><span class="line">      <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 엔트리 자신이 가리키는 연결 리스트를 반복적으로 복사한다.</span></span><br><span class="line">    Entry <span class="title function_">deepCopy</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">Entry</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(key, value, next);</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">Entry</span> <span class="variable">p</span> <span class="operator">=</span> result; p.next != <span class="literal">null</span>; p = p.next)</span><br><span class="line">        p.next = <span class="keyword">new</span> <span class="title class_">Entry</span>(p.next.key, p.next.value, p.next.next);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> HashTable <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">HashTable</span> <span class="variable">result</span> <span class="operator">=</span> (HashTable) <span class="built_in">super</span>.clone(); <span class="comment">// 형변환</span></span><br><span class="line">      result.buckets = <span class="keyword">new</span> <span class="title class_">Entry</span>[buckets.length];</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; buckets.length; i++)</span><br><span class="line">        <span class="keyword">if</span> (buckets[i] != <span class="literal">null</span>)</span><br><span class="line">          result.buckets[i] = buckets[i].deepCopy(); <span class="comment">// deepCopy()를 지원하는 buckets</span></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 나머지 생략</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h3><ul><li>Cloneable을 구현하는 모든 클래스는 clone을 재정의해야 한다.</li><li>이때 접근 제한자는 public으로, 반환 타입은 클래스 자신으로 변경한다. (형변환)</li><li>이 메서드는 가장 먼저 super.clone을 호출한 후 필요한 필드를 전부 적절히 수정한다.</li><li>일반적으로 이 말은 그 객체의 내부 ‘깊은 구조’에 숨어 있는 모든 가변 객체를 복사하고, 복제본이 가진 객체 참조 모두가 복사된 객체들을 가리키게 함을 뜻한다. <strong>(원래 객체를 가리키는 것이 아니라)</strong><ul><li>내부 복사는 주로 clone을 재귀적으로 호출해 구현하지만, 항상 최선의 방법은 아니다.</li></ul></li><li>기본 타입 필드와 불변 객체 참조만 갖는 클래스라면 아무 필드도 수정할 필요가 없다.</li><li>단, 일련번호나 고유 ID는 비록 기본 타입이나 불변일지라도 수정해줘야겠지?</li></ul><h3 id="Cloneable을-구현한-클래스가-아니라면"><a href="#Cloneable을-구현한-클래스가-아니라면" class="headerlink" title="Cloneable을 구현한 클래스가 아니라면?"></a>Cloneable을 구현한 클래스가 아니라면?</h3><ul><li><strong>복사 생성자와 복사 팩터리 방식</strong> (변환 생성자, 변환 팩터리) <em>[아이템 1]</em></li><li>Cloneable 만큼 모순적이지도 않고, 해당 클래스가 구현한 ‘인터페이스’ 타입의 인스턴스를 인수로 받을 수도 있다.</li><li>원본의 구현 타입에 얽매이지 않고 복제본의 타입을 직접 선택할 수 있다.<ul><li>예) HashSet 객체 s를 TreeSet 타입으로 복제할 수 있다.</li><li>clone으로는 불가능!!, 변환 생성자는 new TreeSet&lt;&gt;(s)으로 간단히 처리 가능</li></ul></li></ul><h3 id="핵심-정리"><a href="#핵심-정리" class="headerlink" title="핵심 정리"></a>핵심 정리</h3><ul><li>새로운 인터페이스를 만들 때는 절대 Cloneable을 확장해서는 안 된다. 새로운 클래스도 이를 구현해서는 안 된다.</li><li>final 클래스라면 Cloneable을 구현해도 위험이 크지 않지만, 성능 최적화 관점에서 검토한 후 별 문제가 없을 때만 드물게 허용해라</li><li>기본 원칙은 <strong>복제 기능은 생성자와 팩터리를 이용하는 게 최고</strong>라는 것이다.</li><li>단, <strong>배열</strong> 만큼은 clone 방식이 가장 깔끔한, 합당한 예외다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템12. toString을 항상 재정의하라</title>
      <link href="/2021/06/07/effective_java/2021-06-07-item12/"/>
      <url>/2021/06/07/effective_java/2021-06-07-item12/</url>
      
        <content type="html"><![CDATA[<ul><li>toString()의 일반 규약: 간결하면서 사람이 읽기 쉬운 형태의 유익한 정보</li><li><strong>toString()을 잘 구현한 클래스는 사용하기에 휠씬 즐겁고, 그 클래스를 사용한 시스템은 디버깅하기 쉽다.</strong></li></ul><h3 id="좋은-toString"><a href="#좋은-toString" class="headerlink" title="좋은 toString()"></a>좋은 toString()</h3><ul><li>toString()을 제대로 재정의했다면, 출력문에 사용해서 쉽게 객체 내부의 정보를 확인할 수 있다.</li><li><strong>객체가 가진 주요 정보 모두를 반환하는 게 좋다.</strong><ul><li>그렇지 못했을 때 예외 발생 시, 해당 객체에 무슨 문제가 있는지 확인이 어렵다.</li><li><strong>toString()을 구현할 때면 반환값의 포맷을 문서화할지 정해야 한다.</strong> (전화번호나 행렬 같은 값 클래스라면 문서화하자)</li><li>문자열과 객체를 상호 전환할 수 있는 정적 팩터리나 생성자를 함께 제공해주면 좋다. ex) BigInteger, BigDecimal</li></ul></li><li>단점: 포맷을 한번 명시하면 평생 그 포맷에 얽매이게 된다.</li><li><strong>포맷을 명시하든 아니든 작성자의 의도는 명확히 밝혀야 한다.</strong></li><li>포맷 명시 여부와 상관없이 <strong>toString()이 반환한 값에 포함된 정보를 얻어올 수 있는 API를 제공하자.</strong></li><li>정적 유틸리티 클래스와 열거 타입(enum)는 toString()이 필요 없다.</li><li>하위 클래스들이 공유해야 할 문자열 표현이 있는 추상 클래스라면 toString()을 재정의해줘야 한다. ex) Collection 구현체에서 사용한다.</li><li>IDE에서 자동 생성해주는 toString()이 Object의 toString()보다는 훨씬 유용하다.</li></ul><h3 id="핵심-정리"><a href="#핵심-정리" class="headerlink" title="핵심 정리"></a>핵심 정리</h3><ul><li>모든 구체 클래스에서 Object의 toString()을 재정의(오버라이드)하자</li><li>사용하기에도 즐겁고, 그 클래스를 사용한 시스템을 디버깅하기 쉽게 해준다.</li><li>해당 객체에 관한 명확하고 유용한 정보를 읽기 좋은 형태로 반환해야 한다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템11. equals를 재정의하려거든 hashCode도 재정의하라</title>
      <link href="/2021/06/06/effective_java/2021-06-06-item11/"/>
      <url>/2021/06/06/effective_java/2021-06-06-item11/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>equals를 재정의한 클래스 모두에서 hashCode도 재정의해야 한다.</strong> (IntelliJ에서는 자동으로 같이 생성해주고 있다.)</li><li><strong>그렇지 않으면</strong> 해당 클래스의 인스턴스를 HashMap 이나 HashSet 같은 컬렉션의 원소로 사용할 때 문제를 일으킬 것이다.</li></ul><h3 id="hashCode에-대한-Object-명세-일반-규약"><a href="#hashCode에-대한-Object-명세-일반-규약" class="headerlink" title="hashCode에 대한 Object 명세(일반 규약)"></a>hashCode에 대한 Object 명세(일반 규약)</h3><ul><li>equals 비교에 사용되는 정보가 변경되지 않았다면,<br>애플리케이션이 실행되는 동안 그 객체의 hashCode 메서드는 몇 번을 호출해도 일관되게 항상 같은 값을 반환해야 한다.<br>단, 애플리케이션을 다시 실행한다면 이 값이 달라져도 상관없다.</li><li>equals(Object)가 두 객체를 같다고 판단했다면, 두 객체의 hashCode는 똑같은 값을 반환해야 한다.</li><li>equals(Object)가 두 객체를 다르다고 판단했더라도, 두 객체의 hashCode가 서로 다른 값을 반환할 필요는 없다.<br>단, 다른 객체에 대해서는 다른 값을 반환해야 해시테이블의 성능이 좋아진다.</li></ul><h3 id="특히-주의해야-할-부분"><a href="#특히-주의해야-할-부분" class="headerlink" title="특히 주의해야 할 부분"></a>특히 주의해야 할 부분</h3><ul><li>equals()가 두 객체를 같다고 판단했다면, 두 객체의 hashCode는 똑같은 값을 반환해야 한다.</li><li><strong>논리적으로 같은 객체는 같은 해시코드를 반환해야 한다.</strong></li><li><a href="https://github.com/boring-km/effective-java-practice/commit/b5d128127413e0a884aa7ea5146d5a3f899130fc">예시 참조</a></li></ul><h3 id="좋은-hashCode를-작성하는-간단한-요령"><a href="#좋은-hashCode를-작성하는-간단한-요령" class="headerlink" title="좋은 hashCode를 작성하는 간단한 요령"></a>좋은 hashCode를 작성하는 간단한 요령</h3><ul><li>교재보다 좀더 요약해서 내가 만든 Holiday 객체에 젹용해보자</li></ul><ol><li>int 변수 result를 선언한 후 값 c로 초기화 한다.<br>이때 c는 해당 객체의 첫번째 핵심 필드를 단계 2.a 방식으로 계산한 해시코드다.<br><strong>(핵심 필드 -&gt; equals 비교에 사용되는 필드)</strong></li><li>해당 객체의 나머지 핵심 필드 f 각각에 대해 다음 작업을 수행</li></ol><blockquote><p>a. 해당 필드의 해시코드 c를 계산한다.</p><blockquote><p>ㄱ. 기본 타입 필드라면, Type.hashCode(f)를 수행한다.</p><p>ㄴ. 참조 타입 필드면서 이 클래스의 equals 메서드가 이 필드의 equals를 재귀적으로 호출해 비교한다면,<br>이 필드의 hashCode를 재귀적으로 호출한다. 계산이 더 복잡해질 것 같으면, 이 필드의 표준형을 만들어 그 표준형의 hashCode를 호출한다.<br>필드의 값이 null이면 전통적으로 0을 사용한다.</p><p>ㄷ. 필드가 배열이라면, 핵심 원소 각각을 별도 필드처럼 다룬다.<br>이상의 규칙을 재귀적으로 적용해 각 핵심 원소의 해시코드를 계산한 다음, 단계 2.b 방식으로 갱신한다.<br>배열에 핵심 원소가 하나도 없다면 단순히 상수(0)를 사용한다.<br>모든 원소가 핵심 원소라면 Arrays.hashCode를 사용한다.</p></blockquote><p>b. 단계 2.a에서 계산한 해시코드 c로 result를 갱신한다.<br>(result &#x3D; 31 * result + c;)</p></blockquote><ol start="3"><li>result를 반환한다.</li></ol><ul><li>2.b의 31 * result는 필드를 곱하는 순서에 따라 result 값이 달라지게 한다.</li><li>31: 홀수이면서 소수라서 선택, “31 * i”를 “(i &lt;&lt; 5) - i”로 최적화하기도 좋다.</li><li><a href="https://github.com/boring-km/effective-java-practice/commit/f237cf687b221e48bfc97212034c3adeceaa8342">hashCode 재정의 예시 참조</a></li><li>클래스가 불변이고 해시코드를 계산하는 비용이 크다면, 매번 새로 계산하기 보다는 캐싱하는 방식을 고려해야 한다.<ul><li>인스턴스가 만들어질 때 해시코드를 미리 계산해두는 방식</li><li>해시의 키로 사용되지 않는 경우라면 hashCode가 처음 불릴 때 계산하는 lazy initialization 전략</li><li>thread safe 하도록 신경쓰자!</li></ul></li><li><a href="https://github.com/boring-km/effective-java-practice/commit/3aca3714464f221254b7459a86cc41550a96bc38">캐싱 방식 예시</a></li><li><strong>성능을 높인다고 해시코드를 계산할 때 핵심 필드를 생략해서는 안 된다.</strong></li><li><strong>hashCode가 반환하는 값의 생성 규칙을 API 사용자에게 자세히 공표하지 말자.</strong></li><li><strong>그래야 클라이언트가 이 값에 의지하지 않게 되고, 추후에 계산 방식을 바꿀 수도 있다.</strong></li></ul><h3 id="핵심-정리"><a href="#핵심-정리" class="headerlink" title="핵심 정리"></a>핵심 정리</h3><ul><li>equals를 재정의할 때는 hashCode도 반드시 재정의해야 한다.</li><li>재정의한 hashCode는 Object의 일반 규약을 따라야 하며, 서로 다른 인스턴스라면 되도록 해시코드도 서로 다르게 구현해야 한다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템10. equals는 일반 규약을 지켜 재정의하라</title>
      <link href="/2021/06/02/effective_java/2021-06-02-item10/"/>
      <url>/2021/06/02/effective_java/2021-06-02-item10/</url>
      
        <content type="html"><![CDATA[<ul><li>재정의 하기 쉬워보이지만 곳곳에 함정이 있다.</li></ul><h3 id="차라리-재정의하지-않는-것이-나은-상황"><a href="#차라리-재정의하지-않는-것이-나은-상황" class="headerlink" title="차라리 재정의하지 않는 것이 나은 상황"></a>차라리 재정의하지 않는 것이 나은 상황</h3><ul><li>각 인스턴스가 본질적으로 고유하다.<ul><li>값을 표현하는 것이 아닌 동작하는 개체를 표현하는 클래스 ex) Thread</li><li>인스턴스의 ‘논리적 동치성’을 설계자가 검사할 일이 없을 때</li><li>상위 클래스에서 재정의한 equals가 하위 클래스에도 딱 들어맞을 때</li><li>클래스가 private 이거나 package-private 이고 equals 메서드를 호출할 일이 없다.</li><li>(추가) 값이 같은 인스턴스가 둘 이상 만들어지지 않음을 보장하는 인스턴스 통제 클래스일 때 ex) Enum</li></ul></li></ul><h3 id="언제-재정의해야하나"><a href="#언제-재정의해야하나" class="headerlink" title="언제 재정의해야하나?"></a>언제 재정의해야하나?</h3><ul><li>객체 식별성이 아닌 논리적 동치성을 확인해야 하는데, 상위 클래스의 equals가 논리적 동치성을 비교하도록 재정의되지 않았을 때</li><li>주로 값 클래스들이 해당된다. ex) Integer, String</li><li>두 값 객체를 equals로 비교하려는 프로그래머는 객체가 같은 것을 확인하는 것이 아ㅏ니라 <strong>값이</strong> 같은지를 알고 싶어 할 것이다.</li></ul><h3 id="equals-를-재정의할-때-따라야-할-일반-규약-Object-명세"><a href="#equals-를-재정의할-때-따라야-할-일반-규약-Object-명세" class="headerlink" title="equals()를 재정의할 때 따라야 할 일반 규약 - Object 명세"></a>equals()를 재정의할 때 따라야 할 일반 규약 - Object 명세</h3><blockquote><p>equals()는 동치관계(equivalence relation)를 구현하며, 다음을 만족한다.</p><p><strong>반사성(reflexivity)</strong>: null이 아닌 모든 참조 값 x에 대해, x.equals(x)는 true다.</p><p><strong>대칭성(symmetry)</strong>: null이 아닌 모든 참조 값 x,y에 대해, x.equals(y)가 true면 y.equals(x)도 true다.</p><p><strong>추이성(transitivity)</strong>: null이 아닌 모든 참조 값 x, y, z에 대해, x.equals(y)가 true이고 y.equals(z)도 true면, x.equals(z)도 true다.</p><p><strong>일관성(consistency)</strong>: null이 아닌 모든 참조 값 x, y에 대해, x.equals(y)를 반복해서 호출하면 항상 true를 반환하거나 항상 false를 반환한다.</p><p><strong>null-아님</strong>: null이 아닌 모든 참조 값 x에 대해, x.equals(null)은 false다.</p></blockquote><ul><li>동치관계: 집합을 서로 같은 원소들로 이뤄진 부분집합(동치 클래스, equivalence class)으로 나누는 연산</li><li>equals 메서드가 쓸모 있으려면 모든 원소가 같은 동치류에 속한 어떤 원소와도 서로 교환할 수 있어야 한다.</li></ul><h4 id="반사성"><a href="#반사성" class="headerlink" title="반사성"></a>반사성</h4><ul><li>객체는 자기 자신과 같아야 한다.</li></ul><h4 id="대칭성"><a href="#대칭성" class="headerlink" title="대칭성"></a>대칭성</h4><ul><li>두 객체는 서로에 대한 동치 여부에 똑같이 답해야 한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 대소문자를 구별하지 않는 문자열을 구현한 클래스 예시</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CaseInsensitiveString</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String s;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">CaseInsensitiveString</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.s = Objects.requireNonNull(s);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> CaseInsensitiveString)</span><br><span class="line">        <span class="keyword">return</span> s.equalsIgnoreCase(</span><br><span class="line">                ((CaseInsensitiveString) o).s);</span><br><span class="line">    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> String)    <span class="comment">// String하고도 비교함</span></span><br><span class="line">        <span class="keyword">return</span> s.equalsIgnoreCase((String) o);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 코드 생략</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>대칭성 위반</strong>: CaseInsensitiveString의 equals()는 String을 알고 있지만, String의 equals()는 CaseInsensitiveString의 존재를 모른다!</li><li><strong>equals 규약을 어기면 그 객체를 사용하는 다른 객체들이 어떻게 반응할지 알 수 없다.</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 책에서 표현한 간단한 equals()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CaseInsensitiveString</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String s;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">CaseInsensitiveString</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.s = Objects.requireNonNull(s);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> o <span class="keyword">instanceof</span> CaseInsensitiveString &amp;&amp;</span><br><span class="line">            ((CaseInsensitiveString) o).s.equalsIgnoreCase(s);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 코드 생략</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IntelliJ에서 자동완성해주는 equals()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CaseInsensitiveString</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String s;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">CaseInsensitiveString</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.s = Objects.requireNonNull(s);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">CaseInsensitiveString</span> <span class="variable">that</span> <span class="operator">=</span> (CaseInsensitiveString) o;</span><br><span class="line">    <span class="keyword">return</span> Objects.equals(s, that.s);   <span class="comment">// equalsIgnoreCase로 변경하면 될듯</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hash(s);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 코드 생략</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="추이성-1"><a href="#추이성-1" class="headerlink" title="추이성(1)"></a>추이성(1)</h4><ul><li>삼단논법의 얘기와 동일함</li><li><strong>구체 클래스를 확장해 서로운 값을 추가하면서 equals 규약을 만족시킬 방법은 존재하지 않는다.</strong></li><li>부모 클래스의 성질을 유지하면서 equals() 사용이 어렵다.</li><li>교재 예시 요약<ul><li>x, y 값을 가지는 Point 객체를 상속하는 ColorPoint 객체에는 color 정보가 추가로 있다.</li><li>equals()를 사용하여 x, y, color 값이 모두 일치하는지 확인하고 싶다.</li><li>ColorPoint를 재정의한다고 해도 Point에서는 ColorPoint를 알지 못한다.</li><li>ColorPoint에서 Point 객체를 무시하면 대칭성은 지켜지지만 추이성이 위배된다.</li><li>심지어 무한재귀를 발생할 수 있다.</li><li>instanceof를 getClass 검사로 바꾸면? -&gt; 리스코프 치환 원칙 위배</li><li>Point의 하위 클래스가 어디서든 Point로 활용될 수 있어야하는데 그렇지 못한 상황이 생긴다.</li></ul></li></ul><h4 id="추이성-2-대안-Composition"><a href="#추이성-2-대안-Composition" class="headerlink" title="추이성(2) 대안 - Composition"></a>추이성(2) 대안 - Composition</h4><ul><li>(역시 상속은 너무 단점이 많다.)</li><li>Point를 상속하는 대신 Point를 ColorPoint의 private 필드로 두고 구현</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> y;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Point))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Point</span> <span class="variable">p</span> <span class="operator">=</span> (Point) o;</span><br><span class="line">        <span class="keyword">return</span> p.x == x &amp;&amp; p.y == y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorPoint</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Point point;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Color color;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ColorPoint</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, Color color)</span> &#123;</span><br><span class="line">    point = <span class="keyword">new</span> <span class="title class_">Point</span>(x, y);</span><br><span class="line">    <span class="built_in">this</span>.color = Objects.requireNonNull(color);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ColorPoint의 Point 뷰 반환</span></span><br><span class="line">  <span class="keyword">public</span> Point <span class="title function_">asPoint</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> point;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> ColorPoint)) <span class="comment">// ColorPoint만 받음</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">ColorPoint</span> <span class="variable">cp</span> <span class="operator">=</span> (ColorPoint) o;</span><br><span class="line">    <span class="keyword">return</span> cp.point.equals(point) &amp;&amp; cp.color.equals(color);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>추상 클래스의 하위 클래스라면 equals 규약을 지키면서 값을 추가 가능하다.<ul><li>상위 클래스를 직접 인스턴스로 만들 수 없다면 가능하다.</li></ul></li></ul><h4 id="일관성"><a href="#일관성" class="headerlink" title="일관성"></a>일관성</h4><ul><li>두 객체가 같다면 앞으로도 영원히 같아야 한다.</li><li><strong>equals의 판단에 신뢰할 수 없는 자원이 끼어들게 해서는 안 된다.</strong></li><li>URL의 equals()가 URL과 매핑된 호스트의 IP주소를 비교하는데, 호스트 이름을 IP 주소로 바꾸기 위해 네트워크를 통할 때 그 결과가 항상 같다고 보장할 수 없다.</li><li>URL의 사례와 같은 문제를 피하려면 equals()는 항시 메모리에 존재하는 객체만을 사용한 결정적 계산만 수행해야 한다.</li></ul><h4 id="null-아님"><a href="#null-아님" class="headerlink" title="null-아님"></a>null-아님</h4><ul><li>모든 객체가 null과 같지 않아야 한다.</li><li>equals()로 들어온 객체가 null인지 아닌지 검사할 필요 없다.</li><li>instanceof를 사용하는 equals()에서는 타입 검사에서 false를 반환하므로 필요없다.</li><li>(추가) IntelliJ에서 equals() 오버라이드 시에는 null 확인과 해당 객체의 클래스가 현재 객체와 동일한 클래스인지 확인하고 있다.</li></ul><h3 id="양질의-equals-메서드-구현-방법"><a href="#양질의-equals-메서드-구현-방법" class="headerlink" title="양질의 equals 메서드 구현 방법"></a>양질의 equals 메서드 구현 방법</h3><ol><li>&#x3D;&#x3D; 연산자를 사용해 입력이 자기 자신의 참조인지 확인한다.</li><li>instanceof 연산자로 입력이 올바른 타입인지 확인한다.</li><li>입력을 올바른 타입으로 형변환한다.</li><li>입력 객체와 자기 자신의 대응되는 ‘핵심’ 필드들이 ㅁ두 일치하는지 하나씩 검사한다.</li></ol><h3 id="그래서-구현한-equals-가-대칭적이고-추이성이-있고-일관적인가"><a href="#그래서-구현한-equals-가-대칭적이고-추이성이-있고-일관적인가" class="headerlink" title="그래서 구현한 equals()가 대칭적이고 추이성이 있고, 일관적인가?"></a>그래서 구현한 equals()가 대칭적이고 추이성이 있고, 일관적인가?</h3><ul><li>Unit Test를 작성해서 돌려보자</li><li>3가지 요건 중 하나라도 실패한다면 원인을 찾아 고치자 (이 3가지가 주요 문제이기 때문이다.)</li><li>equals를 재정의할 때 hashCode도 반드시 재정의하자 <em>(아이템11)</em> (TDD 책에서도 얘기했던 부분)</li><li>너무 복잡하게 해결하려고 파고들다가 오히려 실수가 발생한다.</li></ul><h3 id="핵심-정리"><a href="#핵심-정리" class="headerlink" title="핵심 정리"></a>핵심 정리</h3><ul><li>꼭 필요한 경우가 아니면 equals를 재정의하지 말자.</li><li>재정의해야 할 때에는 그 클래스의 핵심 필드 모두를 빠짐없이 5가지 규약을 확실히 지켜가며 비교해야 한다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템9. try-finally 보다는 try-with-resources를 사용하라</title>
      <link href="/2021/05/28/effective_java/2021-05-28-item9/"/>
      <url>/2021/05/28/effective_java/2021-05-28-item9/</url>
      
        <content type="html"><![CDATA[<ul><li>자바 라이브러리에 존재하는 close 메서드를 필요로 하는 자원들이 있다. (예: InputStream, java.sql.Connection 등)</li><li>전통적으로 try-finally가 많이 쓰였다.</li></ul><h3 id="try-finally"><a href="#try-finally" class="headerlink" title="try-finally"></a>try-finally</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 자원을 하나 사용할 때</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinallyExample</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> String <span class="title function_">firstLineOfFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(path));</span><br><span class="line">        <span class="comment">// 기기의 물리적인 문제가 생긴다면</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> br.readLine();   <span class="comment">// 첫번째 예외 발생</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            br.close(); <span class="comment">// 두번째 예외 발생</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 결론적으로 첫번째 예외에 대한 추적 내역이 사라지게 된다.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 자원을 두 개 사용할 때</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinallyExample</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> String <span class="title function_">copy</span><span class="params">(String src, String dst)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dst);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[BUFFER_SIZE];</span><br><span class="line">                <span class="type">int</span> n;</span><br><span class="line">                <span class="keyword">while</span> ((n = in.read(buf)) &gt;= <span class="number">0</span>)</span><br><span class="line">                    out.write(buf, <span class="number">0</span>, n);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            in.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>자원이 늘어날수록 코드가 너무 지저분해진다.</li></ul><h3 id="try-with-resources-방식"><a href="#try-with-resources-방식" class="headerlink" title="try-with-resources 방식"></a>try-with-resources 방식</h3><ul><li>자바 7부터 추가됨</li><li>사용하려면 해당 자원이 AutoCloseable 인터페이스를 구현해야 함 <strong>(닫아야 하는 자원을 뜻하는 클래스를 작성할 때)</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 자원을 하나 사용할 때</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WithResourcesExample</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> String <span class="title function_">firstLineOfFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(path))) &#123;</span><br><span class="line">            <span class="keyword">return</span> br.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 자원을 두 개 사용할 때</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WithResourcesExample</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(String src, String dst)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 복수의 자원을 처리함</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dst)) &#123;</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[BUFFER_SIZE];</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">while</span> ((n = in.read(buf)) &gt;= <span class="number">0</span>)</span><br><span class="line">                out.write(buf, <span class="number">0</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>코드가 더 짧아지고 자원 선언에서 발생한 예외가 그 이후의 예외로 인해 사라지지 않는다.</li><li>catch 절도 동일하게 사용 가능하다.</li></ul><h3 id="핵심-정리"><a href="#핵심-정리" class="headerlink" title="핵심 정리"></a>핵심 정리</h3><ul><li>꼭 회수해야 하는 자원을 다룰 때에는 try-finally 말고, try-with-resources를 사용하자.</li><li>코드는 더 짧고 분명해진다.</li><li>만들어지는 예외 정보도 훨씬 유용하다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템8. finalizer와 cleaner 사용을 피하라</title>
      <link href="/2021/05/27/effective_java/2021-05-27-item8/"/>
      <url>/2021/05/27/effective_java/2021-05-27-item8/</url>
      
        <content type="html"><![CDATA[<ul><li>자바의 객체 소멸자 finalizer, cleaner</li><li>finalizer는 예측할 수 없고, 상황에 따라 위험할 수 있어 일반적으로 불필요하다.</li><li>cleaner도 동일하게 예측할 수 없고, 느리고, 일반적으로 불필요하다.</li><li>C++에서의 파괴자는 특정 객체와 관련된 자원을 회수하는 보편적인 방법으로 여기서의 소멸자와는 다른 개념이다.</li><li>finalizer와 cleaner로는 제때 실행되어야 하는 작업은 절대 할 수 없다. (비동기로만 동작하는 것 같다.)</li><li>상태를 영구적으로 수정하는 작업에서는 절대 finalizer나 cleaner에 의존하지 말자</li><li>성능 문제와 보안 문제까지 일으킨다.</li><li>final이 아닌 클래스를 finalizer 공격으로부터 방어하려면 아무 일도 하지 않는 finalize 메서드를 만들고 final로 선언해라</li></ul><h3 id="finalizer-cleaner-용도"><a href="#finalizer-cleaner-용도" class="headerlink" title="finalizer, cleaner 용도"></a>finalizer, cleaner 용도</h3><ul><li>자원의 소유자가 close 메서드를 호출하지 않는 것에 대비한 안전망 역할</li><li>자바 피어를 가비지 컬렉터가 회수할 때 네이티브 객체까지 회수하지 못할 때 사용됨<ul><li>(성능 저하를 감당할 수 있고 네이티브 피어가 심각한 자원을 가지고 있지 않을 때에만)</li></ul></li></ul><h3 id="finalizer-cleaner의-대안"><a href="#finalizer-cleaner의-대안" class="headerlink" title="finalizer, cleaner의 대안"></a>finalizer, cleaner의 대안</h3><ul><li><strong>AutoCloseable을 구현</strong>하고, 클리이언트에서 인스턴스를 다 쓰고 나면 close 메서드를 호출하면 된다. (예외가 발생해도 제대로 종료되도록 <strong>구현</strong>해야 한다.)</li><li>각 인스턴스는 자신이 닫혔는지를 추적하는 것이 좋다. (close() 사용)</li><li>결국 구현할 때에 Try-with-resources를 사용해서 직접 자원해제를 수동적으로 해야한다.</li><li>클라이언트를 조금만 잘못 구현해도 객체의 청소가 이뤄질지 보장할 수 없는 상태가 된다.</li></ul><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>웬만하면 쓸 일이 없어야겠다.</li><li>만약 사용하게 되어도 대안으로 제시된 방법(p.44 ~ p.45)을 이용해서 클라이언트까지 문제없이 작성해야겠다.</li><li>cleaner(자바 8까지는 finalizer)는 안전망 역할이나 중요하지 않은 네이티브 자원 회수용으로만 사용하자. (불확실성과 성능 저하에 주의하면서)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템7. 다 쓴 객체 참조를 해제하라</title>
      <link href="/2021/05/24/effective_java/2021-05-24-item7/"/>
      <url>/2021/05/24/effective_java/2021-05-24-item7/</url>
      
        <content type="html"><![CDATA[<ul><li>다 쓴 객체를 알아서 회수해간다고 끝이 아니다.</li><li>Memory Leak (메모리 누수) Issue</li><li>심할 때는 디스크 페이징이나 OutOfMemoryError를 일으킬 수 있다.</li></ul><h3 id="메모리-누수-예시-원인1-스택"><a href="#메모리-누수-예시-원인1-스택" class="headerlink" title="메모리 누수 예시 (원인1. 스택)"></a>메모리 누수 예시 (원인1. 스택)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.EmptyStackException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] elements;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stack</span><span class="params">()</span> &#123;</span><br><span class="line">        elements = <span class="keyword">new</span> <span class="title class_">Object</span>[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Object e)</span> &#123;</span><br><span class="line">        ensureCapacity();</span><br><span class="line">        elements[size++] = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EmptyStackException</span>();</span><br><span class="line">        <span class="keyword">return</span> elements[--size];    <span class="comment">// 배열에서 객체가 반환되지는 않음 -&gt; memory leak</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (elements.length == size)</span><br><span class="line">            elements = Arrays.copyOf(elements, <span class="number">2</span> * size + <span class="number">1</span>);   <span class="comment">// 스택이 커짐</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>스택은 자기 메모리를 직접 관리한다.<ul><li>그래서 가비지 컬렉터가 스택 안에 있는 비활성화된 객체 영역을 알아차릴 수 없다.</li></ul></li><li>객체 참조 하나를 살려두면 가비지 컬렉터는 그 객체뿐 아니라 그 객체가 참조하는 모든 객체를 회수해가지 못한다.</li><li>그래서 소수의 객체가 많은 객체에 영향을 주면서 성능에 악영향이 될 수 있다.</li></ul><h3 id="메모리-누수를-해결하려면…"><a href="#메모리-누수를-해결하려면…" class="headerlink" title="메모리 누수를 해결하려면…"></a>메모리 누수를 해결하려면…</h3><ul><li>해당 참조를 다 썼을 때 null 처리 (참조 해제)</li><li>그렇다고 모든 코드에 메모리 누수가 의심될 때마다 작성하면 코드가 더러워진다.</li><li><strong>객체 참조를 null 처리하는 일은 예외적인 경우여야 한다.</strong></li><li>다 쓴 객체 참조를 해제하는 가장 좋은 방법은 <strong>그 참조를 담은 변수를 scope 밖으로 밀어내는 것이다.</strong></li><li><strong>자기 메모리를 직접 관리하는 클래스라면 프로그래머는 항상 메모리 누수에 주의해야 한다.</strong></li><li>메모리 누수 관련 글<ul><li><a href="https://www.infoworld.com/article/2071737/plug-memory-leaks-in-enterprise-java-applications.html">관련 링크 원문</a></li><li><a href="https://itdar.tistory.com/131">관련 링크 번역</a></li></ul></li></ul><h3 id="캐시-원인2"><a href="#캐시-원인2" class="headerlink" title="캐시 (원인2)"></a>캐시 (원인2)</h3><ul><li>객체 참조를 캐시에 넣고 나서, 이 사실을 까먹어서 방치될 수 있다.</li><li>사용하지 않는 캐시 엔트리를 청소하는 방법을 사용한다.</li></ul><h3 id="리스너-콜백-원인3"><a href="#리스너-콜백-원인3" class="headerlink" title="리스너, 콜백 (원인3)"></a>리스너, 콜백 (원인3)</h3><ul><li>클라이언트가 callback을 등록만 하고 명확히 해지하지 않는다면, 콜백은 계속 쌓인다.</li><li>이런 상황에서 콜백을 <em>약한 참조</em>로 저장하면 가비지 컬렉터가 즉시 수거해간다. (WeakHashMap의 Key)</li></ul><h3 id="핵심-정리"><a href="#핵심-정리" class="headerlink" title="핵심 정리"></a>핵심 정리</h3><ul><li>메모리 누수는 겉으로 잘 드러나지 않는다.</li><li>발견하기도 정말 어려울 수 있기 때문에 예방법을 익히는 것이 매우 중요하다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템6. 불필요한 객체 생성을 피하라</title>
      <link href="/2021/05/03/effective_java/2021-05-03-item6/"/>
      <url>/2021/05/03/effective_java/2021-05-03-item6/</url>
      
        <content type="html"><![CDATA[<ul><li>똑같은 기능의 객체를 매번 생성하기보다는 객체 하나를 재사용하는 편이 나을 때가 많다.</li><li>정적 팩터리 메서드를 제공한다면 사용해서 불필요한 객체 생성을 피하자</li></ul><h3 id="생성-비용이-아주-비싼-객체들"><a href="#생성-비용이-아주-비싼-객체들" class="headerlink" title="생성 비용이 아주 비싼 객체들"></a>생성 비용이 아주 비싼 객체들</h3><ul><li>반복해서 필요하다면 캐싱하여 재사용하는 것이 좋다.</li><li><a href="https://github.com/boring-km/effective-java-practice/blob/master/test/effective/java/unnecessary_object_creation/RomanNumeralsTest.java">Unit Test Link</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 개선 전</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RomanNumerals</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isRomanNumeral</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.matches(<span class="string">&quot;^(?=.)M*(C[MD]|D?C&#123;0,3&#125;)&quot;</span> +</span><br><span class="line">                <span class="string">&quot;X([CL]|L?X&#123;0,3&#125;)(I[XV]|V?I&#123;0,3&#125;)$&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 개선 후</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RomanNumerals</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">ROMAN</span> <span class="operator">=</span> Pattern.compile(</span><br><span class="line">            <span class="string">&quot;^(?=.)M*(C[MD]|D?C&#123;0,3&#125;)&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;X([CL]|L?X&#123;0,3&#125;)(I[XV]|V?I&#123;0,3&#125;)$&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isRomanNumeralByPattern</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ROMAN.matcher(s).matches();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="어댑터-Adapter"><a href="#어댑터-Adapter" class="headerlink" title="어댑터(Adapter)"></a>어댑터(Adapter)</h3><ul><li>실제 작업은 뒷단 객체에 위임하고, 자신은 제2의 인터페이스 역할을 해주는 객체다.</li><li>뒷단 객체 외에는 관리할 상태가 없으므로 뒷단 객체 하나당 어댑터 하나씩만 만들어지면 충분하다.</li><li>ex) Map 인터페이스의 <em>Map.keySet()</em> 은 새로운 인스턴스를 생성하는 것이 아닌 Map 객체 안의 키 전부를 담은 Set 뷰를 반환한다.</li></ul><h1 id="Auto-Boxing"><a href="#Auto-Boxing" class="headerlink" title="Auto Boxing"></a>Auto Boxing</h1><ul><li>프로그래멋가 기본 타입과 boxing 된 기본 타입을 섞어 쓸 때 자동으로 상호 변환해주는 기술</li><li><strong>기본 타입과 boxing 된 기본 타입의 구분을 흐리게 하지만, 완전히 없애는 것은 아니다.</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// long과 Long</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= Integer.MAX_VALUE; i++)</span><br><span class="line">        sum += i;   <span class="comment">// 인스턴스가 계속 새로 생성되는 상황</span></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>boxing된 기본 타입보다는 기본 타입을 사용하고, 의도치 않은 auto boxing이 숨어들지 않도록 주의하자!</strong></li></ul><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>객체 생성이 비싸니까 무조건 피하라는 말이 아니다.</li><li>프로그램의 명확성, 간결성, 기능을 위해서 객체를 추가로 생성하는 것이라면 일반적으로 좋은 일이다.</li><li>아주 무거운 객체가 아니고서야 자신만의 객체 pool을 만드는 일은 없도록 하자 (DB는 필요하다)</li><li><em>[아이템 50] 방어적 복사</em> 와 대조되는 개념이다.</li><li>불필요한 객체 생성은 그저 코드 형태와 성능에만 영향을 준다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템5. 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라</title>
      <link href="/2021/04/25/effective_java/2021-04-25-item5/"/>
      <url>/2021/04/25/effective_java/2021-04-25-item5/</url>
      
        <content type="html"><![CDATA[<ul><li>많은 클래스가 하나 이상의 자원에 의존한다. (적게 의존할수록 좋겠지만 현실의 프로그램은 그렇지 않다는 얘기인 것 같다.)</li><li>사용하는 자원에 따라 동작이 달라지는 클래스에는..<ul><li>정적 유틸리티 클래스는 적합하지 않다.</li><li>싱글턴 방식도 적합하지 않다.</li></ul></li></ul><h3 id="인스턴스를-생성할-때-생성자에-필요한-자원을-넘겨주는-방식"><a href="#인스턴스를-생성할-때-생성자에-필요한-자원을-넘겨주는-방식" class="headerlink" title="인스턴스를 생성할 때 생성자에 필요한 자원을 넘겨주는 방식"></a>인스턴스를 생성할 때 생성자에 필요한 자원을 넘겨주는 방식</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellChecker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lexicon dictionary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SpellChecker</span><span class="params">(Lexicon dictionary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dictionary = Objects.requireNonNull(dictionary);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String word)</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">suggestions</span><span class="params">(String typo)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위의 예시에서 dictionary 객체를 생성자에서 의존성 주입을 했다는 것을 볼 수 있다.</li><li>생성자, 정적 팩터리, 빌더에 모두 똑같이 응용 가능하다.</li><li>더 응용한 방식으로 생성자에 자원 팩터리를 넘겨주는 방식이 있다. <strong>팩터리 메서드 패턴</strong> (너무 유명한 디자인 패턴!)</li></ul><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>물론 의존성 주입을 코드 상에서 직접 해주는 방법이 나쁜 것은 아니지만 너무 많은 의존성 주입이 필요하게 되면 코드가 복잡해진다.</li><li>Dagger, Guice, Spring에서 프레임워크를 이용해 의존성 주입을 대신 맡기자</li><li><strong>클래스의 유연성, 재사용성, 테스트 용이성을 많이 개선 해준다.</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템4. 인스턴스화를 막으려거든 private 생성자를 사용하라</title>
      <link href="/2021/04/11/effective_java/2021-04-11-item4/"/>
      <url>/2021/04/11/effective_java/2021-04-11-item4/</url>
      
        <content type="html"><![CDATA[<ul><li>잘 사용하지 않는 방식이지만 나름 쓰임새가 있다.</li><li>추상 클래스는 상속하는 하위 클래스를 만들어 인스턴스화 하면 만들어진다.</li></ul><h3 id="용도"><a href="#용도" class="headerlink" title="용도"></a>용도</h3><ul><li>java.lang.Math와 java.util.Arrays처럼 기본 타입 값이나 배열 관련 메서드들을 모아놓을 수 있다.</li><li>java.util.Collections처럼 특정 인터페이스를 구현하는 객체를 생성해주는 정적 메서드(혹은 팩터리)를 모아놓을 수 있다. (java 8부터는 interface에 선언 가능)</li><li>final 클래스와 관련한 메서드들을 모아놓을 때도 사용한다.</li><li>private 생성자 안에 에러를 throw 하면, 클래스 안에서 실수로라도 생성자를 호출하지 않도록 해준다.</li><li>상속을 불가능하게 해준다.</li></ul><h3 id="책-예시"><a href="#책-예시" class="headerlink" title="책 예시"></a>책 예시</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UtilityClass</span> &#123;</span><br><span class="line">  <span class="comment">// 기본 생성자가 만들어지는 것을 막는다.(인스턴스화 방지)</span></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">UtilityClass</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템3. private 생성자나 열거 타입으로 싱글턴임을 보증하라</title>
      <link href="/2021/04/07/effective_java/2021-04-07-item3/"/>
      <url>/2021/04/07/effective_java/2021-04-07-item3/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>싱글턴(singleton)</strong></p><p>인스턴스를 오직 하나만 생성할 수 있는 클래스를 말한다.</p></blockquote><ul><li>클래스를 싱글턴으로 만들면 이를 사용하는 클라이언트를 테스트하기가 어려워질 수 있다.</li><li>만드는 방식은 보통 2가지<ul><li>public static 멤버가 final 필드인 방식</li><li>정적 팩터리 메서드를 public static 멤버로 제공하는 방식</li></ul></li><li>마지막 3번째 방법: 원소가 하나인 열거 타입 (enum)</li></ul><h3 id="1-public-static-final-필드-방식의-싱글턴"><a href="#1-public-static-final-필드-방식의-싱글턴" class="headerlink" title="1) public static final 필드 방식의 싱글턴"></a>1) public static final 필드 방식의 싱글턴</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Elvis</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Elvis</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Elvis</span>();</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Elvis</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">leaveTheBuilding</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>private 생성자는 public static final 필드인 Elvis.INSTANCE를 초기화할 때 딱 한 번만 호출된다.</li><li>인스턴스가 전체 시스템에서 하나뿐임이 보장된다. (리플렉션을 사용해 생성자를 호출하는 방식이 아닌 이상)<ul><li>방어: 생성자를 수정해 두 번째 객체가 생성되려 할 때 예외를 던지게 만들면 됨</li></ul></li><li>장점<ul><li>해당 클래스가 싱글턴이라는 것이 API에 명백히 드러난다.</li><li>간결하다.</li></ul></li></ul><h3 id="2-정적-팩터리-방식의-싱글턴"><a href="#2-정적-팩터리-방식의-싱글턴" class="headerlink" title="2) 정적 팩터리 방식의 싱글턴"></a>2) 정적 팩터리 방식의 싱글턴</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Elvis</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Elvis</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Elvis</span>();</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Elvis</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Elvis <span class="title function_">getInstance</span><span class="params">()</span> &#123; <span class="keyword">return</span> INSTANCE; &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">leaveTheBuilding</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol><li>과 마찬가지로 항상 같은 인스턴스만 반환하기 때문에 리플렉션을 제외하고는 인스턴스가 하나뿐임이 보장된다.</li></ol></li><li>장점<ul><li>API를 바꾸지 않고도 싱글턴이 아니게 변경이 가능하다.</li><li>정적 팩터리를 제네릭 싱글턴 팩터리로 만들 수 있다. <em>[아이템 30]</em></li><li>정적 팩터리의 메서드 참조를 공급자로 사용할 수 있다. (Elvis::getInstance -&gt; Supplier<Elvis> 형태로)</li></ul></li></ul><h4 id="1-2번-공통"><a href="#1-2번-공통" class="headerlink" title="1, 2번 공통"></a>1, 2번 공통</h4><ul><li>1, 2번에서 만든 싱글턴 클래스를 직렬화하려면 단순히 Serializable을 구현한다고 선언하는 것으로 부족하다.</li><li>모든 인스턴스 필드를 일시적이라고 선언하고 readResolve 메서드를 제공해야 한다.</li><li>이렇게 하지 않으면 직렬화된 인스턴스를 역직렬화할 때마다 새로운 인스턴스가 만들어진다. (역직렬화 -&gt; 객체화?)</li><li>가짜 인스턴스가 생기지 않게 하기 위해 readResolve 메서드를 추가해주자</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-원소가-하나인-열거-타입을-선언"><a href="#3-원소가-하나인-열거-타입을-선언" class="headerlink" title="3) 원소가 하나인 열거 타입을 선언"></a>3) 원소가 하나인 열거 타입을 선언</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Elvis</span> &#123;</span><br><span class="line">  INSTANCE;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">leaveTheBuilding</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol><li>의 방식과 비슷하지만, 더 간결해졌고, 추가 노력 없이 직렬화 가능하다.</li></ol></li><li>심시정 아주 복잡한 직렬화 상황이나 리플렉션 공격에도 제2의 인스턴스가 생기는 일을 완벽히 막아준다.</li><li><strong>대부분 상황에서 원소가 하나뿐인 열거 타입이 싱글턴을 만드는 가장 좋은 방법이다.</strong></li><li>(만드려는 싱글턴이 Enum 외의 클래스를 상속해야 한다면 이 방법으로는 불가능하다.)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템2. 생성자에 매개변수가 많다면 빌더를 고려하라</title>
      <link href="/2021/04/03/effective_java/2021-04-03-item2/"/>
      <url>/2021/04/03/effective_java/2021-04-03-item2/</url>
      
        <content type="html"><![CDATA[<h3 id="정적-팩터리와-생성자의-공통적-제약"><a href="#정적-팩터리와-생성자의-공통적-제약" class="headerlink" title="정적 팩터리와 생성자의 공통적 제약"></a>정적 팩터리와 생성자의 공통적 제약</h3><ul><li>선택적 매개변수가 많을 때 적절히 대응하기가 어렵다.</li><li><a href="NutritionFactsWithConstructor.java">NutritionFacts 클래스</a> 참고</li></ul><h3 id="1-필요한-매개변수-갯수에-따라-생성자를-작성"><a href="#1-필요한-매개변수-갯수에-따라-생성자를-작성" class="headerlink" title="1) 필요한 매개변수 갯수에 따라 생성자를 작성"></a>1) 필요한 매개변수 갯수에 따라 생성자를 작성</h3><ul><li>코드가 길어져도 사용은 되지만, 매개변수 갯수가 많아지면 모든 매개변수의 순서를 이해하고 작성해야 해서 클라이언트 코드를 작성하기가 어려워진다.</li></ul><h3 id="2-자바-beans-패턴을-통해-좀더-개선해본다면"><a href="#2-자바-beans-패턴을-통해-좀더-개선해본다면" class="headerlink" title="2) 자바 beans 패턴을 통해 좀더 개선해본다면?"></a>2) 자바 beans 패턴을 통해 좀더 개선해본다면?</h3><ul><li>setter() 활용</li><li><a href="NutritionFactsWithBeans.java">NutritionFactsWithBeans 클래스</a> 참고</li><li>객체 하나를 만들려면 메서드를 여러 개 호출해야 한다.</li><li>객체가 완전히 생성되기 전까지는 일관성이 무너진 상태에 놓이게 된다.</li><li><ol><li>에서는 매개변수가 유효한지 생성자에서만 확인하면 되었는데, 빈즈 패턴에서는 바로 확인이 안된다.</li></ol></li><li>자바빈즈 패턴에서는 클래스를 불변으로 만들 수 없고, thread 안정성을 위해 추가 작업이 요구된다. <em>[아이템 17]</em></li></ul><h3 id="3-빌더-패턴-Builder-Pattern"><a href="#3-빌더-패턴-Builder-Pattern" class="headerlink" title="3) 빌더 패턴 (Builder Pattern)"></a>3) 빌더 패턴 (<strong>Builder Pattern</strong>)</h3><ul><li>GoF의 디자인 패턴에도 나와있다.</li><li>Lombok의 @Builder</li><li><a href="NutritionFactsWithBuilder.java">NutritionFactsWithBuilder 클래스</a> 참고</li><li><strong>계층적으로 설계된 클래스와 함께 쓰기 좋다.</strong></li><li>단점: 빌더를 미리 만들어야 한다.<ul><li>빌더 생성 비용이 크지는 않지만, 성능에 민감한 상황에서는 문제가 될 수 있다.</li><li>매개변수가 4개 이상은 되어야 값어치를 한다. (but API는 시간이 지날수록 매개변수가 많아지기도 한다!)</li></ul></li></ul><hr><blockquote><p><strong>핵심 정리</strong></p><p>생성자나 정적 팩터리가 처리해야 할 매개변수가 많다면(많아질 것이라 예상된다면) 빌더 패턴을 선택하는 게 더 좋다.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>아이템1. 생성자 대신 정적 팩터리 메서드를 고려하라</title>
      <link href="/2021/04/01/effective_java/2021-04-01-item1/"/>
      <url>/2021/04/01/effective_java/2021-04-01-item1/</url>
      
        <content type="html"><![CDATA[<ul><li>디자인 패턴의 팩터리 메서드와 다른 얘기이다.</li><li>팩터리 메서드가 생성자보다 좋은 장점, 단점</li></ul><hr><h2 id="팩터리-메서드가-생성자보다-좋은-장점-5가지"><a href="#팩터리-메서드가-생성자보다-좋은-장점-5가지" class="headerlink" title="팩터리 메서드가 생성자보다 좋은 장점 5가지"></a>팩터리 메서드가 생성자보다 좋은 장점 5가지</h2><h3 id="장점-1-이름을-가질-수-있다"><a href="#장점-1-이름을-가질-수-있다" class="headerlink" title="장점 1. 이름을 가질 수 있다."></a>장점 1. 이름을 가질 수 있다.</h3><pre><code>- 이름만 잘 지으면 반환될 객체의 특성을 쉽게 묘사할 수 있다.- 한 클래스에 시그니처가 같은 생성자가 여러 개 필요할 것 같으면, 생성자를 정적 팩터리 메서드로 바꾸고 각각의 차이를 잘 드러내는 이름을 지어주자.</code></pre><h3 id="장점-2-호출될-때마다-인스턴스를-새로-생성하지는-않아도-된다"><a href="#장점-2-호출될-때마다-인스턴스를-새로-생성하지는-않아도-된다" class="headerlink" title="장점 2. 호출될 때마다 인스턴스를 새로 생성하지는 않아도 된다."></a>장점 2. 호출될 때마다 인스턴스를 새로 생성하지는 않아도 된다.</h3><ul><li>불변 클래스의 인스턴스를 미리 만들어 놓거나 새로 생성한 인스턴스를 캐싱하여 재활용하는 식으로 불필요한 객체 생성을 피할 수 있다.</li><li>반복되는 요청에 같은 객체를 반환하는 식으로 정적 팩터리 방식의 클래스는 언제 어느 인스턴스를 살아 있게 할지 철저히 통제 가능하다. (인스턴스 통제)</li><li>인스턴스를 통제하면… (책의 reference를 잘 따라가서 연쇄적으로 공부가 가능할 듯)<blockquote><ol><li>클래스를 싱글턴 아이템으로 만들 수 있다. <em>[아이템 3]</em></li><li>인스턴스화 불가로 만들 수 있다. <em>[아이템 4]</em></li><li>불변 값 클래스에서 동치인 인스턴스가 단 하나뿐임을 보장할 수 있다. <em>[아이템 17]</em></li><li>플라이웨이트 패턴의 근간이 되며, 열거 타입은 <em>[아이템 17]</em> 인스턴스가 하나만 만들어짐을 보장한다.</li></ol></blockquote></li></ul><h3 id="장점-3-반환-타입의-하위-타입-객체를-반환할-수-있는-능력이-있다"><a href="#장점-3-반환-타입의-하위-타입-객체를-반환할-수-있는-능력이-있다" class="headerlink" title="장점 3. 반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다."></a>장점 3. 반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다.</h3><ul><li>구현 클래스를 공개하지 않고도 그 객체를 반환할 수 있어 API를 작게 유지할 수 있다.</li><li>인터페이스를 정적 팩터리 메서드의 반환 타입으로 사용하는 인터페이스 기반 프레임워크의 핵심 기술이다. <em>[아이템 20]</em></li><li>자바 8부터 인터페이스가 정적 메서드를 가질 수 없다는 제한이 풀렸기 때문에 인터페이스 내부에 정적 멤버들(메서드)을 public으로 둔다. (private도 8 이후로 가능)</li></ul><h3 id="장점-4-입력-매개변수에-따라-매번-다른-클래스의-객체를-반환할-수-있다"><a href="#장점-4-입력-매개변수에-따라-매번-다른-클래스의-객체를-반환할-수-있다" class="headerlink" title="장점 4. 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다."></a>장점 4. 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.</h3><ul><li>반환 타입의 하위 타입이기만 하면 어떤 클래스의 객체를 반환하든 상관없다.</li><li>상위 클래스에서 정적 팩터리만 제공하는데 하위 클래스의 다양한 인스턴스를 반환한다고 해도 클라이언트는 팩터리가 건네주는 객체가 어느 클래스의 인스턴스인지 알 수도 없고 알 필요도 없다.</li></ul><h3 id="장점-5-정적-팩터리-메서드를-작성하는-시점에는-반환할-객체의-클래스가-존재하지-않아도-된다"><a href="#장점-5-정적-팩터리-메서드를-작성하는-시점에는-반환할-객체의-클래스가-존재하지-않아도-된다" class="headerlink" title="장점 5. 정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다."></a>장점 5. 정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.</h3><ul><li>내 생각: 나중에 추가될 클래스들이 미리 설계된 구조에서 사용할 수 있게만 제공되면 동작할 수 있다.</li><li>JDBC와 같은 서비스 제공자 프레임워크의 유연함을 제공한다. (각 DB마다의 고유한 클래스들을 사용할 수 있게)</li><li>구현체들을 클라이언트에게 제공하는 역할을 프레임워크가 통제하면서, 클라이언트를 구현체로부터 분리한다.</li></ul><h4 id="서비스-제공자-프레임워크"><a href="#서비스-제공자-프레임워크" class="headerlink" title="서비스 제공자 프레임워크"></a>서비스 제공자 프레임워크</h4><ul><li>3개의 핵심 컴포넌트: 서비스 인터페이스, 제공자 등록 API, <strong>서비스 접근 API</strong></li><li>서비스 접근 API를 사용할 때 원하는 구현체의 조건을 명시할 수 있다.</li><li>조건을 명시하지 않으면 기본 구현체를 반환하거나 지원하는 구현체들을 하나씩 돌아가며 반환한다.</li><li>추가로 서비스 제공자 인터페이스를 통해 각 구현체를 리플렉션을 사용하지 않고 인스턴스로 만들어준다.</li><li>변형 패턴에 대해서는 책 참고(12p.)</li></ul><hr><h2 id="팩터리-메서드가-생성자보다-안좋은-단점-2가지"><a href="#팩터리-메서드가-생성자보다-안좋은-단점-2가지" class="headerlink" title="팩터리 메서드가 생성자보다 안좋은 단점 2가지"></a>팩터리 메서드가 생성자보다 안좋은 단점 2가지</h2><h3 id="단점-1-상속을-하려면-public이나-protected-생성자가-필요하니-정적-팩터리-메서드만-제공하면-하위-클래스를-만들-수-없다"><a href="#단점-1-상속을-하려면-public이나-protected-생성자가-필요하니-정적-팩터리-메서드만-제공하면-하위-클래스를-만들-수-없다" class="headerlink" title="단점 1. 상속을 하려면 public이나 protected 생성자가 필요하니 정적 팩터리 메서드만 제공하면 하위 클래스를 만들 수 없다."></a>단점 1. 상속을 하려면 public이나 protected 생성자가 필요하니 정적 팩터리 메서드만 제공하면 하위 클래스를 만들 수 없다.</h3><ul><li>(개인적으로는 상속을 안하는 경우가 더 좋을 때가 많아, 큰 단점은 아닐지도 모르겠다.)</li><li>컴포지션을 사용하도록 유도하는 장점일 수도 있다! <em>[아이템 17]</em></li></ul><h3 id="단점-2-정적-팩터리-메서드는-프로그래머가-찾기-어렵다"><a href="#단점-2-정적-팩터리-메서드는-프로그래머가-찾기-어렵다" class="headerlink" title="단점 2. 정적 팩터리 메서드는 프로그래머가 찾기 어렵다."></a>단점 2. 정적 팩터리 메서드는 프로그래머가 찾기 어렵다.</h3><ul><li>생성자처럼 API 설명에 명확히 드러나지 않아 정적 팩터리 메서드 방식 클래스에서 인스턴스화할 방법을 찾아야 한다.</li><li>API 문서를 잘 써놓고, 메서드 이름도 널리 알려진 규약을 따라 잘 짓자.</li></ul><h4 id="정적-팩터리-메서드에-흔히-사용하는-명명-방식"><a href="#정적-팩터리-메서드에-흔히-사용하는-명명-방식" class="headerlink" title="정적 팩터리 메서드에 흔히 사용하는 명명 방식"></a>정적 팩터리 메서드에 흔히 사용하는 명명 방식</h4><ul><li>from, of, valueOf, instance(getInstance), create(newInstance), getType, newType, type</li></ul><hr><blockquote><p><strong>핵심 정리</strong></p><p>무작정 public 생성자만 쓰지 말고, 정적 팩터리를 사용하는 게 유리한 경우가 더 많다는 것을 기억하자</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Effective_Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code 11장 - 시스템</title>
      <link href="/2021/03/26/clean_code/chapter11/"/>
      <url>/2021/03/26/clean_code/chapter11/</url>
      
        <content type="html"><![CDATA[<ul><li>도시를 세운다면?</li><li>시스템 제작과 시스템 사용을 분리하라</li><li>확장</li><li>자바 프록시</li><li>순수 자바 AOP 프레임워크</li><li>AspectJ 관점</li><li>테스트 주도 시스템 아키텍처 구축</li><li>의사 결정을 최적화하라</li><li>명백한 가치가 있을 때 표준을 현명하게 사용하라</li><li>시스템은 도메인 특화 언어가 필요하다</li><li>결론</li></ul><h3 id="도시를-세운다면"><a href="#도시를-세운다면" class="headerlink" title="도시를 세운다면?"></a>도시를 세운다면?</h3><ul><li>혼자서 온갖 세세한 상황을 직접 관리할 수는 없지</li><li>각 분야를 관리하는 팀이 있기 때문에 도시는 돌아간다.</li><li>도시의 큰 그림을 그리는 사람도 있고, 작은 사항에 집중하는 사람들도 있다.</li><li>적절한 추상화와 모듈화로 큰 그림을 이해하지 못할지라도 개인과 개인이 관리하는 ‘구성요소’는 효율적으로 돌아간다.</li><li><strong>깨끗한 코드를 구현하면 낮은 추상화 수준에서 관심사를 분리하기 쉬워진다</strong></li><li>높은 추상화 수준, 즉 <strong>시스템 수준</strong>에서도 깨끗함을 유지하는 방법을 알아보자</li></ul><h3 id="시스템-제작과-시스템-사용을-분리하라"><a href="#시스템-제작과-시스템-사용을-분리하라" class="headerlink" title="시스템 제작과 시스템 사용을 분리하라"></a>시스템 제작과 시스템 사용을 분리하라</h3><ul><li><strong>제작(construction)은 사용(use)과 아주 다르다</strong></li></ul><blockquote><p><strong>소프트웨어 시스템은 (애플리케이션 객체를 제작하고 의존성을 서로 ‘연결’하는)</strong></p><p><strong>준비 과정과 (그 후에 이어지는) 런타임 로직을 분리해야 한다.</strong></p></blockquote><ul><li><p>시작 단계는 모든 애플리케이션이 풀어야 할 <strong>관심사</strong>다.</p></li><li><p><strong>관심사 분리는</strong> 우리 분야에서 가장 오래되고 가장 중요한 설계 기법 중 하나이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Service <span class="title function_">getService</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (service == <span class="literal">null</span>) </span><br><span class="line">    service = <span class="keyword">new</span> <span class="title class_">MyServiceImpl</span>(...);<span class="comment">// 모든 상황에 적합한 기본값일까?</span></span><br><span class="line">  <span class="keyword">return</span> service;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><em>전형적으로 관심사를 분리하지 않는 예시</em></p><ul><li>초기화 지연 방식 (Kotlin에서 lateinit을 사용하는 것이 생각난다.)</li><li>실제로 필요할 때까지 객체를 생성하지 않으므로 불필요한 부하가 걸리지 않는다.</li><li>어떤 경우에도 null 포인터를 반환하지 않는다.</li></ul></li><li><p>하지만 getService 메서드가 MyServiceImpl과 (위에서는 생략한) 생성자 인수에 명시적으로 의존한다.</p></li><li><p><strong>런타임 로직에서 MyServiceImpl 객체를 전혀 사용하지 않더라도 의존성을 해결하지 않으면 컴파일이 안 된다.</strong> (해당 서비스가 불필요하더라도 무조건 객체를 생성해야 하는 의존성 발생한다. 메서드 이름이라도 좀더 구체적이었으면 혹시 몰라도..)</p><ul><li>테스트 할 때도 MyServiceImpl이 무거운 객체라면 단위 테스트에서 getService 메서드를 호출하기 전에 적절한 테스트 전용 객체(Mock Object)를 service 필드에 할당해야 테스트 가능하다.</li><li><strong>또한 일반 런타임 로직에 객체 생성 로직을 섞어놓은 탓에 (service가 null인 경로와 null이 아닌 경로 등) 모든 실행 경로도 테스트해야 한다.</strong> (팩토리 메서드 패턴을 이래서 사용하나보다.)</li></ul></li><li><p>작지만 <strong>SRP</strong> 위반이다.</p></li><li><p>초기화 지연 기법을 한 번 정도 사용한다면 별로 심각한 문제는 아니지만, 이런 설정 기법이 수시로 사용되면 모듈성은 저조해지고 대개 중복이 심각하다.</p></li><li><p><strong>설정 논리</strong>는 일반 실행 논리와 분리해야 모듈성이 높아진다.</p></li></ul></li></ul><h4 id="Main-분리"><a href="#Main-분리" class="headerlink" title="Main 분리"></a>Main 분리</h4><ul><li>생성과 관련한 코드는 모두 main이나 main이 호출하는 모듈로 옮기고, 나머지 시스템은 모든 객체가 생성되었고 모든 의존성이 연결되었다고 가정한다.</li><li>main 함수에서 시스템에 필요한 객체를 생성한 후 이를 애플리케이션에 넘긴다.</li><li><strong>애플리케이션은 main이나 객체가 생성되는 과정을 전혀 모른다.</strong> (단지 모든 객체가 적절히 생성되었다고 가정한다.)</li></ul><h4 id="팩토리"><a href="#팩토리" class="headerlink" title="팩토리"></a>팩토리</h4><ul><li>물론 때로는 객체가 생성되는 <strong>시점</strong>을 애플리케이션이 결정할 필요도 생긴다.</li><li>Abstract Factory: 교재 그림을 보고 예상되는 코드 작성함 (코드 참조)</li><li>객체의 생성 시점은 애플리케이션이 결정하지만 객체를 생성하는 코드는 애플리케이션이 모르도록 구현</li></ul><h4 id="의존성-주입-DI"><a href="#의존성-주입-DI" class="headerlink" title="의존성 주입(DI)"></a>의존성 주입(DI)</h4><ul><li>클래스가 의존성을 해결하려 시도하지 않는다.</li><li>클래스는 완전히 수동적이다.</li><li>대신 의존성을 주입하는 방법으로 (Object 교재에서 보았던 3가지 방법 - <a href="https://github.com/boring-km/Object-Study/blob/master/chapter09/chapter09.md">링크</a>)<ul><li>setter 메서드</li><li>생성자 인수</li><li>혹은 둘 다</li></ul></li><li>~ DI 컨테이너는 필요한 객체의 인스턴스를 만든 후 생성자 인수나 설정자 메서드를 사용해 의존성을 설정한다.</li><li>초기화 지연으로 얻는 장점을 무조건 포기할 필요는 없다. DI를 사용하더라도 때론 여전히 유용하다.<ul><li>대다수 DI 컨테이너는 필요할 때까지는 객체를 생성하지 않고, 대부분은 계산 지연이나 비슷한 최적화를 쓸 수 있도록 팩토리를 호출하거나 프록시를 생성하는 방법을 제공한다.</li></ul></li></ul><h3 id="확장"><a href="#확장" class="headerlink" title="확장"></a>확장</h3><ul><li>‘처음부터 올바르게’ 시스템을 만들 수 있다는 믿음은 미신이다.</li><li>소프트웨어 시스템은 ‘수명이 짧다’는 본질로 인해 아키텍처의 점진적인 발전이 가능하다.</li><li>EJB1과 EJB2 예시를 통해 관심사를 적절히 분리하지 못한 경우는 책에서 확인 (p.200 ~ 202)</li></ul><h3 id="자바-프록시"><a href="#자바-프록시" class="headerlink" title="자바 프록시"></a>자바 프록시</h3><ul><li>개별 객체나 클래스에서 메서드 호출을 wrapping 하는 경우</li><li>JDK에서는 기본으로 인터페이스만 지원하고, 클래스 프록시를 사용하려면 추가 라이브러리가 필요하다. (현재도 그런지 확인 필요!)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDK 프록시 예제</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Bank.java - 은행 추상화</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Bank</span> &#123;</span><br><span class="line">  Collection&lt;Account&gt; <span class="title function_">getAccounts</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setAccounts</span><span class="params">(Collection&lt;Account&gt; accounts)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BankImpl.java - 추상화를 위한 POJO 구현</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankImpl</span> <span class="keyword">implements</span> <span class="title class_">Bank</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Collection&lt;Account&gt; <span class="title function_">getAccounts</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> accounts;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccounts</span><span class="params">(Collection&lt;Account&gt; accounts)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.accounts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Account&gt;();</span><br><span class="line">    <span class="built_in">this</span>.accounts.addAll(accounts);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BankProxyHandler.java - Proxy API가 필요로 하는 InvocationHandler</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line">        <span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankProxyHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Bank bank;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">BankProxyHandler</span><span class="params">(Bank bank)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.bank = bank;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 자바 리플렉션 사용</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> method.getName();</span><br><span class="line">    <span class="keyword">if</span> (methodName.equals(<span class="string">&quot;getAccounts&quot;</span>)) &#123;</span><br><span class="line">      bank.setAccounts((Collection&lt;Account&gt;) args[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span> bank.getAccounts();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (methodName.equals(<span class="string">&quot;setAccounts&quot;</span>)) &#123;</span><br><span class="line">      bank.setAccounts((Collection&lt;Account&gt;) args[<span class="number">0</span>]);</span><br><span class="line">      setAccountsToDatabase(bank.getAccounts());</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 교재에서도 생략된 부분</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> Collection&lt;Account&gt; <span class="title function_">getAccountsFromDatabase</span><span class="params">()</span> &#123; <span class="comment">/* 구현 코드 */</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setAccountsToDatabase</span><span class="params">(Collection&lt;Account&gt; accounts)</span> &#123; <span class="comment">/* 구현 코드 */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BankService.java (교재에서는 이름 따로 없음)</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankService</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Bank</span> <span class="variable">bank</span> <span class="operator">=</span> (Bank) Proxy.newProxyInstance(</span><br><span class="line">            Bank.class.getClassLoader(),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Bank.class&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">BankProxyHandler</span>(<span class="keyword">new</span> <span class="title class_">BankImpl</span>()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>단점1: 코드의 양과 크기 -&gt; 깨끗한 코드를 작성하기 어렵다</li><li>단점2: 시스템 단위로 실행 지점을 명시하는 메커니즘을 제공하지 않는다. -&gt; (AOP에서 해결)</li></ul><h3 id="순수-자바-AOP-프레임워크"><a href="#순수-자바-AOP-프레임워크" class="headerlink" title="순수 자바 AOP 프레임워크"></a>순수 자바 AOP 프레임워크</h3><ul><li>내부적으로는 프록시를 사용한다.</li><li>스프링은 비즈니스 로직을 POJO로 구현한다.</li><li>POJO는 순수하게 도메인에 초점을 맞추기 때문에 테스트가 개념적으로 더 쉽고 간단하여 보수하고 개선하기도 쉽다.</li><li>결론적으로 스프링과 같은 프레임워크에서 사용자가 모르게 프록시나 바이트코드 라이브러리를 사용해 <strong>영속성, 트랜잭션, 보안, 캐시, 장애조치</strong>와 같은 횡단 관심사를 구현하고 있다.</li><li>이는 프레임워크에서 코드를 작성한다고 하지만 사실상 많은 부분에서 이미 프레임워크와 독립적인 코드가 만들어지게 되었다.</li><li>XML이 조금 읽기 어렵지만 그런 설정 파일에 명시된 정책이 겉으로 잘 보이지 않지만 자동으로 생성되는 프록시나 관점 논리보다 단순하다는 평가에 따라 Spring과 EJB3에 기여한다.</li><li>개선된 코드는 교재에서 확인 (p.208~p.209)</li></ul><h3 id="AspectJ-관점"><a href="#AspectJ-관점" class="headerlink" title="AspectJ 관점"></a>AspectJ 관점</h3><ul><li>관심사를 관점으로 분리하는 가장 강력한 도구: AspectJ 언어</li><li>새로 배워야하는 어려움이 있어서 AspectJ를 쉽게 사용하도록 도와주는 다양한 도구가 마련되어 있다.</li><li>(추가) 개발해보면서 spring aop 라이브러리만 추가해도 대부분 사용이 가능한 것 같다.</li></ul><h3 id="테스트-주도-시스템-아키텍처-구축"><a href="#테스트-주도-시스템-아키텍처-구축" class="headerlink" title="테스트 주도 시스템 아키텍처 구축"></a>테스트 주도 시스템 아키텍처 구축</h3><ul><li>애플리케이션 도메인 논리를 POJO로 작성할 수 있다면 테스트 주도 아키텍처 구축이 가능해진다.</li><li>아주 단순하면서도 멋지게 분리된 아키텍처로 프로젝트를 재빨리 진행한 다음, 기반 구조를 추가하면서 조금씩 확장해도 괜찮다.</li><li>하지만! 설계가 아무리 멋진 API라도 정말 필요하지 않으면 <strong>과유불급</strong></li></ul><h3 id="의사-결정을-최적화하라"><a href="#의사-결정을-최적화하라" class="headerlink" title="의사 결정을 최적화하라"></a>의사 결정을 최적화하라</h3><ul><li>모듈을 나누고 관심사를 분리하면 지엽적인 관리와 결정이 가능해진다.</li><li><strong>가능한 마지막 순간까지 결정을 미루는 방법</strong>이 좋을 때도 있다.</li><li>요약: 관심사를 모듈로 분리한 POJO 시스템은 기민함을 제공한다. 이런 기민함 덕택에 최신 정보에 기반해 최선의 시점에 최적의 결정을 내리기가 쉬워진다. 또한 결정의 복잡성도 줄어든다.</li></ul><h3 id="명백한-가치가-있을-때-표준을-현명하게-사용하라"><a href="#명백한-가치가-있을-때-표준을-현명하게-사용하라" class="headerlink" title="명백한 가치가 있을 때 표준을 현명하게 사용하라"></a>명백한 가치가 있을 때 표준을 현명하게 사용하라</h3><ul><li>표준을 사용하면 아이디어와 컴포넌트를 재사용하기 쉽다.</li><li>적절한 경험을 가진 사람을 구하기 쉽다.</li><li>컴포넌트를 엮기 쉽다.</li><li><strong>하지만</strong> 때로는 표준을 만드는 시간이 너무 오래 걸려 업계가 기다리지 못하거나 표준을 제정한 본래 목적을 잊어버리기도 한다.</li></ul><h3 id="시스템은-도메인-특화-언어가-필요하다"><a href="#시스템은-도메인-특화-언어가-필요하다" class="headerlink" title="시스템은 도메인 특화 언어가 필요하다"></a>시스템은 도메인 특화 언어가 필요하다</h3><ul><li>DSL: 간단한 스크립트 언어나 표준 언어로 구현한 API를 가리킨다.</li><li>좋은 DSL은 도메인 개념과 그 개념을 구현한 코드 사이에 존재하는 ‘의사소통 간극’을 줄여준다.</li><li>효과적으로 잘 사용한다면 추상화 수준을 코드 관용구나 디자인 패턴 이상으로 끌어올려서 개발자가 적절한 추상화 수준에서 코드 의도를 표현할 수 있다!</li></ul><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>시스템 역시 <strong>깨끗해야</strong> 한다.</li><li>깨끗하지 못한 아키텍처는 도메인 논리를 흐리며 기민성을 떨어뜨린다.</li><li>도메인 논리가 흐려지면 제품 품질이 떨어진다. 버그가 숨어들기 쉬워지고, 스토리를 구현하기 어려워진다.</li><li>기민성이 떨어지면 생산성이 낮아져 TDD가 제공하는 장점이 사라진다.</li><li>모든 추상화 단계에서 의도는 명확히 표현해야 한다.</li><li><strong>POJO를 작성하고 관점 or 관점과 유사한 메커니즘을 사용해 각 구현 관심사를 분리해야 한다.</strong></li><li>시스템을 설계하든 개별 모듈을 설계하든, <strong>실제로 돌아가는 가장 단순한 수단</strong>을 사용해야 한다는 사실을 명심하자!</li></ul>]]></content>
      
      
      <categories>
          
          <category> Clean_Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code 10장 - 클래스</title>
      <link href="/2021/02/28/clean_code/chapter10/"/>
      <url>/2021/02/28/clean_code/chapter10/</url>
      
        <content type="html"><![CDATA[<ul><li>클래스 체계</li><li>클래스는 작아야 한다</li><li>변경하기 쉬운 클래스</li></ul><h3 id="형식을-맞추는-목적"><a href="#형식을-맞추는-목적" class="headerlink" title="형식을 맞추는 목적"></a>형식을 맞추는 목적</h3><ul><li>변수와 유틸리티 함수는 가능한 공개하지 않는 편이 낫지만 반드시 숨겨야 한다는 법칙도 없다.</li><li>때로는 protected로 선언해 테스트 코드에 접근을 허용하기도 한다.</li><li>하지만 허용하기 전에 비공개 상태를 유지할 온갖 방법을 강구한다.</li><li>언제나 캡슐화를 풀어주는 결정은 최후의 수단이다.</li></ul><h3 id="클래스는-작아야-한다"><a href="#클래스는-작아야-한다" class="headerlink" title="클래스는 작아야 한다!"></a>클래스는 작아야 한다!</h3><ul><li>클래스는 작아야 한다.</li><li>클래스의 크기를 세는 척도는 <strong>클래스가 맡은 책임</strong> 이다.</li><li>메서드가 줄어든다고 책임이 줄어드는 것이 아니다.</li><li>클래스 이름을 지을만한 간결한 이름이 떠오르지 않는다면 클래스가 너무 커서 그렇다. (여러 책임을 떠안고 있다.)</li></ul><h4 id="단일-책임-원칙"><a href="#단일-책임-원칙" class="headerlink" title="단일 책임 원칙"></a><em><strong>단일 책임 원칙</strong></em></h4><ul><li>클래스나 모듈을 변경할 이유가 <strong>단 하나</strong> 뿐이어야 한다.</li><li>책임, 즉 변경할 이유를 파악하려 애쓰다 보면 코드를 추상화하기도 쉬워진다.</li><li>게다가 많은 개발자는 자잘한 단일 책임 클래스가 많아지면 큰 그림을 이해하기 어려워진다고 우려한다.</li><li>큰 그림을 이해하려면 이 클래스 저 클래스를 수없이 넘나들어야 한다고 걱정한다.</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">하지만 작은 클래스가 많은 시스템이든 큰 클래스가 몇 개뿐인 시스템이든 돌아가는 부품은 그 수가 비슷하다.</span><br><span class="line"> 어느 시스템이든 익힐 내용은 그 양이 비슷하다. 그러므로 고민할 질문은 다음과 같다.</span><br><span class="line">  “도구 상자를 어떻게 관리하고 싶은가? 작은 서랍을 많이 두고 기능과 이름이 명확한 컴포넌트를 나눠 넣고 싶은가?</span><br><span class="line">   아니면 큰 서랍 몇 개를 두고 모두를 던져 넣고 싶은가?”</span><br><span class="line">규모가 어느 수준에 이르는 시스템은 논리가 많고도 복잡하다.</span><br><span class="line"> 이런 복잡성을 다루려면 체계적인 정리가 필수다.</span><br><span class="line">  그래야 개발자가 무엇이 어디에 있는지 쉽게 찾는다.</span><br><span class="line">   그래야 변경을 가할 때 직접 영향이 미치는 컴포넌트만 이해해도 충분하다.</span><br></pre></td></tr></table></figure><ul><li><strong>큼직한 다목적 클래스 몇 개로 이루어진 시스템은 변경을 가할 때 당장 알 필요가 없는 사실까지 들이밀어 독자를 방해한다.</strong></li></ul><h4 id="응집도"><a href="#응집도" class="headerlink" title="응집도"></a><em><strong>응집도</strong></em></h4><ul><li>클래스는 인스턴스 변수 수가 작아야 한다.</li><li>클래스 안에서 메서드마다 많은 인스턴스 변수를 사용하고 있다면 응집도가 높다.</li><li>무조건 응집도가 높은게 좋은 것이 아니라 클래스에 속한 메서드와 변수가 서로 의존하며 논리적인 단위로 묶여있기에 좋은 것이다.</li></ul><h4 id="응집도를-유지하면-작은-클래스-여럿이-나온다"><a href="#응집도를-유지하면-작은-클래스-여럿이-나온다" class="headerlink" title="응집도를 유지하면 작은 클래스 여럿이 나온다"></a><em><strong>응집도를 유지하면 작은 클래스 여럿이 나온다</strong></em></h4><ul><li>클래스가 응집력을 잃는다면 쪼개자</li><li>큰 함수를 작은 함수 여럿으로 쪼개다 보면 종종 작은 클래스 여럿으로 쪼갤 기회가 생긴다.</li><li>클래스를 분리하다보면 프로그램에 점점 더 체계가 잡히고 구조가 투명해진다.</li></ul><h3 id="변경하기-쉬운-클래스"><a href="#변경하기-쉬운-클래스" class="headerlink" title="변경하기 쉬운 클래스"></a>변경하기 쉬운 클래스</h3><ul><li>깨끗한 시스템은 클래스를 체계적으로 정리해 지속적인 변경에도 발생할 수 있는 위험을 낮춘다.</li></ul><h4 id="변경으로부터-격리"><a href="#변경으로부터-격리" class="headerlink" title="변경으로부터 격리"></a><em><strong>변경으로부터 격리</strong></em></h4><ul><li>요구사항은 변하기 마련이고 코드 역시 변하기 마련이다.</li><li>상세한 구현에 의존하는 클라이언트 클래스는 구현이 바뀌면 위험에 빠진다.</li><li>인터페이스와 추상 클래스를 사용해 구현이 미치는 영향을 격리한다.</li><li>상세한 구현애 의존하는 코드는 테스트가 어렵다.</li><li>테스트가 가능할 정도로 시스템의 결합도를 낮추면 유연성과 재사용성도 더욱 높아진다.</li><li>자연스럽게 DIP를 따르는 클래스가 나온다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Clean_Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code 9장 - 단위 테스트</title>
      <link href="/2021/02/27/clean_code/chapter09/"/>
      <url>/2021/02/27/clean_code/chapter09/</url>
      
        <content type="html"><![CDATA[<ul><li>TDD 법칙 3가지</li><li>깨끗한 테스트 코드 유지하기</li><li>깨끗한 테스트 코드</li><li>테스트 당 assert 하나</li><li>F.I.R.S.T</li><li>결론</li></ul><h3 id="TDD-법칙-3가지"><a href="#TDD-법칙-3가지" class="headerlink" title="TDD 법칙 3가지"></a>TDD 법칙 3가지</h3><ol><li>실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다.</li><li>컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다.</li><li>현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다.</li></ol><ul><li>위 3가지 규칙에 따르면 테스트 코드와 실제 코드가 함께 나올뿐더러 테스트 코드가 실제 코드보다 불과 몇 초 전에 나온다.</li><li>이렇게 일하면 사실상 전부 테스트하는 테스트 케이스가 나온다.</li><li>실제 코드와 맞먹을 정도로 방대한 테스트 코드는 심각한 관리 문제를 유발하기도 한다.</li></ul><h3 id="깨끗한-테스트-코드-유지하기"><a href="#깨끗한-테스트-코드-유지하기" class="headerlink" title="깨끗한 테스트 코드 유지하기"></a>깨끗한 테스트 코드 유지하기</h3><ul><li>문제는 실제 코드가 진화하면 테스트 코드도 변해야 한다는 데 있다.</li><li>그런데 테스트 코드가 지저분할수록 변경하기 어려워진다.</li><li>테스트 코드가 복잡할수록 실제 코드를 짜는 시간보다 테스트 케이스를 추가하는 시간이 더 걸리기 십상이다.</li><li><strong>테스트 코드는 실제 코드 못지 않게 중요하다</strong></li><li>테스트 코드는 사고와 설계와 주의가 필요하다.</li><li>실제 코드 못지 않게 깨끗하게 써야 한다.</li></ul><p><em><strong>테스트는 유연성, 유지보수성, 재사용성을 제공한다.</strong></em></p><ul><li>테스트 케이스가 없다면 모든 변경이 잠정적인 버그다.</li><li>아키텍처가 아무리 유연하더라도, 설계를 아무리 잘 나눴더라도, 테스트 케이스가 없으면 개발자는 변경을 주저한다.</li><li>버그가 숨어들까 두렵기 때문이다.</li><li>테스트가 있다면 공포는 사라지고, 테스트 커버리지가 높을수록 공포는 줄어든다.</li><li>실제 코드를 점검하는 자동화된 단위 테스트 슈트는 설계와 아키텍처를 최대한 깨끗하게 보존하는 열쇠다.</li><li>테스트 코드가 지저분할수록 실제 코드도 지저분해진다.</li></ul><h3 id="깨끗한-테스트-코드"><a href="#깨끗한-테스트-코드" class="headerlink" title="깨끗한 테스트 코드"></a>깨끗한 테스트 코드</h3><ul><li><strong>가독성, 가독성, 가독성</strong></li><li>교재의 개선한 테스트 코드(한글 버전)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 페이지_계층을_XML형태로_가져오는지_테스트한다() &#123;</span><br><span class="line">  makePages(<span class="string">&quot;PageOne&quot;</span>, <span class="string">&quot;PageOne.ChildOne&quot;</span>, <span class="string">&quot;PageTwo&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  submitRequest(<span class="string">&quot;root&quot;</span>, <span class="string">&quot;type:pages&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  assertResponseIsXML();</span><br><span class="line">  assertResponseContains(</span><br><span class="line">    <span class="string">&quot;&lt;name&gt;PageOne&lt;/name&gt;&quot;</span>, <span class="string">&quot;&lt;name&gt;PageTwo&lt;/name&gt;&quot;</span>, <span class="string">&quot;&lt;name&gt;ChildOne&lt;/name&gt;&quot;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 심볼릭_링크들이_XML_페이지_계층에_없는지_테스트한다() &#123;</span><br><span class="line">  <span class="type">WikiPage</span> <span class="variable">page</span> <span class="operator">=</span> makePage(<span class="string">&quot;PageOne&quot;</span>);</span><br><span class="line">  makePages(<span class="string">&quot;PageOne.ChildOne&quot;</span>, <span class="string">&quot;PageTwo&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  addLinkTo(page, <span class="string">&quot;PageTwo&quot;</span>, <span class="string">&quot;SymPage&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  submitRequest(<span class="string">&quot;root&quot;</span>, <span class="string">&quot;type:pages&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  assertResponseIsXML();</span><br><span class="line">  assertResponseContains(</span><br><span class="line">    <span class="string">&quot;&lt;name&gt;PageOne&lt;/name&gt;&quot;</span>, <span class="string">&quot;&lt;name&gt;PageTwo&lt;/name&gt;&quot;</span>, <span class="string">&quot;&lt;name&gt;ChildOne&lt;/name&gt;&quot;</span></span><br><span class="line">  );</span><br><span class="line">  assertResponseDoesNotContain(<span class="string">&quot;SymPage&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> XML형태로_데이터를_가져오는지_테스트한다() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  makePageWithContent(<span class="string">&quot;TestPageOne&quot;</span>, <span class="string">&quot;test page&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  submitRequest(<span class="string">&quot;TestPageOne&quot;</span>, <span class="string">&quot;type:data&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  assertResponseIsXML();</span><br><span class="line">  assertResponseContains(<span class="string">&quot;test page&quot;</span>, <span class="string">&quot;&lt;Test&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>테스트는 명확히 세 부분으로 나눠진다.<ul><li><ol><li>테스트 자료를 만든다.</li><li>테스트 자료를 조작하며,</li><li>조작한 결과가 올바른지 확인한다.</li></ol></li></ul></li><li>테스트 코드는 본론에 돌입해 진짜 필요한 자료 유형과 함수만 사용한다.</li><li>그러므로 코드를 읽는 사람은 온갖 잡다하고 세세한 코드에 주눅들고 헷갈릴 필요 없이 코드가 수행하는 기능을 재빨리 이해한다.</li><li><a href="https://medium.com/swlh/usual-production-patterns-applied-to-integration-tests-50a941f0b04a">Build-Operate-Check 패턴</a>이 위와 같은 테스트 구조에 적합하다. (링크는 아래 그림에 대한 출처)<ul><li>Build: 테스트 시나리오를 준비하는 단계 (주로 DB에 데이터를 넣는 단계이다.)</li><li>Operate: 테스트하고자 하는 객체&#x2F;API를 사용하는 메서드를 실행하는 단계</li><li>Check: 실행된 메서드가 예상한 효과를 시스템에 가져다 주었는지 확인하는 단계</li></ul></li></ul><p><img src="https://miro.medium.com/max/1260/1*YslDrfj6TUWlQvaUoC3xXQ.jpeg" alt="Image for post"></p><p><em><strong>도메인에 특화된 테스트 언어</strong></em></p><ul><li>흔히 쓰는 시스템 조작 API를 사용하는 대신 <strong>API 위에다 함수와 유틸리티를 구현한 후 그 함수와 유틸리티를 사용</strong>하므로 테스트 코드를 짜기도 읽기도 쉬워진다. (도메인에 가까운 이름을 사용한 함수와 유틸리티로 테스트를 작성하라는 의미같다.)</li><li>이렇게 구현한 함수와 유틸리티는 테스트 코드에서 사용하는 특수 API가 된다.</li><li>즉, 테스트를 구현하는 당사자와 나중에 테스트를 읽어볼 독자를 도와주는 테스트 언어이다.</li></ul><p><em><strong>이중 표준</strong></em></p><ul><li>테스트 API 코드에 적용하는 표준은 실제 코드에 적용하는 표준과 확실히 다르다.</li><li>단순하고, 간결하고, 표현력이 풍부해야 하지만, 실제 코드만큼 효율적일 필요는 없다.</li><li>테스트 환경은 제한적일 가능성이 낮다.</li><li>실제 환경에서는 절대로 안 되지만 테스트 환경에서는 전혀 문제없는 방식이 있다.</li><li>대개 메모리나 CPU나 효율과 관련 있는 경우다. (<strong>코드의 깨끗함과는 철저히 무관하다.</strong>)</li><li>(이 내용으로 볼 때, 테스트 코드에서는 Stream 사용이 좀더 자유로울 수 있겠다.)</li></ul><h3 id="테스트-당-assert-하나"><a href="#테스트-당-assert-하나" class="headerlink" title="테스트 당 assert 하나?"></a>테스트 당 assert 하나?</h3><ul><li>JUnit으로 테스트 코드를 짤 때는 함수마다 assert 문을 단 하나만 사용해야 한다? (훌륭하지만 때로는 여러 개도 필요하다.)<ul><li>물론 코드를 이해하기 쉽고 빠르다.</li><li>하지만.. 위에서 작성하고 온 코드에 보면 공통적으로 “출력이 XML”이다라는 assert 문과 “특정 문자열을 포함한다”는 assert 문을 하나로 병합하는 방식이 불합리해 보인다.</li><li><strong>given-when-then</strong>  (TDD를 공부하면서도 봤던 방식이다.)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 페이지_계층을_XML형태로_가져오는지_테스트한다() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  givenPages(<span class="string">&quot;PageOne&quot;</span>, <span class="string">&quot;PageOne.ChildOne&quot;</span>, <span class="string">&quot;PageTwo&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  whenRequestIsIssued(<span class="string">&quot;root&quot;</span>, <span class="string">&quot;type:pages&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  thenResponseShouldBeXML();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 페이지_계층이_옳은_태그들을_가져오는지_테스트한다() &#123;</span><br><span class="line">  givenPages(<span class="string">&quot;PageOne&quot;</span>, <span class="string">&quot;PageOne.ChildOne&quot;</span>, <span class="string">&quot;PageTwo&quot;</span>);<span class="comment">// 중복</span></span><br><span class="line">  </span><br><span class="line">  whenRequestIsIssued(<span class="string">&quot;root&quot;</span>, <span class="string">&quot;type:pages&quot;</span>);<span class="comment">// 중복</span></span><br><span class="line">  </span><br><span class="line">  thenResponseShouldContain(</span><br><span class="line">    <span class="string">&quot;&lt;name&gt;PageOne&lt;/name&gt;&quot;</span>, <span class="string">&quot;&lt;name&gt;PageTwo&lt;/name&gt;&quot;</span>, <span class="string">&quot;&lt;name&gt;ChildOne&lt;/name&gt;&quot;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>테스트 코드를 읽기 쉬워졌지만, 테스트를 분리하면 중복되는 코드가 많아진다.</li><li>Template Method 패턴을 사용해 중복을 제거할 수 있다.<ul><li>given&#x2F;when 부분을 부모 클래스에 두고 then 부분을 자식 클래스에 두면된다.</li><li>아니면 완전히 독자적인 테스트 클래스를 만들어 @Before 함수에 given&#x2F;when 부분을 넣고 @Test  함수에 then 부분을 넣어도 된다.</li><li>하지만 모두 배보다 배꼽이 더 크다. (<strong>비용이 크다.</strong>)</li><li>결국 저 위에 있는 코드가 더 좋아보인다.</li></ul></li><li>‘’단일 assert 문’이라는 규칙이 훌륭한 지침이긴 해도, 때로는 주저 없이 함수 하나에 여러 assert 문을 넣어야 할 수도 있다.</li><li>최대한 assert 문 개수를 줄이는 방법이 좋겠다.</li></ul><p><em><strong>테스트 당 개념 하나</strong></em></p><ul><li>(테스트 함수마다 한 개념만 테스트하라)</li><li>이것저것 잡다한 개념을 연속으로 테스트하는 긴 함수는 피한다.</li></ul><h3 id="F-I-R-S-T-깨끗한-테스트의-5가지-규칙"><a href="#F-I-R-S-T-깨끗한-테스트의-5가지-규칙" class="headerlink" title="F.I.R.S.T (깨끗한 테스트의 5가지 규칙)"></a>F.I.R.S.T (깨끗한 테스트의 5가지 규칙)</h3><ul><li><strong>Fast</strong>: 테스트는 빨리 돌아야 한다.</li><li><strong>Independent</strong>: 각 테스트는 서로 의존하면 안 된다.<ul><li>실행 순서가 뒤바뀌어도 전혀 상관 없어야 한다.</li><li>(실제로 하나의 테스트 코드 자바 파일을 IDE에서 함수를 지정하지 않고 테스트하기 버튼을 누르면 모든 테스트 함수를 실행하는 것을 볼 수 있다.)</li></ul></li><li><strong>Repeatable</strong>: 테스트는 어떤 환경에서도 반복 가능해야 한다.<ul><li>테스트가 돌아가지 않는 환경이 있다면, 테스트가 실패한 이유를 둘러댈 변명이 생긴다. (네트워크 연결이라도!)</li></ul></li><li><strong>Self-Validating</strong>: 테스트는 bool 값으로 결과를 내야 한다. 성공 아니면 실패다.<ul><li>테스트가 스스로 성공과 실패를 가늠하지 않는다면 판단은 주관적이 되며 지루한 수작업 평가가 필요하게 된다.</li></ul></li><li><strong>Timely</strong>: 테스트는 적시에 작성해야 한다.<ul><li>단위 테스트는 테스트하려는 실제 코드를 구현하기 직전에 구현한다.</li><li>실제 코드를 구현한 다음에는 테스트가 어렵다는 사실을 발견할지도 모른다. (실제로 그랬다.. ㅠㅠ)</li></ul></li></ul><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>테스트 코드는 실제 코드만큼이나 프로젝트 건강에 중요하다.</li><li>테스트 코드는 실제 코드의 유연성, 유지보수성, 재사용성을 보존하고 강화하기 때문이다.</li><li><strong>테스트 코드는 지속적으로 깨끗하게 관리하자</strong></li><li>표현력을 높이고 간결하게 정리하자.</li><li>테스트 API를 구현해 도메인 특화 언어(DSL)를 만들자.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Clean_Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code 8장 - 경계</title>
      <link href="/2021/02/24/clean_code/chapter08/"/>
      <url>/2021/02/24/clean_code/chapter08/</url>
      
        <content type="html"><![CDATA[<ul><li>외부 코드 사용하기</li><li>경계 살피고 익히기</li><li>Log4j 익히기</li><li>학습 테스트는 공짜 이상이다</li><li>아직도 존재하지 않는 코드 사용하기</li><li>깨끗한 경계</li></ul><h3 id="외부-코드-사용하기"><a href="#외부-코드-사용하기" class="headerlink" title="외부 코드 사용하기"></a>외부 코드 사용하기</h3><ul><li>패키지 제공자나 프레임워크 제공자는 적용성을 최대한 넓히려 애를 쓰고,</li><li>사용자는 자신의 요구에 집중하는 인터페이스를 바란다.</li><li>이 시스템 경계에서 문제가 생길 소지가 많다.</li></ul><h4 id="java-util-Map"><a href="#java-util-Map" class="headerlink" title="java.util.Map"></a>java.util.Map</h4><ul><li><p>Map이 제공하는 기능성과 유연성은 확실히 유용하지만 그만큼 위험도 크다.</p></li><li><p><strong>위험</strong></p><ul><li>Map을 만들어 여기저기 넘긴다고 할 때, Map 사용자는 누구나 clear()를 통해 Map의 내용을 지울 권한이 있다.</li><li>Map에 특정 객체 유형만 저장하기로 결정했어도, Map은 객체 유형을 제한하지 않기 때문에 마음만 먹으면 사용자는 어떤 객체 유형도 추가할 수 있다.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Case1: Sensor라는 객체를 담는 Map</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">sensors</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Sensor</span> <span class="variable">s</span> <span class="operator">=</span> (Sensor)sensors.get(sensorId);</span><br></pre></td></tr></table></figure><ul><li>Map이 반환하는 Object를 올바른 유형으로 변환할 책임은 Map을 사용하는 클라이언트에 있다.</li><li>하지만 의도가 분명하게 드러나지 않고 깨끗하지가 않다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Case2: Generics를 사용한 Map</span></span><br><span class="line">Map&lt;String, Sensor&gt; sensors = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Sensor&gt;();</span><br><span class="line"><span class="type">Sensor</span> <span class="variable">s</span> <span class="operator">=</span> sensors.get(sensorId);</span><br></pre></td></tr></table></figure><ul><li>Generics를 사용하여 코드 가독성이 높아졌지만, Map&lt;String, Sensor&gt;가 사용자에게 필요하지 않은 기능까지 제공한다.</li><li>프로그램에서 Map&lt;String, Sensor&gt; 인스턴스를 여기저기 넘긴다면, Map 인터페이스가 변할 경우에 수정할 코드가 상당히 많아진다. (현재도 많이 바뀌는 지 모르겠지만, 단순히 Map만 두고 하는 얘기는 아닌듯 하다.)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Case3: 더 깔끔해진 Map!</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sensors</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">sensors</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Sensor <span class="title function_">getById</span><span class="params">(String id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (Sensor) sensors.get(id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Sensors 사용자는 Generics가 사용되었는지 여부에 신경 쓸 필요가 없다.</p></li><li><p>Generics의 사용 여부는 Sensors 안에서 결정한다.</p></li><li><p>경계 인터페이스인 Map을 <strong>Sensors 안으로</strong> 숨긴다.</p><ul><li>Map 인터페이스가 변하더라도 Sensors 이외의 코드에 영향이 미치지 않도록 할 수 있다.</li></ul></li><li><p>Sensors 클래스는 프로그램에 필요한 인터페이스만 제공한다.</p><ul><li>그래서 <strong>코드는 쉽지만 오용하기는 어렵다.</strong></li><li>Sensors 클래스를 사용하는 프로그램에게 설계 규칙과 비즈니스 규칙을 따르도록 강제할 수 있다.</li></ul></li><li><p><em>Map 클래스를 사용할 때마다 캡슐화하라는 얘기가 아니다.</em></p></li><li><p>Map을 여기저기 넘기지 말라는 말이다.</p></li><li><p><strong>Map 인스턴스를 공개 API의 인수로 넘기거나 반환값으로 사용하지 않도록 하자</strong></p></li></ul><h3 id="경계-살피고-익히기"><a href="#경계-살피고-익히기" class="headerlink" title="경계 살피고 익히기"></a>경계 살피고 익히기</h3><ul><li>외부 패키지 테스트가 우리의 책임은 아니지만, 우리 자신을 위해 우리가 사용할 코드를 테스트하는 편이 바람직하다.</li><li>외부 코드는 익히기 어렵고 통합하기도 어렵다. (MSA 구조에서 이것이 얼마나 어려울지 상상도 하기 힘들다.)</li><li><strong>학습 테스트</strong> : 곧바로 우리쪽 코드를 작성해 외부 코드를 호출하는 대신 먼저 간단한 테스트 케이스를 작성해 외부 코드를 익히면 어떨까? (<strong>결국 TDD</strong>)<ul><li>프로그램에서 사용하려는 방식대로 외부 API를 호출한다.</li><li>통제된 환경에서 API를 제대로 이해하는지를 확인하는 셈이다.</li></ul></li></ul><h3 id="log4j-익히기"><a href="#log4j-익히기" class="headerlink" title="log4j 익히기"></a>log4j 익히기</h3><ul><li>밥 아저씨의 아파치의 log4j 연습 예시</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogTest</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Logger logger;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line">    logger = Logger.getLogger(<span class="string">&quot;logger&quot;</span>);</span><br><span class="line">    logger.removeAllAppenders();</span><br><span class="line">    Logger.getRootLogger().removeAllAppenders();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">basicLogger</span><span class="params">()</span> &#123;</span><br><span class="line">    BasicConfigurator.configure();</span><br><span class="line">    logger.info(<span class="string">&quot;basicLogger&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAppenderWithStream</span><span class="params">()</span> &#123;</span><br><span class="line">    logger.addAppender(<span class="keyword">new</span> <span class="title class_">ConsoleAppender</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">PatternLayout</span>(<span class="string">&quot;%p %t %m%n&quot;</span>),</span><br><span class="line">    ConsoleAppender.SYSTEM_OUT));</span><br><span class="line">    logger.info(<span class="string">&quot;addAppenderWithStream&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAppenderWithoutStream</span><span class="params">()</span> &#123;</span><br><span class="line">    logger.addAppender(<span class="keyword">new</span> <span class="title class_">ConsoleAppender</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">PatternLayout</span>(<span class="string">&quot;%p %t %m%n&quot;</span>)));</span><br><span class="line">    logger.info(<span class="string">&quot;addAppenderWithoutStream&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>콘솔 로거를 초기화하는 방법을 익힌 후 이 사용법들을 이용해 독자적인 로거 클래스로 캡슐화하면 나머지 프로그램은 log4j의 경계 인터페이스를 몰라도 된다. (현재의 slf4j는 위의 log4j에 비하면 훨씬 단순하게 사용하고 있는듯하다.)</li></ul><h3 id="학습-테스트는-공짜-이상이다"><a href="#학습-테스트는-공짜-이상이다" class="headerlink" title="학습 테스트는 공짜 이상이다."></a>학습 테스트는 공짜 이상이다.</h3><ul><li>학습 테스트에 드는 비용은 없다. (어쨌든 API를 배워야 하니까..? 오..)</li><li>필요한 지식만 확보할 수 있는 손쉬운 방법이며, 이해도를 높여주는 정확한 실험이다.</li><li>학습 테스트는 패키지가 예상대로 도는지 검증한다.</li><li>패키지는 패키지 작성자에 의해 계속해서 변경이 일어날 수 있고, 새 버전이 나올 때마다 새로운 위험이 생긴다. (많이 위험해보인다.)</li><li>새 버전이 우리 코드와 호환되지 않으면 <strong>학습 테스트가</strong> 이를 곧바로 밝혀낸다.</li><li>학습 테스트를 이용한 학습이 필요하든 그렇지 않든, 실제 코드와 동일한 방식으로 인터페이스를 사용하는 테스트 케이스가 필요하다.</li><li>경계 테스트가 있다면 패키지의 새 버전으로 이전하기 쉬울 것이고, 없다면 <strong>낡은 버전을 필요 이상으로 오랫동안 사용하려는 유혹에</strong> 빠지기 쉽다.</li></ul><h3 id="아직-존재하지-않는-코드를-사용하기"><a href="#아직-존재하지-않는-코드를-사용하기" class="headerlink" title="아직 존재하지 않는 코드를 사용하기"></a>아직 존재하지 않는 코드를 사용하기</h3><ul><li>경계와 관련해 또 다른 유형은 아는 코드와 모르는 코드를 분리하는 경계다.</li><li>우리가 바라는 인터페이스를 구현하면 우리가 인터페이스를 전적으로 통제한다는 장점이 생긴다.</li><li>또한 코드 가독성도 높아지고 코드 의도도 분명해진다.</li><li>(교재에서는 아직 구현되지 않은 API를 사용하는 것처럼 하기 위한 장치로 사용했다.)<ul><li>Adapter 패턴으로 API 사용을 캡슐화해 API가 바뀔 때 수정할 코드를 한 곳으로 모았다.</li></ul></li></ul><h3 id="깨끗한-경계"><a href="#깨끗한-경계" class="headerlink" title="깨끗한 경계"></a>깨끗한 경계</h3><ul><li>경계에서는 변경이 대표적으로 많이 벌어진다.</li><li>통제하지 못하는 코드를 사용할 때는 너무 많은 투자를 하거나 향후 변경 비용이 지나치게 커지지 않도록 각별히 주의해야 한다.</li><li><strong>경계에 위치하는 코드는 깔끔히 분리한다.</strong><ul><li>또한 기대치를 정의하는 테스트 케이스도 작성한다.</li><li>이쪽 코드에서 외부 패키지를 세세하게 알아야 할 필요가 없다.</li><li>통제가 불가능한 외부 패키지에 의존하는 대신 통제가 가능한 우리 코드에 의존하는 편이 훨씬 좋다.</li><li>자칫하면 외부 코드에 휘둘린다.</li></ul></li><li>외부 패키지를 호출하는 코드를 가능한 줄여 경계를 관리하자.</li><li>Map에서 봤듯이 새로운 클래스로 경계를 감싸거나 Adapter 패턴을 사용해 우리가 원하는 인터페이스를 패키지가 제공하는 인터페이스로 변환하자. (번역이 잘못 된게 아닌가 싶은데, 하고 싶은 의도는 결국 외부 인터페이스에 휘둘리지 않고 우리가 원하는 인터페이스로 사용할 수 있도록 Adapter 패턴을 사용하자는 의미이다.)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Clean_Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code 7장 - 오류 처리</title>
      <link href="/2021/02/21/clean_code/chapter07/"/>
      <url>/2021/02/21/clean_code/chapter07/</url>
      
        <content type="html"><![CDATA[<ul><li>오류 코드보다 예외를 사용하라</li><li>Try-Catch-Finally 문부터 작성하기</li><li>미확인 예외를 사용하기</li><li>예외에 의미를 제공하라</li><li>호출자를 고려해 예외 클래스를 정의하기</li><li>정상 흐름을 정의하기</li><li>null을 반환&#x2F;전달하지 말라</li><li>결론</li></ul><h3 id="오류-코드보다-예외를-사용하라"><a href="#오류-코드보다-예외를-사용하라" class="headerlink" title="오류 코드보다 예외를 사용하라"></a>오류 코드보다 예외를 사용하라</h3><ul><li>논리와 오류 처리 코드가 뒤섞이지 않게 만든다. (오류 코드에 따라 if&#x2F;else로 분기처리 &#x3D;&gt; try&#x2F;catch)</li></ul><h3 id="Try-Catch-Finally-문부터-작성하라"><a href="#Try-Catch-Finally-문부터-작성하라" class="headerlink" title="Try-Catch-Finally 문부터 작성하라"></a>Try-Catch-Finally 문부터 작성하라</h3><ul><li>예외가 발생할 코드를 짤 때는 try-catch-finally로 시작하자</li><li>무슨 일이 생기든지 호출자가 기대하는 상태를 정의하기 쉬워진다.</li></ul><h4 id="파일이-없으면-예외를-던지는-단위-테스트"><a href="#파일이-없으면-예외를-던지는-단위-테스트" class="headerlink" title="파일이 없으면 예외를 던지는 단위 테스트"></a>파일이 없으면 예외를 던지는 단위 테스트</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test(expected = StorageException.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">retrieveSectionShouldThrowOnInvalidFileName</span><span class="params">()</span> &#123;</span><br><span class="line">    sectionStore.retrieveSection(<span class="string">&quot;invalid - file&quot;</span>);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위의 테스트를 <strong>먼저</strong> 작성하고 테스트에 맞춰 코드를 구현한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;RecordedGrip&gt; <span class="title function_">retrieveSection</span><span class="params">(String sectionName)</span> &#123;</span><br><span class="line">    <span class="comment">// 실제로 구현할 때까지 비어 있는 더미를 반환한다.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;RecordedGrip&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>지금으로서는 테스트를 정상적으로 진행하기 어렵다.</li><li>테스트가 빨리 정상적으로 녹색이 들어오도록 수정하자. (TDD에서 봤던 순서)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;RecordedGrip&gt; <span class="title function_">retrieveSection</span><span class="params">(String sectionName)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(sectionName);</span><br><span class="line">        stream.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StorageException</span>(<span class="string">&quot;retrieval error&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;RecordedGrip&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>코드가 예외를 던지기 때문에 테스트가 성공할 수 있다.</li><li>나머지 세부 로직을 TDD를 사용해 추가한다.</li><li>나머지 로직은 FileInputStream을 생성하는 코드와 close 호출문 사이에 넣으며 오류나 예외가 전혀 발생하지 않는다고 가정한다.</li><li>먼저 강제로 예외를 일으키는 테스트 케이스를 작성한 후 테스트를 통과하게 코드를 작성하는 방법으로 시작하자</li></ul><h3 id="미확인-예외를-사용하라"><a href="#미확인-예외를-사용하라" class="headerlink" title="미확인 예외를 사용하라"></a>미확인 예외를 사용하라</h3><ul><li>확인된 예외는 OCP를 위반한다.</li><li>메서드에서 확인된 예외를 던졌는데 catch 블록이 3단계 위에 있다면 그 사이 메서드 모두가 선언부에 해당 예외를 정의해야 한다. (자바에서 throws 예외클래스명)</li><li>모듈과 관련된 코드가 전혀 바뀌지 않았더라도 (선언부가 바뀌었기 때문에) 모듈을 다시 빌드한 다음 배포해야 한다.</li><li><strong>연쇄적인 수정으로 인해 캡슐화가 깨진다.</strong></li><li>때로는 정확한 예외를 위해 확인된 예외가 쓰일 수도 있지만, 일반적인 애플리케이션은 의존성이라는 비용이 그에 따른 이익보다 더 크다.</li></ul><h3 id="예외에-의미를-제공하라"><a href="#예외에-의미를-제공하라" class="headerlink" title="예외에 의미를 제공하라"></a>예외에 의미를 제공하라</h3><ul><li>예외를 던질 때는 전후 상황을 충분히 덧붙인다.</li><li>자바는 모든 예외에 호출 스택을 제공하지만, 실패한 코드의 의도를 파악하려면 호출 스택만으로는 부족하다.</li><li>오류 메시지에 정보를 담아 예외와 함께 던진다.</li><li>실패한 연산 이름과 실패 유형도 언급한다.</li><li>애플리케이션이 로깅 기능을 사용한다면 catch 블록에서 오류를 기록하도록 충분한 정보를 넘겨준다.</li></ul><h3 id="호출자를-고려해-예외-클래스를-정의하라"><a href="#호출자를-고려해-예외-클래스를-정의하라" class="headerlink" title="호출자를 고려해 예외 클래스를 정의하라"></a>호출자를 고려해 예외 클래스를 정의하라</h3><ul><li>애플리케이션에서 오류를 정의할 때 가장 중요한 관심사는 <strong>오류를 잡아내는 방법</strong>이 되어야 한다.</li><li>감싸는(wrapper) 클래스를 사용해서 예외를 잡아내자</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalPort</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ACMEPort innerPort;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LocalPort</span><span class="params">(<span class="type">int</span> portNumber)</span> &#123;</span><br><span class="line">        innerPort = <span class="keyword">new</span> <span class="title class_">ACMEPort</span>(portNumber);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            innerPort.open();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DeviceResponseException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PortDeviceFailure</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ATM1212UInlockedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PortDeviceFailure</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (GMXError e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PortDeviceFailure</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">- wrapper 클래스는 외부 API를 감싸면서 외부 라이브러리와 프로그램 사이에서 의존성이 크게 줄어든다.</span><br><span class="line">- 나중에 다른 라이브러리로 갈아타도 비용이 적다.</span><br><span class="line">- 테스트 하기도 쉬워진다.</span><br><span class="line">- 특정 업체가 API를 설계한 방식에 발목 잡히지 않는다.</span><br><span class="line"></span><br><span class="line">### 정상 흐름을 정의하라</span><br><span class="line">- 비즈니스 논리와 오류 처리를 잘 분리한 코드가 되어가다가도, 오류 감지가 프로그램 언저리로 밀려나게 된다.</span><br><span class="line"></span><br><span class="line">***특수 사례 패턴(Special Case Pattern)***</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="comment">// 식비를 비용으로 청구하지 않았다면 일일 기본 식비를 더한다.</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">MealExpenses</span> <span class="variable">expenses</span> <span class="operator">=</span> expenseReportDAO.getMeals(employee.getID());</span><br><span class="line">    m_total += expenses.getTotal();</span><br><span class="line">&#125; <span class="keyword">catch</span> (MealExpensesNotFound e) &#123;</span><br><span class="line">    m_total += getMealPerDiem();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 특수 상황을 처리할 필요가 없도록 바꾼다.</span></span><br><span class="line"><span class="type">MealExpenses</span> <span class="variable">expenses</span> <span class="operator">=</span> expenseReportDAO.getMeals(employee.getID());</span><br><span class="line">m_total += expenses.getTotal();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PerDiemMealExpenses</span> <span class="keyword">implements</span> <span class="title class_">MealExpenses</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 기본값으로 일일 기본 식비를 반환한다.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="null을-반환하지-마라"><a href="#null을-반환하지-마라" class="headerlink" title="null을 반환하지 마라"></a>null을 반환하지 마라</h3><ul><li>null을 확인하는 수많은 코드들은 여전히 있다.</li><li>null을 반환하는 코드는 일거리를 늘릴 뿐만 아니라 호출자에게 문제를 떠넘긴다.</li><li>누구 하나라도 null 확인을 빼먹으면 애플리케이션이 통제 불능에 빠질지도 모른다.</li><li>위에서도 사용했던 <strong>특수 사례 패턴</strong>을 통해서 null이 나오지 않도록 빈 값, 빈 리스트 등을 반환하도록 해서 null 체크를 없애자</li></ul><h3 id="null을-전달하지-마라"><a href="#null을-전달하지-마라" class="headerlink" title="null을 전달하지 마라"></a>null을 전달하지 마라</h3><ul><li>정상적인 인수로 null을 기대하는 API가 아니라면 메서드로 null을 전달하는 코드는 최대한 피한다.</li><li>대다수 프로그래밍 언어는 호출자가 실수로 넘기는 null을 적절히 처리하는 방법이 없다.</li><li>그렇다면 애초에 <strong>null을 넘기지 못하도록 금지하는 정책</strong>이 합리적이다.</li><li>인수에 null이 넘어오지 않도록 하여 부주의한 실수를 줄이자.</li></ul><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다.</li><li>오류 처리를 프로그램 논리와 분리해 독자적인 사안으로 고려하면 튼튼하고 깨끗한 코드를 작성할 수 있다.</li><li>오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Clean_Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code 6장 - 객체와 자료 구조</title>
      <link href="/2021/02/15/clean_code/chapter06/"/>
      <url>/2021/02/15/clean_code/chapter06/</url>
      
        <content type="html"><![CDATA[<ul><li>자료 추상화</li><li>자료&#x2F;객체 비대칭</li><li>디미터 법칙</li><li>자료 전달 객체</li><li>결론</li></ul><h3 id="자료-추상화"><a href="#자료-추상화" class="headerlink" title="자료 추상화"></a>자료 추상화</h3><ul><li>구체적인 클래스와 추상적인 클래스</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 구체적인 클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> x;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> y;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 추상적인 클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="title function_">getX</span><span class="params">()</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">getY</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setCartesian</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">getR</span><span class="params">()</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">getTheta</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setPolar</span><span class="params">(<span class="type">double</span> r, <span class="type">double</span> theta)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Point 인터페이스는 클래스 메서드가 접근 정책을 강제한다.</p><ul><li>좌표를 읽을 때는 각 값을 개별적으로 읽어야 한다.</li><li>하지만 값을 설정할 때는 두 값을 한꺼번에 설정해야 한다.</li></ul></li><li><p>Point 클래스는 구현을 노출한다.</p><ul><li>역시 개별적으로 좌표값을 읽고 설정하도록 강제한다.</li><li>변수를 private으로 설정한다고 하더라도 get, set 함수를 제공한다면 결국 구현을 외부로 노출하는 셈이다.</li></ul></li><li><p>변수 사이에 함수라는 계층을 넣는다고 구현이 저절로 감춰지지 않는다.</p></li><li><p>형식에 치우쳐서 조회 함수와 설정 함수로 변수를 다룬다고 클래스가 되는 것이 아니다.</p></li><li><p><strong>추상 인터페이스를 제공해 사용자가 구현을 모른 채 자료의 핵심을 조작할 수 있어야 진정한 의미의 클래스다.</strong></p></li><li><p>구체적인 클래스와 추상적인 클래스 또다른 예시</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 구체적인 클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="title function_">getFuelTankCapacityInGallons</span><span class="params">()</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">getGallonsOfGasoline</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 추상적인 클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="title function_">getPercentFuelRemaining</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>구체적인 클래스는 연료 상태를 구체적인 숫자 값으로 알려준다.</li><li>추상적인 클래스는 자동차 연료 상태를 백분율이라는 추상적인 개념으로 알려준다.<ul><li><strong>백분율 값으로 주기 때문에 클래스 내부에 어떤 데이터를 갖고 결과를 내보내는 지 감출 수 있다.</strong></li></ul></li></ul><h3 id="자료-x2F-객체-비대칭"><a href="#자료-x2F-객체-비대칭" class="headerlink" title="자료&#x2F;객체 비대칭"></a>자료&#x2F;객체 비대칭</h3><ul><li><strong>객체는 추상화 뒤로 자료를 숨긴 채 자료를 다루는 함수만 공개한다.</strong></li><li>자료 구조는 자료를 그대로 공개하며 별다른 함수는 제공하지 않는다.</li></ul><p><em><strong>절차적인 도형</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Square</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Point topLeft;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> side;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Point topLeft;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> height;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Point center;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Geometry</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14159265</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">(Object shape)</span> <span class="keyword">throws</span> NoSuchShapeException &#123;</span><br><span class="line"><span class="keyword">if</span> (shape <span class="keyword">instanceof</span> Square) &#123;</span><br><span class="line"><span class="type">Square</span> <span class="variable">s</span> <span class="operator">=</span> (Square)shape;</span><br><span class="line"><span class="keyword">return</span> s.side * s.side;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> Rectangle) &#123;</span><br><span class="line"><span class="type">Rectangle</span> <span class="variable">r</span> <span class="operator">=</span> (Rectangle)shape;</span><br><span class="line"><span class="keyword">return</span> r.height * r.width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> Circle) &#123;</span><br><span class="line"><span class="type">Circle</span> <span class="variable">c</span> <span class="operator">=</span> (Circle)shape;</span><br><span class="line"><span class="keyword">return</span> PI * c.radius * c.radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchShapeException</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Geometry 클래스에 둘레 길이를 구하는 perimeter() 함수를 추가한다고 할 때는 도형 클래스에 아무 영향이 없다. 도형 클래스에 의존하는 다른 클래스도 마찬가지다.</li><li>하지만 새 도형을 추가하게 된다면 Geometry 클래스에 속한 함수를 모두 수정해야 한다. (area() 함수에서 새로운 도형에 대한 로직을 작성하고, perimeter() 함수 역시 추가가 된다.)</li></ul><p><em><strong>객체 지향적인 도형</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 오버라이드 어노테이션 추가함</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Point topLeft;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> side;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> side*side;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Point topLeft;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> height;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> height * width;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Point center;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14159265</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>절차적인 도형과 달리 Geometry 클래스가 없어도 각각의 도형 클래스에서 area() 메서드를 갖고 있다.(polymorphic 메서드)</li><li>그러므로 새로운 도형을 추가해도 기존 함수에 아무런 영향을 미치지 않는다.</li><li>하지만, 새로운 함수를 추가하고 싶다면 모든 도형 클래스를 고쳐야 한다.</li></ul><h4 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h4><ul><li>객체 지향 코드에서 어려운 변경은 절차적인 코드에서 쉽고, 절차적인 코드에서 어려운 변경은 객체 지향 코드에서 쉽다.</li><li>상황에 따라서 적합한 방법을 선택해야 한다.</li><li><strong>모든 것이 객체라는 생각은 미신이다.</strong></li><li><strong>때로는 단순한 자료 구조와 절차적인 코드가 가장 적합한 상황도 있다.</strong></li></ul><h3 id="디미터-법칙"><a href="#디미터-법칙" class="headerlink" title="디미터 법칙"></a>디미터 법칙</h3><ul><li><strong>모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다.</strong></li><li><strong>객체는 조회 함수로 내부 구조를 공개하면 안 된다.</strong></li><li>디미터 법칙에서 말하는 메서드 호출이 가능한 객체</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">“클래스 C의 메서드 f는 아래의 객체의 메서드만 호출해야 한다”</span><br><span class="line">- 클래스 C</span><br><span class="line">- f가 생성한 객체</span><br><span class="line">- f 인수로 넘어온 객체</span><br><span class="line">- C 인스턴스 변수에 저장된 객체</span><br></pre></td></tr></table></figure><p><em><strong>기차 충돌</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이렇게 작성하지 말자</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">outputDir</span> <span class="operator">=</span> ctxt.getOptions().getScratchDir().getAbsolutePath();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이렇게 나누자</span></span><br><span class="line"><span class="type">Options</span> <span class="variable">opts</span> <span class="operator">=</span> ctxt.getOptions();</span><br><span class="line"><span class="type">File</span> <span class="variable">scratchDir</span> <span class="operator">=</span> opts.getScratchDir();</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">outputDir</span> <span class="operator">=</span> scratchDir.getAbsolutePath();</span><br></pre></td></tr></table></figure><ul><li>ctxt, Options, ScratchDir이 객체라면 내부 구조를 숨겨야 하므로 확실히 디미터 법칙을 위반한다.</li><li>하지만 자료 구조라면 당연히 내부 구조를 노출하므로 디미터 법칙이 적용되지 않는다.</li></ul><h4 id="잡종-구조"><a href="#잡종-구조" class="headerlink" title="잡종 구조"></a>잡종 구조</h4><ul><li>이런 혼란으로 말미암아 때때로 절반은 객체, 절반은 자료 구조인 잡종 구조가 나온다.</li><li>잡종 구조는 중요한 기능을 수행하는 함수도 있고, 공개 변수나 공개 조회&#x2F;설정 함수도 있다.</li><li>공개 조회&#x2F;설정 함수는 비공개 변수를 그대로 노출한다.</li><li>그래서 다른 함수가 절차적인 프로그래밍의 자료 구조 접근 방식처럼 비공개 변수를 사용하고픈 유혹에 빠지기 십상이다.</li><li><strong>새로운 함수는 물론이고 새로운 자료 구조도 추가하기 어렵다.</strong></li><li><strong>양쪽 세상(객체, 자료 구조)에서 단점만 모아놓은 구조다</strong></li><li>되도록 피하자.</li><li>프로그래머가 함수나 타입을 보호할지 공개할지 확신하지 못해 어중간하게 내놓은 설계에 불과하다.</li></ul><h4 id="구조체-감추기"><a href="#구조체-감추기" class="headerlink" title="구조체 감추기"></a>구조체 감추기</h4><ul><li>만약에 ctxt가 자료구조가 아닌 진짜 객체라면 위에서처럼 내부 구조를 드러내면 안된다.</li><li>객체에게 <strong>뭔가를 하라고</strong> 말해야지 속을 드러내라고 말하면 안 된다.</li><li>절대 경로(absolutePath)가 왜 필요할지 모듈 내부를 찾아서 임시 파일을 생성하기 위한 목적이라는 사실을 발견한다. (클린코드 교재의 상황에서)</li><li>ctxt 객체에게 임시 파일을 생성하라고 직접 시켜본다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> ctxt.createScratchFileStream(classFileName);</span><br></pre></td></tr></table></figure><ul><li>더 이상 ctxt는 내부 구조를 드러내지 않으며, 모듈에서 해당 함수는 자신이 몰라야 하는 여러 객체를 탐색할 필요가 없다. (<strong>디미터 법칙을 위반하지 않는다.</strong>)</li></ul><h3 id="자료-전달-객체"><a href="#자료-전달-객체" class="headerlink" title="자료 전달 객체"></a>자료 전달 객체</h3><ul><li>전형적인 형태는 공개 변수만 있고 함수가 없는 클래스다.</li><li>흔히 데이터베이스에 저장된 가공되지 않은 정보를 애플리케이션 코드에서 사용할 객체로 변환하는 일련의 단계에서 가장 처음으로 사용하는 구조체다.</li><li>(교재 예시는 private 인스턴스 변수와, 생성자, getter() 함수가 적혀있다.)</li></ul><h4 id="활성-레코드"><a href="#활성-레코드" class="headerlink" title="활성 레코드"></a>활성 레코드</h4><ul><li>DTO의 특수한 형태다. (<strong>자료 구조</strong>)</li><li>공개 변수가 있거나 비공개 변수에 조회&#x2F;설정 함수가 있는 자료 구조지만, 대개 save나 find와 같은 탐색 함수도 제공한다.</li><li>데이터베이스 테이블이나 다른 소스에서 자료를 직접 변환한 결과다.</li><li>활성 레코드에 비즈니스 규칙 메서드를 추가해 이런 자료 구조를 객체로 취급하지 말아야 한다. (<strong>잡종 구조</strong>)</li><li><strong>비즈니스 규칙을 담으면서 내부 자료를 숨기는 객체는 따로 생성한다.</strong><ul><li>내부 자료가 활성 레코드의 인스턴스일 가능성이 높다!</li></ul></li></ul><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>객체는 동작을 공개하고 자료를 숨긴다.<ul><li>그래서 기본 동작을 변경하지 않으면서 새 객체 타입을 추가하기는 쉬운 반면, 기존 객체에 새 동작을 추가하기는 어렵다.</li></ul></li><li>자료 구조는 별다른 동작 없이 자료를 노출한다.<ul><li>그래서 기존 자료 구조에 새 동작을 추가하기는 쉬우나, 기존 함수에 새 자료 구조를 추가하기는 어렵다.</li></ul></li><li><strong>시스템을 구현할 때, 새로운 자료 타입을 추가하는 유연성이 필요하면 객체가 더 적합하다.</strong></li><li><strong>새로운 동작을 추가하는 유연성이 필요하면 자료 구조와 절차적인 코드가 더 적합하다.</strong></li><li><strong>편견 없이 이 사실을 이해해 최적의 해결책을 선택하자</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Clean_Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code 5장 - 형식 맞추기</title>
      <link href="/2021/02/13/clean_code/chapter05/"/>
      <url>/2021/02/13/clean_code/chapter05/</url>
      
        <content type="html"><![CDATA[<ul><li>형식을 맞추는 목적</li><li>적절한 행 길이를 유지하기</li><li>가로 형식 맞추기</li><li>팀 규칙</li><li>Uncle Bob의 형식 규칙</li></ul><h3 id="형식을-맞추는-목적"><a href="#형식을-맞추는-목적" class="headerlink" title="형식을 맞추는 목적"></a>형식을 맞추는 목적</h3><ul><li>코드 형식은 너무 중요하다.</li><li>오늘 구현한 코드의 가독성은 앞으로 바뀔 코드의 품질에 지대한 영향을 미친다.</li><li>오랜 시간이 지나 원래 코드의 흔적을 더 이상 찾아보기 어려울 정도로 코드가 바뀌어도 맨 처음 잡아놓은 구현 스타일과 가독성 수준은 유지보수 용이성과 확장성에 계속 영향을 미친다.</li></ul><h3 id="적절한-행-길이를-유지하라"><a href="#적절한-행-길이를-유지하라" class="headerlink" title="적절한 행 길이를 유지하라"></a>적절한 행 길이를 유지하라</h3><ul><li>500줄을 넘지 않고 대부분 200줄 정도인 파일로도 커다란 시스템을 구축할 수 있다는 사실이다.</li></ul><h4 id="신문-기사처럼-작성하라"><a href="#신문-기사처럼-작성하라" class="headerlink" title="신문 기사처럼 작성하라"></a><em>신문 기사처럼 작성하라</em></h4><ul><li>독자는 위에서 아래로 기사를 읽는다.</li><li>이름은 간단하면서도 설명이 가능하게 짓는다.</li><li>이름만 보고도 올바른 모듈을 살펴보고 있는지 아닌지를 판단할 정도로 신경 써서 짓는다.</li><li>소스 파일 첫 부분은 고차원 개념과 알고리즘을 설명한다.</li><li>아래로 내려갈수록 의도를 세세하게 묘사한다.</li><li>마지막에는 가장 저차원 함수와 세부 내역이 나온다.</li><li><strong>한 면을 다 채우는 신문 기사는 거의 없다</strong></li><li><strong>신문은 다양한 기사로 이뤄진다</strong></li><li><strong>대다수 기사가 아주 짧다</strong></li></ul><h4 id="개념은-빈-행으로-분리하라"><a href="#개념은-빈-행으로-분리하라" class="headerlink" title="개념은 빈 행으로 분리하라"></a><em>개념은 빈 행으로 분리하라</em></h4><ul><li>거의 모든 코드는 왼쪽에서 오른쪽으로 그리고 위에서 아래로 읽힌다.</li><li>각 행은 수식이나 절을 나타내고, 일련의 행 묶음은 완결된 생각 하나를 표현한다.</li><li><strong>줄바꿈</strong>: 생각 사이는 빈 행을 넣어 분리해야 마땅하다.</li></ul><h4 id="세로-밀집도"><a href="#세로-밀집도" class="headerlink" title="세로 밀집도"></a><em>세로 밀집도</em></h4><ul><li>서로 밀접한 코드 행은 세로로 가까이 놓여야 한다.</li><li>세로 밀집도 예시</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReporterConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 리포터 리스너의 클래스 이름</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String m_className;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 리포터 리스너의 속성</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Property&gt; m_properties = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Property&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addProperty</span><span class="params">(Property property)</span> &#123;</span><br><span class="line">        m_properties.add(property);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReporterConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String m_className;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Property&gt; m_properties = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Property&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addProperty</span><span class="params">(Property property)</span> &#123;</span><br><span class="line">        m_properties.add(property);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>시선이 분산된다.</li></ul><h4 id="수직-거리"><a href="#수직-거리" class="headerlink" title="수직 거리"></a><em>수직 거리</em></h4><ul><li>함수 연관 관계와 동작 방식을 이해하려고 이 함수에서 저 함수로 오가며 소스 파일을 위아래로 뒤지는 혼란을 어떻게 할까?</li><li>서로 밀접한 개념은 세로로 가까이 둬야 한다.</li><li>물론 두 개념이 서로 다른 파일에 속한다면 규칙이 통하지 않는다.</li><li>하지만 타당한 근거가 없다면 서로 밀접한 개념은 한 파일에 속해야 마땅하다.</li><li>한 개념을 이해하는 데 다른 개념이 중요한 정도다.</li><li>연관성이 깊은 두 개념이 멀리 떨어져 있으면 코드를 읽는 사람이 소스 파일과 클래스를 여기저기 뒤지게 된다.</li><li><strong>변수 선언</strong>: 변수는 사용하는 위치에 최대한 가까이 선언한다.</li><li><strong>지역 변수</strong>는 각 함수 맨 처음에 선언한다.</li><li><strong>인스턴스 변수</strong>는 클래스 맨 처음에 선언한다.<ul><li>변수 간에 세로로 거리를 두지 않는다.</li><li>**잘 설계한 클래스는 많은 (혹은 대다수) 클래스 메서드가 인스턴스 변수를 사용하기 때문이다. **</li><li>C++에서는 모든 인스턴스 변수를 클래스 마지막에 선언한다는 소위 <strong>가위 규칙</strong>을 적용한다.</li><li>자바에서는 보통 클래스 맨 처음에 인스턴스 변수를 선언한다.</li><li>중요한 건 변수 선언을 어디서 찾을지 모두가 알고 있어야 한다.</li></ul></li><li><strong>종속 함수</strong>는  한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치한다.<ul><li>가능하다면 호출하는 함수를 호출되는 함수보다 먼저 배치한다.</li><li>방금 호출한 함수가 잠시 후에 정의되리라는 사실이 예측된다.</li></ul></li><li><strong>개념적 유사성</strong>: 어떤 코드는 서로 끌어당긴다.<ul><li>ex) 한 함수가 다른 함수를 호출, 변수와 그 변수를 사용하는 함수, 비슷한 동작을 수행하는 일군의 함수</li><li>명명법이 똑같고 기본 기능이 유사하고 간단하다.</li><li>서로가 서로를 호출하는 관계는 부차적인 요인이다.</li></ul></li></ul><h4 id="세로-순서"><a href="#세로-순서" class="headerlink" title="세로 순서"></a><em>세로 순서</em></h4><ul><li><strong>호출되는 함수를 호출하는 함수보다 나중에 배치한다.</strong></li><li>신문 기사와 마찬가지로 가장 중요한 개념을 가장 먼저 표현한다.</li></ul><h3 id="가로-형식-맞추기"><a href="#가로-형식-맞추기" class="headerlink" title="가로 형식 맞추기"></a>가로 형식 맞추기</h3><ul><li>짧은 행이 바람직하다.</li><li>홀러리스가 내놓은 80자 제한보다 좀더 넉넉하게 100자나 120자에 달해도 나쁘지 않지만 그 이상은 주의부족이다.</li></ul><h4 id="가로-공백과-밀집도"><a href="#가로-공백과-밀집도" class="headerlink" title="가로 공백과 밀집도"></a><em>가로 공백과 밀집도</em></h4><ul><li>가로로는 공백을 사용해 밀접한 개념과 느슨한 개념을 표현한다.</li><li>예시</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">measureLine</span><span class="params">(String line)</span> &#123;</span><br><span class="line">  lineCount++;</span><br><span class="line">  <span class="type">int</span> <span class="variable">lineSize</span> <span class="operator">=</span> line.length();</span><br><span class="line">  totalChars += lineSize;</span><br><span class="line">  lineWidthHistogram.addLine(lineSize, lineCount);</span><br><span class="line">  recordWidestLine(lineSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>공백을 넣으면 두 가지 주요 요소가 확실히 나뉜다는 사실이 더 분명해진다.</li><li>반면, 함수 이름과 이어지는 괄호 사이에는 공백을 넣지 않았다.</li><li>함수와 인수는 서로 밀접하기 때문이다.</li><li>공백을 넣으면 한 개념이 아니라 별개로 보인다.</li><li>함수를 호출하는 코드에서 괄호 안 인수는 공백으로 분리한다.</li><li>쉼표를 강조해 인수가 별개라는 사실을 보여준다.</li></ul><h4 id="가로-정렬"><a href="#가로-정렬" class="headerlink" title="가로 정렬"></a><em>가로 정렬</em></h4><ul><li>공백을 일정하게 주는 형식</li><li>코드가 엉뚱한 부분을 강조해 진짜 의도가 가려지기 때문에 좋지 않다.</li><li>변수 유형은 무시하고 변수 이름부터 읽게 되거나 할당 연산자보다 오른쪽 피연산자에 눈이 가게 된다.</li><li><img src="/./img/chapter5_image.png" alt="가로정렬"></li><li><strong>사용하지 말자</strong></li></ul><h4 id="들여쓰기"><a href="#들여쓰기" class="headerlink" title="들여쓰기"></a><em>들여쓰기</em></h4><ul><li>범위(scope)로 이뤄진 계층을 표현하기 위해 우리는 코드를 들여쓴다.</li><li>들여쓰는 정도는 계층에서 코드가 자리잡은 수준에 비례한다.</li><li>클래스 정의처럼 파일 수준인 문장은 들여쓰지 않는다.</li><li>클래스 내 메서드는 클래스보다 한 수준 들여쓴다.</li><li>메서드 코드는 메서드 선언보다 한 수준 들여쓴다.</li><li>블록 코드는 블록을 포함하는 코드보다 한 수준 들여 쓴다.</li><li><strong>구조가 한눈에 들어온다</strong></li><li><strong>들여쓰기 무시하기</strong> : 간단한 if문, 짧은 while 문, 짧은 함수에서 들여쓰기 규칙을 무시하고픈 유혹이 생긴다.<ul><li>원점으로 돌아가 들여쓰기를 넣자.</li></ul></li></ul><h4 id="가짜-범위"><a href="#가짜-범위" class="headerlink" title="가짜 범위"></a><em>가짜 범위</em></h4><ul><li>때로는 빈 while 문이나 for 문을 접한다.</li><li>가능한 피하자</li></ul><h3 id="팀-규칙"><a href="#팀-규칙" class="headerlink" title="팀 규칙"></a>팀 규칙</h3><ul><li>팀에 속한다면 자신이 선호해야 할 규칙은 바로 팀 규칙이다.</li><li>팀은 한 가지 규칙에 합의해야 한다.</li><li>모든 팀원은 그 규칙을 따라야 한다.</li><li>그래야 소프트웨어가 <strong>일관적인 스타일</strong>을 보인다.</li><li>개개인이 맘대로 짜대는 코드는 당연히 피하자</li></ul><h3 id="밥-아저씨의-형식-규칙"><a href="#밥-아저씨의-형식-규칙" class="headerlink" title="밥 아저씨의 형식 규칙"></a>밥 아저씨의 형식 규칙</h3><ul><li>(책에 나와있는 내용이지만 일일이 직접 타이핑 해보며 형식을 몸으로 익혀보기)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeAnalyzer</span> <span class="keyword">implements</span> <span class="title class_">JavaFileAnalysis</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> lineCount;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> maxLineWidth;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> widestLineNumber;</span><br><span class="line">  <span class="keyword">private</span> LineWidthHistogram lineWidthHistogram;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> totalChars;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">CodeAnalyzer</span><span class="params">()</span> &#123;</span><br><span class="line">    lineWidthHistogram = <span class="keyword">new</span> <span class="title class_">LineWidthHistogram</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> List&lt;File&gt; <span class="title function_">findJavaFiles</span><span class="params">(File parentDirectory)</span> &#123;</span><br><span class="line">    List&lt;File&gt; files = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;File&gt;();</span><br><span class="line">    findJavaFiles(parentDirectory, files);</span><br><span class="line">    <span class="keyword">return</span> files;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findJavaFiles</span><span class="params">(File parentDirectory, List&lt;File&gt; files)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (File file : parentDirectory.listFiles()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (file.getName().endsWith(<span class="string">&quot;.java&quot;</span>))</span><br><span class="line">        files.add(file);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (file.isDirectory())</span><br><span class="line">        findJavaFiles(file, files);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">analyzeFile</span><span class="params">(File javaFile)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(javaFile));</span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span>((line = br.readLine()) != <span class="literal">null</span>)</span><br><span class="line">      measureLine(line);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">measureLine</span><span class="params">(String line)</span> &#123;</span><br><span class="line">    lineCount++;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lineSize</span> <span class="operator">=</span> line.length();</span><br><span class="line">    totalChars += lineSize;</span><br><span class="line">    lineWidthHistogram.addLine(lineSize, lineCount);</span><br><span class="line">    recordWidestLine(lineSize);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLineCount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lineCount;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxLineWidth</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> maxLineWidth;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWidestLineNumber</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> widestLineNumber;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> LineWidthHistogram <span class="title function_">getLineWidthHistogram</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lineWidthHistoram;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getMeanLineWidth</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">double</span>)totalChars/lineCount;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMedianLineWidth</span><span class="params">()</span> &#123;</span><br><span class="line">    Integer[] sortedWidths = getSortedWidths();</span><br><span class="line">    <span class="type">int</span> <span class="variable">cumulativeLineCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> width : sortedWidths) &#123;</span><br><span class="line">      cumulativeLineCount += lineCountForWidth(width);</span><br><span class="line">      <span class="keyword">if</span> (cumulativeLineCount &gt; lineCount/<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Cannot get here&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">lineCountForWidth</span><span class="params">(<span class="type">int</span> width)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lineWidthHistogram.getLinesforWidth(width).size();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> Integer[] getsortedWidths() &#123;</span><br><span class="line">    Set&lt;Integer&gt; widths = lineWidthHistogram.getWidths();</span><br><span class="line">    Integer[] sortedWidths = (widths.toArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">0</span>]));</span><br><span class="line">    Arrays.sort(sortedWidths);</span><br><span class="line">    <span class="keyword">return</span> sortedWidths;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Clean_Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code 4장 - 주석</title>
      <link href="/2021/02/08/clean_code/chapter04/"/>
      <url>/2021/02/08/clean_code/chapter04/</url>
      
        <content type="html"><![CDATA[<ul><li>주석은 나쁜 코드를 보완하지 못한다</li><li>코드로 의도를 표현하라</li><li>좋은 주석</li><li>나쁜 주석</li></ul><h3 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h3><ul><li>잘 달린 주석은 그 어떤 정보보다 유용하다.</li><li>경솔하고 근거 없는 주석은 코드를 이해하기 어렵게 만든다.</li><li>우리는 코드로 의도를 표현하지 못해, 그러니까 실패를 만회하기 위해 주석을 사용한다.</li><li>주석은 실패를 의미한다.</li><li>주석이 필요한 상황에 처했다면, 상황을 역전시켜 코드로 의도를 표현할 방법은 없을까?</li><li>주석은 오래될수록 코드에서 멀어지고 그릇될 가능성도 커진다. (프로그래머들이 주석을 유지하고 보수하기란 현실적으로 불가능하니까)</li><li>부정확한 주석은 아예 없는 주석보다 훨씬 더 나쁘다.</li><li>부정확한 주석은 독자를 현혹하고 오도한다.</li><li>진실은 한곳에만 존재한다. 바로 코드다. 코드만이 자기가 하는 일을 진실되게 말한다.</li><li>코드만이 정확한 정보를 제공하는 유일한 출처다.</li><li>(간혹 필요할지라도) 주석을 가능한 줄이도록 꾸준히 노력해야 한다.</li></ul><h3 id="주석은-나쁜-코드를-보완하지-못한다"><a href="#주석은-나쁜-코드를-보완하지-못한다" class="headerlink" title="주석은 나쁜 코드를 보완하지 못한다."></a>주석은 나쁜 코드를 보완하지 못한다.</h3><ul><li>코드에 주석을 추가하는 일반적인 이유는 코드 품질이 나쁘기 때문이다.</li><li>자신이 저지른 난장판을 주석으로 설명하려 애쓰는 대신에 그 난장판을 깨끗이 치우는 데 시간을 보내라</li></ul><h3 id="코드로-의도를-표현하라"><a href="#코드로-의도를-표현하라" class="headerlink" title="코드로 의도를 표현하라!"></a>코드로 의도를 표현하라!</h3><ul><li>코드만으로 의도를 설명하기 어려운 경우가 존재한다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 직원에게 복지 혜택을 받을 자격이 있는지 검사한다.</span></span><br><span class="line"><span class="keyword">if</span> ((employee.<span class="property">flags</span> &amp; <span class="variable constant_">HOURLY_FLAG</span>) &amp;&amp; (employee.<span class="property">age</span> &gt; <span class="number">65</span>)) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (employee.<span class="title function_">isEligibleForFullBenefits</span>()) &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>몇 초만 더 생각하면 코드로 대다수 의도를 표현할 수 있다.</li><li>많은 경우 주석으로 달리는 설명을 함수로 만들어 표현해도 충분하다.</li></ul><h3 id="좋은-주석"><a href="#좋은-주석" class="headerlink" title="좋은 주석"></a>좋은 주석</h3><ul><li>주석을 달지 않을 방법을 찾아낸 주석이 좋은 주석이다?!</li></ul><h4 id="법적인-주석"><a href="#법적인-주석" class="headerlink" title="법적인 주석"></a><em>법적인 주석</em></h4><ul><li>각 소스 파일 첫머리에 주석으로 들어가는 저작권 정보와 소유권 정보는 필요하고도 타당하다.</li></ul><h4 id="정보를-제공하는-주석"><a href="#정보를-제공하는-주석" class="headerlink" title="정보를 제공하는 주석"></a><em>정보를 제공하는 주석</em></h4><ul><li>때로는 기본적인 정보를 주석으로 제공하면 편리하다. 그래도 가능하다면 함수 이름에 정보를 담는 편이 더 좋다.</li><li>정규표현식에 대한 주석<ul><li>그래도 이왕이면 시각과 날짜를 변환하는 클래스를 반들어 코드를 옮겨주면 더 좋고 깔끔해지고 주석이 필요없어진다.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// kk:mm:ss EEE, MMM dd, yyyy 형식이다.</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">timeMatcher</span> <span class="operator">=</span> Pattern.compile(</span><br><span class="line"><span class="string">&quot;\\d*:\\d*:\\d* \\w*, \\w* \\d*, \\d*&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="의도를-설명하는-주석"><a href="#의도를-설명하는-주석" class="headerlink" title="의도를 설명하는 주석"></a><em>의도를 설명하는 주석</em></h4><ul><li>때때로 주석은 구현을 이해하게 도와주는 선을 넘어 결정에 깔린 의도까지 설명한다.</li><li>쉽게 말하면 왜 이 로직을 사용하고 있는지 그 해결한 방식에 대한 주석</li></ul><h4 id="의미를-명료하게-밝히는-주석"><a href="#의미를-명료하게-밝히는-주석" class="headerlink" title="의미를 명료하게 밝히는 주석"></a><em>의미를 명료하게 밝히는 주석</em></h4><ul><li>인수나 반환값이 표준 라이브러리나 변경하지 못하는 코드에 속한다면 의미를 명료하게 밝히는 주석이 유용하다.</li><li>주석이 올바른지 검증하기 쉽지 않은만큼 의미를 명료히 밝히는 주석이 필요한 이유인 동시에 주석이 위험하기도 하다.</li></ul><h4 id="결과를-경고하는-주석"><a href="#결과를-경고하는-주석" class="headerlink" title="결과를 경고하는 주석"></a><em>결과를 경고하는 주석</em></h4><ul><li>다른 프로그래머에게 결과를 경고할 목적으로 주석 사용</li></ul><h4 id="TODO-주석"><a href="#TODO-주석" class="headerlink" title="TODO 주석"></a><em>TODO</em> 주석</h4><ul><li><p>‘앞으로 할 일’을 &#x2F;&#x2F; TODO 주석으로 남겨두면 편하다.</p></li><li><p>TODO 주석은 프로그래머가 필요하다 여기지만 당장 구현하기 어려운 업무를 기술한다. </p></li><li><p>요즘 IDE는 TODO 주석을 전부 찾아 보여주는 기능도 있으니 잊어버릴 염려는 없다.</p></li><li><p>그렇다고 TODO를 마구 사용하는것은 바람직하지 않다.</p></li><li><p>주기적으로 점검해 없애도 괜찮은 주석은 없애자</p></li></ul><h4 id="중요성을-강조하는-주석"><a href="#중요성을-강조하는-주석" class="headerlink" title="중요성을 강조하는 주석"></a><em>중요성을 강조하는 주석</em></h4><ul><li>자칫 대수롭지 않다고 여겨질 무언가의 중요성을 강조하기 위해서도 주석을 사용한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">listItemContent</span> <span class="operator">=</span> match.group(<span class="number">3</span>).trim();</span><br><span class="line"><span class="comment">// 여기서 trim은 정말 중요하다. trim 함수는 문자열에서 시작 공백을 제거한다.</span></span><br><span class="line"><span class="comment">// 문자열에 시작 공백이 있으면 다른 문자열로 인식되기 때문이다.</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ListItemWidget</span>(<span class="built_in">this</span>, listItemContent, <span class="built_in">this</span>.level + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> buildList(text.substring(match.end()));</span><br></pre></td></tr></table></figure><h4 id="공개-API에서-Javadocs"><a href="#공개-API에서-Javadocs" class="headerlink" title="공개 API에서 Javadocs"></a><em>공개 API에서 Javadocs</em></h4><ul><li>공개 API를 구현한다면 반드시 훌륭한 Javadocs를 작성한다.</li><li>여느 주석과 마찬가지로 Javadocs 역시 독자를 오도하거나, 잘못 위치하거나, 그릇된 정보를 전달할 가능성이 존재한다.</li></ul><h3 id="나쁜-주석"><a href="#나쁜-주석" class="headerlink" title="나쁜 주석"></a>나쁜 주석</h3><ul><li>대다수 주석이 나쁘다.</li><li>허술한 코드를 지탱하거나, 엉성한 코드를 변명하거나, 미숙한 결정을 합리화하는 등 프로그래머가 주절거리는 독백에서 크게 벗어나지 못한다.</li></ul><h4 id="주절거리는-주석"><a href="#주절거리는-주석" class="headerlink" title="주절거리는 주석"></a><em>주절거리는 주석</em></h4><ul><li>특별한 이유 없이 의무감으로 혹은 프로세스에서 하라고 하니까 마지못해 주석을 단다면 전적으로 시간낭비다.</li></ul><h4 id="같은-이야기를-중복하는-주석"><a href="#같은-이야기를-중복하는-주석" class="headerlink" title="같은 이야기를 중복하는 주석"></a><em>같은 이야기를 중복하는 주석</em></h4><ul><li><p>헤더에 달린 주석이 같은 코드 내용을 그대로 중복하는 경우</p></li><li><p>코드보다 부정확해 독자가 함수를 대충 이해하고 넘어가게 만든다.</p></li></ul><h4 id="오해할-여지가-있는-주석"><a href="#오해할-여지가-있는-주석" class="headerlink" title="오해할 여지가 있는 주석"></a><em>오해할 여지가 있는 주석</em></h4><ul><li>때때로 의도는 좋았으나 프로그래머가 딱 맞을 정도로 엄밀하게는 주석을 달지 못하기도 한다.</li><li>주석에 담긴 ‘살짝 잘못된 정보’로 인해 프로그래머가 골머리를 앓을 수도 있다.</li></ul><h4 id="의무적으로-다는-주석"><a href="#의무적으로-다는-주석" class="headerlink" title="의무적으로 다는 주석"></a><em>의무적으로 다는 주석</em></h4><ul><li>모든 함수에 Javadocs를 달거나 모든 변수에 주석을 달아야 한다는 규칙은 어리석기 그지없다.</li><li>코드를 복잡하게 만들며, 거짓말을 퍼뜨리고, 혼동과 무질서를 초래한다.</li></ul><h4 id="있으나-마나-한-주석"><a href="#있으나-마나-한-주석" class="headerlink" title="있으나 마나 한 주석"></a>있으나 마나 한 주석</h4><ul><li>너무 당연한 사실을 언급하며 새로운 정보를 제공하지 못하는 주석은 필요없다.</li></ul><h4 id="무서운-잡음"><a href="#무서운-잡음" class="headerlink" title="무서운 잡음"></a><em>무서운 잡음</em></h4><ul><li>때로는 Javadocs도 잡음이다.</li><li>단지 문서를 제공하기 위해 불필요한 잡음을 넣지 말자</li></ul><h4 id="함수나-변수로-표현할-수-있다면-주석을-달지-말라"><a href="#함수나-변수로-표현할-수-있다면-주석을-달지-말라" class="headerlink" title="함수나 변수로 표현할 수 있다면 주석을 달지 말라"></a><em>함수나 변수로 표현할 수 있다면 주석을 달지 말라</em></h4><h4 id="위치를-표시하는-주석"><a href="#위치를-표시하는-주석" class="headerlink" title="위치를 표시하는 주석"></a>위치를 표시하는 주석</h4><ul><li>배너 아래 특정 기능을 모아 유용한 경우도 있긴 하다.</li><li>일반적으로는 가독성만 낮추므로 제거해야 마땅하다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Actions /////////////////////</span></span><br></pre></td></tr></table></figure><h4 id="닫는-괄호에-다는-주석"><a href="#닫는-괄호에-다는-주석" class="headerlink" title="닫는 괄호에 다는 주석"></a><em>닫는 괄호에 다는 주석</em></h4><ul><li>중첩이 심하고 장황한 함수라면 의미가 있을지 모르지만, 작고 캡슐화된 함수에는 잡음일 뿐이다.</li><li>차라리 함수를 줄이려 시도하자</li></ul><h4 id="공로를-돌리거나-저자를-표시하는-주석"><a href="#공로를-돌리거나-저자를-표시하는-주석" class="headerlink" title="공로를 돌리거나 저자를 표시하는 주석"></a><em>공로를 돌리거나 저자를 표시하는 주석</em></h4><ul><li>소스 코드 관리 시스템은 누가 언제 무엇을 추가했는지 귀신처럼 기억한다.</li><li>저자 이름으로 코드를 오염시킬 필요가 없다.</li><li>누가 수정했는지 알아서 유용할지도 모른다? -&gt; 현실적으로 그냥 오랫동안 코드에 방치되어 점차 부정확하고 쓸모없는 정보로 변하기 쉽다.</li><li>이런 정보는 <strong>소스 코드 관리 시스템</strong>에 저장하는 편이 좋다.</li></ul><h4 id="주석으로-처리한-코드"><a href="#주석으로-처리한-코드" class="headerlink" title="주석으로 처리한 코드"></a><em>주석으로 처리한 코드</em></h4><ul><li>주석으로 처리된 코드는 다른 사람들이 지우기를 주저한다.</li><li>이유가 있어서 남겨놓았고, 중요하니까 지우면 안되는줄 알아서 그렇다.</li><li>그래서 점점 쓸모 없는 코드가 쌓이게 된다.</li><li><strong>소스 코드 관리 시스템</strong>이 우리의 기억을 대신해준다.</li></ul><h4 id="HTML-주석"><a href="#HTML-주석" class="headerlink" title="HTML 주석"></a><em>HTML 주석</em></h4><ul><li>혐오 그 자체다..</li></ul><h4 id="전역-정보"><a href="#전역-정보" class="headerlink" title="전역 정보"></a><em>전역 정보</em></h4><ul><li>주석을 달아야 한다면 근처에 있는 코드만 기술하라.</li><li>코드 일부에 주석을 달면서 시스템의 전반적인 정보를 기술하지 마라</li></ul><h4 id="너무-많은-정보"><a href="#너무-많은-정보" class="headerlink" title="너무 많은 정보"></a><em>너무 많은 정보</em></h4><ul><li>주석에 흥미로운 역사나 관련 없는 정보를 장황하게 늘어놓지 마라.</li></ul><h4 id="모호한-관계"><a href="#모호한-관계" class="headerlink" title="모호한 관계"></a><em>모호한 관계</em></h4><ul><li>주석과 주석이 설명하는 코드는 둘 사이 관계가 명백해야 한다.</li></ul><h4 id="함수-헤더"><a href="#함수-헤더" class="headerlink" title="함수 헤더"></a><em>함수 헤더</em></h4><ul><li>짧은 함수는 긴 설명이 필요 없다.</li><li>짧고 한 가지만 수행하며 이름을 잘 붙인 함수가 주석으로 헤더를 추가한 함수보다 훨씬 좋다.</li></ul><h4 id="비공개-코드에서-Javadocs"><a href="#비공개-코드에서-Javadocs" class="headerlink" title="비공개 코드에서 Javadocs"></a><em>비공개 코드에서 Javadocs</em></h4><ul><li>공개하지 않을 코드라면 쓸모 없다.</li><li>코드만 보기 싫고 산만해진다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Clean_Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code 3장 - 함수</title>
      <link href="/2021/02/08/clean_code/chapter03/"/>
      <url>/2021/02/08/clean_code/chapter03/</url>
      
        <content type="html"><![CDATA[<ul><li>함수를 만드는 규칙</li><li>한 가지만 해라!</li><li>함수 당 추상화 수준은 하나로</li><li>Switch 문</li><li>서술적인 이름을 사용하라</li><li>함수 인수</li><li>부수 효과를 일으키지 마라</li><li>명령과 조회를 분리하라</li><li>오류 코드보다 예외를 사용하라</li><li>반복하지 마라</li><li>구조적 프로그래밍</li><li>그래서 함수는 어떻게 작성하는지</li><li>결론</li></ul><h3 id="작게-만들어라"><a href="#작게-만들어라" class="headerlink" title="작게 만들어라!"></a>작게 만들어라!</h3><ul><li>함수를 만드는 첫째 규칙은 ‘작게!’다</li><li>둘째 규칙은 ‘더 작게!’다.</li><li>If&#x2F;else&#x2F;while 문 등에 들어가는 블록은 한 줄이어야 한다.</li></ul><h3 id="한-가지만-해라"><a href="#한-가지만-해라" class="headerlink" title="한 가지만 해라!"></a>한 가지만 해라!</h3><ul><li><strong>함수는 한 가지를 해야 한다. 그 한가지를 잘 해야 한다. 그 한 가지만을 해야 한다.</strong></li><li>지정된 함수 이름 아래에서 추상화 수준이 하나인 단계만 수행한다면 그 함수는 한 가지 작업만 한다.</li><li>단순히 다른 표현이 아니라 의미 있는 이름으로 다른 함수를 추출할 수 있다면 그 함수는 여러 작업을 하는 셈이다.</li></ul><h3 id="함수-당-추상화-수준은-하나로"><a href="#함수-당-추상화-수준은-하나로" class="headerlink" title="함수 당 추상화 수준은 하나로!"></a>함수 당 추상화 수준은 하나로!</h3><ul><li>함수가 확실히 ‘한 가지’ 작업만 하려면 함수 내 모든 문장의 추상화 수준이 동일해야 한다. (이게 어려운 것 아닌가..?)</li><li>위에서 아래로 코드 읽기: <em><strong>내려가기</strong></em> 규칙<ul><li>코드는 위에서 아래로 이야기처럼 읽혀야 좋다.</li><li>위에서 아래로 TO 문단을 읽어내려 가듯이 코드를 구현하면 추상화 수준을 일관되게 유지하기가 쉬워진다.</li></ul></li></ul><h3 id="Switch-문"><a href="#Switch-문" class="headerlink" title="Switch 문"></a>Switch 문</h3><ul><li>작게 만들기가 어렵다. (If&#x2F;else가 여러번 이어지는 구문도 포함)</li><li>본질적으로 switch 문은 N가지를 처리한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Money <span class="title function_">calculatePay</span><span class="params">(Employee e)</span></span><br><span class="line">  <span class="keyword">throws</span> InvalidEmployeeType &#123;</span><br><span class="line">  <span class="keyword">switch</span> (e.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> COMMISSIONED:</span><br><span class="line">      <span class="keyword">return</span> calculateCommissionedPay(e);</span><br><span class="line">    <span class="keyword">case</span> HOURLY:</span><br><span class="line">      <span class="keyword">return</span> calculateHourlyPay(e);</span><br><span class="line">    <span class="keyword">case</span> SALARIED:</span><br><span class="line">      <span class="keyword">return</span> calculateSalariedPay(e);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidEmployeeType</span>(e.type);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위 함수의 문제<ol><li>함수가 길다. 새 직원 유형을 추가하면 더 길어진다.</li><li>‘한 가지’ 작업만 수행하지 않는다.</li><li>SRP(Single Responsibility Principle)를 위반한다. 코드를 변경할 이유가 여럿이기 때문이다.</li><li>OCP를 위반한다. 새 직원 유형을 추가할 때마다 코드를 변경하기 때문이다.</li></ol></li></ul><h3 id="서술적인-이름을-사용하라"><a href="#서술적인-이름을-사용하라" class="headerlink" title="서술적인 이름을 사용하라!"></a>서술적인 이름을 사용하라!</h3><ul><li>길고 서술적인 이름이 짧고 어려운 이름보다 좋다.</li><li>길고 서술적인 이름이 길고 서술적인 주석보다 좋다.</li><li>함수 이름을 정할 때는 여러 단어가 쉽게 읽히는 명명법을 사용한다. 그리고 여러 단어를 사용해 함수 기능을 잘 표현하는 이름을 선택한다.</li><li>서술적인 이름을 사용하면 개발자 머릿속에서도 설계가 뚜렷해지므로 코드를 개선하기 쉬워진다.</li><li>이름을 붙일 때는 일관성이 있어야 한다.</li><li>모듈 내에서 함수 이름은 같은 문구, 명사, 동사를 사용한다.</li></ul><h3 id="함수-인수"><a href="#함수-인수" class="headerlink" title="함수 인수"></a>함수 인수</h3><ul><li><p>이상적인 인수 개수는 0개 (적을수록 좋다. 1개까지는 양호함)</p></li><li><p>인수는 개념을 이해하기 어렵게 만든다.</p></li><li><p>함수에 인수 1개를 넘기는 이유 (<em>많이 쓰는 단항 형식</em>)</p><ul><li><p>인수에 질문을 던지는 경우</p></li><li><p>인수를 뭔가로 변환해 결과를 반환하는 경우 (변환 함수)</p><ul><li>인수에 출력 인수를 사용하면 혼란을 일으킨다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">fileExists</span><span class="params">(String fileName)</span> &#123;&#125;<span class="comment">// 변환 함수</span></span><br><span class="line">passwordAttemptFailedNtimes(<span class="type">int</span> attempts);<span class="comment">// 이벤트 함수, 입력 인수만 있다.</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>플래그 인수</p><ul><li>추하다.</li><li>함수로 부울 값을 넘기는 관례는 함수가 한꺼번에 여러 가지를 처리한다고 대놓고 공표하는 셈이다.</li></ul></li><li><p>이항 함수&#x2F;삼항 함수</p><ul><li>이해하기가 어렵다.</li><li>프로그램을 짜다보면 불가피한 경우가 생기기도 하지만 그만큼 위험이 따른다는 사실을 이해하고 가능하면 단항함수로 바꾸도록 애써야 한다.</li></ul></li><li><p>인수 객체</p><ul><li>인수가 2~3개 필요하다면 일부를 독자적인 클래스 변수로 선언할 가능성을 짚어본다.</li></ul></li><li><p>인수 목록</p><ul><li>인수 개수가 가변적인 함수도 필요하다.</li></ul></li><li><p>동사와 키워드</p><ul><li>함수의 의도나 인수의 순서와 의도를 제대로 표현하려면 결국 좋은 함수 이름이 필수다.</li><li>단항 함수는 함수와 인수가 동사&#x2F;명사 쌍을 이뤄야 한다.</li><li>함수 이름에 키워드를 추가하는 형식<ul><li>assertEquals보다 assertExpectedEqualsActual(expected, actual)이 더 좋다. 인수 순서를 기억할 필요가 없어지니까</li></ul></li></ul></li></ul><h3 id="부수-효과를-일으키지-마라"><a href="#부수-효과를-일으키지-마라" class="headerlink" title="부수 효과를 일으키지 마라!"></a>부수 효과를 일으키지 마라!</h3><ul><li><p>부수 효과는 거짓말이다.</p><ul><li><p>함수에서 한 가지를 하겠다고 해놓고선 남몰래 다른 짓을 하니까</p></li><li><p>때로는 예상치 못하게 클래스 변수를 수정한다. (교활하고 해롭다)</p></li><li><p>때로는 함수로 넘어온 인수나 시스템 전역 변수를 수정한다. (교활하고 해롭다)</p></li><li><p>출력 인수</p><ul><li>일반적으로 인수는 함수 입력으로 해석한다.</li><li>함수 선언부를 찾아보는 행위는 코드를 보다가 주춤하는 행위와 동급이다. 인지적으로 거슬린다는 뜻이므로 피해야 한다.</li><li>객체 지향 언어에서는 출력 인수를 사용할 필요가 거의 없다.</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3-6 UserValidator.java 부수 효과 예시</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserValidator</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Cryptographer cryptographer;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkPassword</span><span class="params">(String userName, String password)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> UserGateway.findByName(userName);</span><br><span class="line">    <span class="keyword">if</span> (user != User.NULL) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">codedPhrase</span> <span class="operator">=</span> user.getPhraseEncodedByPassword();</span><br><span class="line">        <span class="type">String</span> <span class="variable">phrase</span> <span class="operator">=</span> cryptographer.decrypt(codedPhrase, password);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Valid Password&quot;</span>.equals(phrase)) &#123;</span><br><span class="line">            Session.initialize();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="명령과-조회를-분리하라"><a href="#명령과-조회를-분리하라" class="headerlink" title="명령과 조회를 분리하라!"></a>명령과 조회를 분리하라!</h3><ul><li>함수는 뭔가를 수행하거나 뭔가에 답하거나 둘 중 하나만 해야 한다.</li></ul><h3 id="오류-코드보다-예외를-사용하라"><a href="#오류-코드보다-예외를-사용하라" class="headerlink" title="오류 코드보다 예외를 사용하라!"></a>오류 코드보다 예외를 사용하라!</h3><ul><li><p>명령 함수에서 오류 코드를 반환하는 방식은 명령&#x2F;조회 분리 규칙을 미묘하게 위반한다.</p></li><li><p>오류 코드를 반환하면 호출자는 오류 코드를 곧바로 처리해야 한다는 문제에 부딪힌다.</p></li><li><p>반면 오류 코드 대신 예외를 사용하면 오류 처리 코드가 원래 코드에서 분리되므로 코드가 깔끔해진다.</p></li><li><p>Try&#x2F;Catch 블록 뽑아내기</p><ul><li>원래 추하다.</li><li>코드 구조에 혼란을 일으킨다.</li><li>정상 동작과 오류 처리 동작을 뒤섞는다.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 오류 코드 대신 예외를 사용한 코드</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  deletePage(page);</span><br><span class="line">  registry.deleteReference(page.name);</span><br><span class="line">  configKeys.deleteKey(page.name.makeKey());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">  logger.log(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// try/catch 블록을 별도 함수로 뽑아내는 편이 좋다.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Page page)</span> &#123;<span class="comment">// 오류를 처리하는 함수는 오류만 처리해야 마땅하다.</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    deletePageAndAllReferences(page);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logError(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">deletePageAndAllReferences</span><span class="params">(Page page)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  deletePage(page);</span><br><span class="line">  registry.deleteReference(page.name);</span><br><span class="line">  configKeys.deleteKey(page.name.makeKey());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">logError</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">  logger.log(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Error.java 의존성 자석<ul><li>오류 코드를 반환한다는 이야기는, 클래스든 열거형 변수는, 어디선가 오류 코드를 정의한다는 뜻이다.</li><li>Error 클래스 변경은 어렵고 번거로워 새 오류 코드를 정의하고 싶지 않기 때문에 기존 오류 코드를 재사용한다.</li><li>오류 코드 대신 예외를 사용하면 새 예외는 Exception 클래스에서 파생된다.</li><li>따라서 재컴파일&#x2F;재배치 없이도 새 예외 클래스를 추가할 수 있다. (OCP)</li></ul></li></ul><h3 id="반복하지-마라-DRY"><a href="#반복하지-마라-DRY" class="headerlink" title="반복하지 마라! (DRY)"></a>반복하지 마라! (DRY)</h3><ul><li>중복은 소프트웨어에서 만악의 근원</li><li>많은 원칙과 기법이 중복을 없애거나 제어할 목적으로 나왔다.</li><li>객체 지향 프로그래밍은 코드를 부모 클래스로 몰아 중복을 없앴다.</li><li>구조적 프로그래밍, AOP(Aspect Oriented Programming), COP(Component Oriented Programming)</li></ul><h3 id="구조적-프로그래밍"><a href="#구조적-프로그래밍" class="headerlink" title="구조적 프로그래밍"></a>구조적 프로그래밍</h3><ul><li><p>모든 함수와 함수 내 모든 블록에 입구와 출구가 하나만 존재해야 한다고 말했다. (Return 하나)</p></li><li><p>loop 안에서 break나 continue, goto 안된다.</p></li><li><p>함수가 아주 클 때만 상당한 이익을 제공한다.</p></li><li><p>그래서 함수를 작게 만든다면 return, break, continue를 여러 차례 사용해도 괜찮다. (오히려 의도를 표현하기 쉬워짐)</p></li><li><p>goto는 큰 함수에서만 의미가 있다고 하지만 그냥 안 쓰는게..?</p></li></ul><h3 id="함수를-어떻게-짜죠"><a href="#함수를-어떻게-짜죠" class="headerlink" title="함수를 어떻게 짜죠?"></a>함수를 어떻게 짜죠?</h3><ul><li>글짓기와 비슷하다.</li><li>처음에는 길고 복잡하다.<ul><li>들여쓰기 단계도 많고 중복된 루프도 많다. 인수 목록도 아주 길다.</li><li>이름은 즉흥적이고 코드는 중복된다.</li><li>하지만 그 서투른 코드를 빠짐없이 테스트하는 Unit Test를 만들자</li></ul></li><li>코드를 다듬고, 함수를 만들고, 이름을 바꾸고, 중복을 제거한다.</li><li>메서드를 줄이고 순서를 바꾼다. 때로는 전체 클래스를 쪼개기도 한다.</li><li>이와중에 코드는 항상 단위 테스트를 통과한다.</li></ul><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>모든 시스템은 특정 응용 분야 시스템을 기술할 목적으로 프로그래머가 설계한 도메인 특화 언어(Domain Specific Language, DSL)로 만들어진다.</li><li>함수는 그 언어에서 동사며, 클래스는 명사다.</li><li>대가 프로그래머는 시스템을 (구현할) 프로그램이 아니라 (풀어갈) 이야기로 여긴다.</li><li>프로그래밍 언어라는 수단을 통해 이야기를 풀어간다.</li><li>작성하는 함수가 분명하고 정확한 언어로 깔끔하게 같이 맞아떨어져야 이야기를 풀어가기가 쉬워진다는 사실을 기억하자</li></ul>]]></content>
      
      
      <categories>
          
          <category> Clean_Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code 2장 - 의미 있는 이름</title>
      <link href="/2021/02/08/clean_code/chapter02/"/>
      <url>/2021/02/08/clean_code/chapter02/</url>
      
        <content type="html"><![CDATA[<ul><li>의도가 분명한 이름 짓기</li><li>그릇된 정보를 남기지 않기</li><li>의미 있게 구분하기</li><li>발음하기 쉬운 이름 사용하기</li><li>검색하기 쉬운 이름 사용하기</li><li>인코딩한 이름을 사용하지 않기</li><li>한 개념에 한 단어</li><li>말장난 하지 않기</li><li>해법 영역, 문제 영역에서 가져온 이름을 사용하기</li><li>의미 있는 맥락 추가하기</li><li>불필요한 맥락 없애기</li><li>결론</li></ul><h3 id="의도를-분명히-밝혀라"><a href="#의도를-분명히-밝혀라" class="headerlink" title="의도를 분명히 밝혀라"></a>의도를 분명히 밝혀라</h3><ul><li>좋은 이름을 짓는 시간도 있지만, 좋은 이름으로 절약하는 시간이 훨씬 더 많다</li><li>코드가 하는 일을 짐작할 수 있게 하자</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 지뢰찾기 예시</span></span><br><span class="line"><span class="keyword">public</span> List&lt;<span class="type">int</span>[]&gt; getThem() &#123;</span><br><span class="line">  List&lt;<span class="type">int</span>[]&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;<span class="type">int</span>[]&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span>[] x : theList)</span><br><span class="line">    <span class="keyword">if</span> (x[<span class="number">0</span>] == <span class="number">4</span>)</span><br><span class="line">      list1.add(x);</span><br><span class="line">  <span class="keyword">return</span> list1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 각 개념에 이름 붙여보기</span></span><br><span class="line"><span class="keyword">public</span> List&lt;<span class="type">int</span>[]&gt; getFlaggedCells() &#123;</span><br><span class="line">  List&lt;<span class="type">int</span>[]&gt; flaggedCells = <span class="keyword">new</span> <span class="title class_">ArrayLiist</span>&lt;<span class="type">int</span>[]&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span>[] cell : gameBoard)</span><br><span class="line">    <span class="keyword">if</span> (cell[STATUS_VALUE] == FLAGGED)</span><br><span class="line">      flaggedCells.add(cell);</span><br><span class="line">  <span class="keyword">return</span> flaggedCells;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 이름을 좀 더 고쳐보자</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Cell&gt; <span class="title function_">getFlaggedCells</span><span class="params">()</span> &#123;</span><br><span class="line">  List&lt;Cell&gt; flaggedCells = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Cell&gt;();</span><br><span class="line">  <span class="keyword">for</span> (Cell cell : gameBoard)</span><br><span class="line">    <span class="keyword">if</span> (cell.isFlagged())</span><br><span class="line">      flaggedCells.add(cell);</span><br><span class="line">  <span class="keyword">return</span> flaggedCells;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="그릇된-정보를-피하라"><a href="#그릇된-정보를-피하라" class="headerlink" title="그릇된 정보를 피하라"></a>그릇된 정보를 피하라</h3><ul><li>코드에 그릇된 단서를 남겨 의미를 흐리지 말자</li><li>서로 흡사한 이름을 사용하지 않도록 주의하자</li></ul><h3 id="의미-있게-구분하라"><a href="#의미-있게-구분하라" class="headerlink" title="의미 있게 구분하라"></a>의미 있게 구분하라</h3><ul><li>연속적인 숫자를 덧붙인 이름은 의도적인 이름과 정반대다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyChars</span><span class="params">(<span class="type">char</span> a1[], <span class="type">char</span> a2[])</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a1.length; i++) &#123;</span><br><span class="line">    a2[i] = a1[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>의미가 불분명한 불용어를 사용하지 말라</li><li>불용어는 중복이다.</li><li>변수 이름에 variable은 금물</li><li>Customer가 있는데 CustomerObject가 있다면 헷갈린다.</li></ul><h3 id="발음하기-쉬운-이름을-사용하라"><a href="#발음하기-쉬운-이름을-사용하라" class="headerlink" title="발음하기 쉬운 이름을 사용하라"></a>발음하기 쉬운 이름을 사용하라</h3><ul><li>팀의 대화를 위해서 발음하기 쉽게 이름을 짓자</li></ul><h3 id="검색하기-쉬운-이름을-사용하라"><a href="#검색하기-쉬운-이름을-사용하라" class="headerlink" title="검색하기 쉬운 이름을 사용하라"></a>검색하기 쉬운 이름을 사용하라</h3><ul><li>이름을 의미있게 짓다보면 함수 이름이 길어지고 검색하기도 쉬워진다.</li><li>문자 하나를 사용하는 이름이면 텍스트 코드에서 쉽게 눈에 띄지 않는다.</li></ul><h3 id="인코딩을-피하라"><a href="#인코딩을-피하라" class="headerlink" title="인코딩을 피하라"></a>인코딩을 피하라</h3><ul><li><p>굳이 이름에 인코딩까지 할 필요는 없다.</p></li><li><p>문제 해결에 집중하는 개발자에게 인코딩은 불필요한 정신적 부담이다.</p><ul><li><p>헝가리식 표기법(변수 및 함수의 인자 이름 앞에 데이터 타입을 명시하던 규칙)</p></li><li><p>멤버 변수 접두어(m_)</p></li><li><p>인터페이스 클래스와 구현 클래스 인코딩은 어떻게 하지</p><blockquote><p>ShapeFactory - ShapeFactoryImp</p></blockquote></li></ul></li></ul><h3 id="자신의-기억력을-자랑하지-마라"><a href="#자신의-기억력을-자랑하지-마라" class="headerlink" title="자신의 기억력을 자랑하지 마라"></a>자신의 기억력을 자랑하지 마라</h3><ul><li>문자 하나만 사용하는 변수 이름은 문제가 있다.</li><li>루프에서 반복 횟수를 세는 변수 i, j, k 는 괜찮다.(l은 안된다!)</li><li>명료한 코드로 남들이 이해하기 쉬운 코드가 되도록 하자</li></ul><h3 id="클래스-이름-객체-이름"><a href="#클래스-이름-객체-이름" class="headerlink" title="클래스 이름, 객체 이름"></a>클래스 이름, 객체 이름</h3><ul><li>명사나 명사구가 적합하다.<ul><li>좋은 예: Customer, WikiPage, Account, AddressParser</li><li>피해야하는 예: Manager, Processor, Data, Info 등</li><li>동사도 사용하지 말라</li></ul></li></ul><h3 id="메서드-이름"><a href="#메서드-이름" class="headerlink" title="메서드 이름"></a>메서드 이름</h3><ul><li><p>동사나 동사구가 적합하다.</p><ul><li><p>postPayment, deletePage, save emd</p></li><li><p>Accessor, Mutator, Predicate는 자바빈 표준에 따라 값 앞에 get, set, is를 붙인다.</p></li><li><p>생성자를 중복정의할 때는 정적 팩토리 메서드를 사용한다.</p></li><li><p>메서드는 인수를 설명하는 이름을 사용한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Complex</span> <span class="variable">fulcrumPoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Complex</span>(<span class="number">23.0</span>);<span class="comment">// 인수를 직접 넣음</span></span><br><span class="line"></span><br><span class="line"><span class="type">Complex</span> <span class="variable">fulcrumPoint</span> <span class="operator">=</span> Complex.FromRealNumber(<span class="number">23.0</span>);<span class="comment">// 팩토리 메서드 사용하여 인수 넣음</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="기발한-이름은-피하라"><a href="#기발한-이름은-피하라" class="headerlink" title="기발한 이름은 피하라"></a>기발한 이름은 피하라</h3><ul><li>재미난 이름보다 명료한 이름을 선택하라</li><li>특정 문화에서의 농담이나 구어체, 속어 등을 피해라</li><li><strong>의도를 분명하고 솔직하게 표현하라.</strong></li></ul><h3 id="한-개념에-한-단어를-사용하라"><a href="#한-개념에-한-단어를-사용하라" class="headerlink" title="한 개념에 한 단어를 사용하라"></a>한 개념에 한 단어를 사용하라</h3><ul><li>추상적인 개념 하나에 단어 하나를 선택해 이를 고수해라</li><li>이름을 제각각 부르면 혼란스러워지고 어느 클래스에서 어느 이름을 썼는지 기억하기 어렵다.</li><li><strong>일관성 있는 어휘는</strong> 코드를 사용할 프로그래머가 반갑게 여긴다.</li></ul><h3 id="말장난을-하지-마라"><a href="#말장난을-하지-마라" class="headerlink" title="말장난을 하지 마라"></a>말장난을 하지 마라</h3><ul><li>다른 개념에 같은 단어를 사용하는 것은 말장난이다.</li><li>집중적인 탐구가 필요한 코드가 아니라 대충 훑어봐도 이해할 코드 작성이 목표다.</li><li>의미를 해독할 책임이 독자에게 있는 논문이 아니라 <strong>의도를 밝힐 책임이 저자에게 있는 잡지 모델이 바람직하다</strong></li></ul><h3 id="해법-영역에서-가져온-이름을-사용하라"><a href="#해법-영역에서-가져온-이름을-사용하라" class="headerlink" title="해법 영역에서 가져온 이름을 사용하라"></a>해법 영역에서 가져온 이름을 사용하라</h3><ul><li>코드를 읽을 사람도 프로그래머이다.</li><li>모든 이름을 domain에서 가져올 필요는 없다.<ul><li>같은 개념을 다른 이름으로 이해하던 동료들이 매번 고객에게 의미를 물어야한다.</li></ul></li></ul><h3 id="문제-영역에서-가져온-이름을-사용하라"><a href="#문제-영역에서-가져온-이름을-사용하라" class="headerlink" title="문제 영역에서 가져온 이름을 사용하라"></a>문제 영역에서 가져온 이름을 사용하라</h3><ul><li><p>적절한 ‘프로그래머 용어’가 없다면 문제 영역에서 이름을 가져온다.</p></li><li><p>해법 영역과 문제 영역을 구분할 줄 알아야 한다.</p></li><li><p>문제 영역 개념과 관련이 깊은 코드라면 문제 영역에서 이름을 가져와야 한다.</p></li></ul><h3 id="의미-있는-맥락을-추가하라"><a href="#의미-있는-맥락을-추가하라" class="headerlink" title="의미 있는 맥락을 추가하라"></a>의미 있는 맥락을 추가하라</h3><ul><li>스스로 의미가 분명한 이름이 없지 않다.(있다, 하지만 대다수는 그렇지 못하다)<ul><li>그래서 클래스, 함수, 이름 공간에 넣어 맥락을 부여한다.</li><li>모든 방법이 실패하면 마지막 수단인 접두어 사용(거의 안할듯)</li></ul></li></ul><h3 id="불필요한-맥락을-없애라"><a href="#불필요한-맥락을-없애라" class="headerlink" title="불필요한 맥락을 없애라"></a>불필요한 맥락을 없애라</h3><ul><li>이름에 불필요한 맥락을 추가하지 않도록 주의한다.<ul><li>accountAddress와 customerAddress는 Address 클래스의 인스턴스로는 바람직하지만</li><li>클래스 이름으로는 적합하지 않다.</li><li>Addresss는 클래스 이름으로 적합하다.</li><li>PostalAddress, MAC, URI로 구분하면서 이름을 분명하게 할 수도 있다.</li></ul></li></ul><h3 id="결론-마치면서"><a href="#결론-마치면서" class="headerlink" title="결론(마치면서)"></a>결론(마치면서)</h3><ul><li><p>좋은 이름을 선택하려면 설명 능력이 뛰어나야 하고 문화적인 배경이 같아야 한다. (이게 제일 어렵다고 한다…)</p></li><li><p>사람들이 이름을 바꾸지 않으려는 이유 하나는 다른 개발자가 반대할까 두려워서이다.</p><ul><li>좋은 이름으로 바꿔주면 반갑고 고마워 하자</li></ul></li><li><p>암기는 요즘 나오는 도구에게 맡기고, 우리는 문장이나 문단처럼 읽히는 코드 아니면, 적어도 표나 자료 구조처럼 읽히는 코드를 짜는 데만 집중해야 마땅하다.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Clean_Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Code 1장 - 깨끗한 코드</title>
      <link href="/2021/02/08/clean_code/chapter01/"/>
      <url>/2021/02/08/clean_code/chapter01/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>급하고, 서둘러 끝내야 할수록 읽기 쉽게 만들자</em></p><p><em>주변 코드를 읽지 않으면 새 코드를 짜지 못한다</em></p><p><em>주변 코드를 읽기 어려우면 새 코드를 짜기도 어렵다</em></p></blockquote><ul><li>코드는 항상 존재하리라</li><li>나쁜 코드에 대한 대가</li><li>깨끗한 코드에 대한 여러 프로그래머들의 의견들</li><li>결론</li></ul><h3 id="보이스카우트-규칙"><a href="#보이스카우트-규칙" class="headerlink" title="보이스카우트 규칙"></a>보이스카우트 규칙</h3><blockquote><p>캠프장은 처음 왔을 때보다 더 깨끗하게 하고 떠나라</p></blockquote><h3 id="설계-원칙"><a href="#설계-원칙" class="headerlink" title="설계 원칙"></a>설계 원칙</h3><ul><li><strong>SRP</strong> <em>(Single Responsibility)</em>: 클래스에는 한 가지, 단 한 가지 변경 이유만 존재해야 한다. </li><li><strong>OCP</strong> <em>(The Open Closed Principle)</em>: 클래스는 확장에 열려 있어야 하며 변경에 닫혀 있어야 한다. </li><li><strong>LSP</strong> <em>(The Liskov Substitution Principle)</em>: 상속받은 클래스는 기초 클래스를 대체할 수 있어야 한다. </li><li><strong>DIP</strong> <em>(The Dependency inversion Principle)</em>: 추상화에 의존해야 하며, 구체화에 의존하면 안 된다. </li><li><strong>ISP</strong> <em>(The Interface Segregation Principle)</em>: 클라이언트에 밀접하게 작게 쪼개진 인터페이스를 유지한다.</li></ul><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3>]]></content>
      
      
      <categories>
          
          <category> Clean_Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
